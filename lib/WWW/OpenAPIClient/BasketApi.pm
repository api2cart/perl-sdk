=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::BasketApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# basket_info
#
# basket.info
#
# @param string $id Entity id (required)
# @param string $store_id Store Id (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'force_all')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'basket_info' } = {
        summary => 'basket.info',
        params => $params,
        returns => 'BasketInfo200Response',
        };
}
# @return BasketInfo200Response
#
sub basket_info {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling basket_info");
    }

    # parse inputs
    my $_resource_path = '/basket.info.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BasketInfo200Response', $response);
    return $_response_object;
}

#
# basket_item_add
#
# basket.item.add
#
# @param string $customer_id Retrieves orders specified by customer id (required)
# @param string $product_id Defines id of the product which should be added to the basket (required)
# @param string $variant_id Defines product&#39;s variants specified by variant id (optional)
# @param double $quantity Defines new items quantity (optional, default to 0)
# @param string $store_id Store Id (optional)
{
    my $params = {
    'customer_id' => {
        data_type => 'string',
        description => 'Retrieves orders specified by customer id',
        required => '1',
    },
    'product_id' => {
        data_type => 'string',
        description => 'Defines id of the product which should be added to the basket',
        required => '1',
    },
    'variant_id' => {
        data_type => 'string',
        description => 'Defines product&#39;s variants specified by variant id',
        required => '0',
    },
    'quantity' => {
        data_type => 'double',
        description => 'Defines new items quantity',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'basket_item_add' } = {
        summary => 'basket.item.add',
        params => $params,
        returns => 'BasketItemAdd200Response',
        };
}
# @return BasketItemAdd200Response
#
sub basket_item_add {
    my ($self, %args) = @_;

    # verify the required parameter 'customer_id' is set
    unless (exists $args{'customer_id'}) {
      croak("Missing the required parameter 'customer_id' when calling basket_item_add");
    }

    # verify the required parameter 'product_id' is set
    unless (exists $args{'product_id'}) {
      croak("Missing the required parameter 'product_id' when calling basket_item_add");
    }

    # parse inputs
    my $_resource_path = '/basket.item.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'customer_id'}) {
        $query_params->{'customer_id'} = $self->{api_client}->to_query_value($args{'customer_id'});
    }

    # query params
    if ( exists $args{'product_id'}) {
        $query_params->{'product_id'} = $self->{api_client}->to_query_value($args{'product_id'});
    }

    # query params
    if ( exists $args{'variant_id'}) {
        $query_params->{'variant_id'} = $self->{api_client}->to_query_value($args{'variant_id'});
    }

    # query params
    if ( exists $args{'quantity'}) {
        $query_params->{'quantity'} = $self->{api_client}->to_query_value($args{'quantity'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BasketItemAdd200Response', $response);
    return $_response_object;
}

#
# basket_live_shipping_service_create
#
# basket.live_shipping_service.create
#
# @param string $name Shipping Service Name (required)
# @param string $callback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (required)
# @param string $store_id Store Id (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Shipping Service Name',
        required => '1',
    },
    'callback' => {
        data_type => 'string',
        description => 'Callback url that returns shipping rates. It should be able to accept POST requests with json data.',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'basket_live_shipping_service_create' } = {
        summary => 'basket.live_shipping_service.create',
        params => $params,
        returns => 'BasketLiveShippingServiceCreate200Response',
        };
}
# @return BasketLiveShippingServiceCreate200Response
#
sub basket_live_shipping_service_create {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling basket_live_shipping_service_create");
    }

    # verify the required parameter 'callback' is set
    unless (exists $args{'callback'}) {
      croak("Missing the required parameter 'callback' when calling basket_live_shipping_service_create");
    }

    # parse inputs
    my $_resource_path = '/basket.live_shipping_service.create.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'callback'}) {
        $query_params->{'callback'} = $self->{api_client}->to_query_value($args{'callback'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BasketLiveShippingServiceCreate200Response', $response);
    return $_response_object;
}

#
# basket_live_shipping_service_delete
#
# basket.live_shipping_service.delete
#
# @param int $id Entity id (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'Entity id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'basket_live_shipping_service_delete' } = {
        summary => 'basket.live_shipping_service.delete',
        params => $params,
        returns => 'BasketLiveShippingServiceDelete200Response',
        };
}
# @return BasketLiveShippingServiceDelete200Response
#
sub basket_live_shipping_service_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling basket_live_shipping_service_delete");
    }

    # parse inputs
    my $_resource_path = '/basket.live_shipping_service.delete.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BasketLiveShippingServiceDelete200Response', $response);
    return $_response_object;
}

#
# basket_live_shipping_service_list
#
# basket.live_shipping_service.list
#
# @param string $store_id Store Id (optional)
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
{
    my $params = {
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'basket_live_shipping_service_list' } = {
        summary => 'basket.live_shipping_service.list',
        params => $params,
        returns => 'BasketLiveShippingServiceList200Response',
        };
}
# @return BasketLiveShippingServiceList200Response
#
sub basket_live_shipping_service_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/basket.live_shipping_service.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BasketLiveShippingServiceList200Response', $response);
    return $_response_object;
}

1;
