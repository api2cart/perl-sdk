=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::AccountApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# account_cart_add
#
# account.cart.add
#
# @param AccountCartAdd $account_cart_add  (required)
{
    my $params = {
    'account_cart_add' => {
        data_type => 'AccountCartAdd',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'account_cart_add' } = {
        summary => 'account.cart.add',
        params => $params,
        returns => 'AccountCartAdd200Response',
        };
}
# @return AccountCartAdd200Response
#
sub account_cart_add {
    my ($self, %args) = @_;

    # verify the required parameter 'account_cart_add' is set
    unless (exists $args{'account_cart_add'}) {
      croak("Missing the required parameter 'account_cart_add' when calling account_cart_add");
    }

    # parse inputs
    my $_resource_path = '/account.cart.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'account_cart_add'}) {
        $_body_data = $args{'account_cart_add'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AccountCartAdd200Response', $response);
    return $_response_object;
}

#
# account_cart_list
#
# account.cart.list
#
# @param string $store_url A web address of a store (optional)
# @param string $store_key Find store by store key (optional)
# @param string $request_from_date Retrieve entities from their creation date (optional)
# @param string $request_to_date Retrieve entities to their creation date (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'force_all')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'store_url' => {
        data_type => 'string',
        description => 'A web address of a store',
        required => '0',
    },
    'store_key' => {
        data_type => 'string',
        description => 'Find store by store key',
        required => '0',
    },
    'request_from_date' => {
        data_type => 'string',
        description => 'Retrieve entities from their creation date',
        required => '0',
    },
    'request_to_date' => {
        data_type => 'string',
        description => 'Retrieve entities to their creation date',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'account_cart_list' } = {
        summary => 'account.cart.list',
        params => $params,
        returns => 'AccountCartList200Response',
        };
}
# @return AccountCartList200Response
#
sub account_cart_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/account.cart.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'store_url'}) {
        $query_params->{'store_url'} = $self->{api_client}->to_query_value($args{'store_url'});
    }

    # query params
    if ( exists $args{'store_key'}) {
        $query_params->{'store_key'} = $self->{api_client}->to_query_value($args{'store_key'});
    }

    # query params
    if ( exists $args{'request_from_date'}) {
        $query_params->{'request_from_date'} = $self->{api_client}->to_query_value($args{'request_from_date'});
    }

    # query params
    if ( exists $args{'request_to_date'}) {
        $query_params->{'request_to_date'} = $self->{api_client}->to_query_value($args{'request_to_date'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AccountCartList200Response', $response);
    return $_response_object;
}

#
# account_config_update
#
# account.config.update
#
# @param boolean $replace_parameters Identifies if there is a necessity to replace parameters (optional)
# @param string $new_store_url The web address of the store you want to update to connect to API2Cart (optional)
# @param string $new_store_key Update store key (optional)
# @param string $bridge_url This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store) (optional)
# @param string $store_root Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter) (optional)
# @param string $db_tables_prefix DB tables prefix (optional)
# @param string $user_agent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values. (optional)
# @param string $_3dcart_private_key 3DCart Private Key (optional)
# @param string $_3dcart_access_token 3DCart Token (optional)
# @param string $_3dcartapi_api_key 3DCart API Key (optional)
# @param string $amazon_sp_client_id Amazon SP API app client id (optional)
# @param string $amazon_sp_client_secret Amazon SP API app client secret (optional)
# @param string $amazon_sp_refresh_token Amazon SP API OAuth refresh token (optional)
# @param string $amazon_sp_aws_region Amazon AWS Region (optional)
# @param string $amazon_sp_api_environment Amazon SP API environment (optional, default to 'production')
# @param string $amazon_seller_id Amazon Seller ID (Merchant token) (optional)
# @param string $aspdotnetstorefront_api_user It&#39;s a AspDotNetStorefront account for which API is available (optional)
# @param string $aspdotnetstorefront_api_pass AspDotNetStorefront API Password (optional)
# @param string $bigcommerceapi_admin_account It&#39;s a BigCommerce account for which API is enabled (optional)
# @param string $bigcommerceapi_api_path BigCommerce API URL (optional)
# @param string $bigcommerceapi_api_key Bigcommerce API Key (optional)
# @param string $bigcommerceapi_client_id Client ID of the requesting app (optional)
# @param string $bigcommerceapi_access_token Access token authorizing the app to access resources on behalf of a user (optional)
# @param string $bigcommerceapi_context API Path section unique to the store (optional)
# @param string $bol_api_key Bol API Key (optional)
# @param string $bol_api_secret Bol API Secret (optional)
# @param int $bol_retailer_id Bol Retailer ID (optional)
# @param string $demandware_client_id Demandware client id (optional)
# @param string $demandware_api_password Demandware api password (optional)
# @param string $demandware_user_name Demandware user name (optional)
# @param string $demandware_user_password Demandware user password (optional)
# @param string $ebay_client_id Application ID (AppID). (optional)
# @param string $ebay_client_secret Shared Secret from eBay application (optional)
# @param string $ebay_runame The RuName value that eBay assigns to your application. (optional)
# @param string $ebay_access_token Used to authenticate API requests. (optional)
# @param string $ebay_refresh_token Used to renew the access token. (optional)
# @param string $ebay_environment eBay environment (optional)
# @param int $ebay_site_id eBay global ID (optional, default to 0)
# @param string $ecwid_acess_token Access token authorizing the app to access resources on behalf of a user (optional)
# @param string $ecwid_store_id Store Id (optional)
# @param string $lazada_app_id Lazada App ID (optional)
# @param string $lazada_app_secret Lazada App Secret (optional)
# @param string $lazada_refresh_token Lazada Refresh Token (optional)
# @param string $lazada_region Lazada API endpoint Region (optional)
# @param string $etsy_keystring Etsy keystring (optional)
# @param string $etsy_shared_secret Etsy shared secret (optional)
# @param string $etsy_access_token Access token authorizing the app to access resources on behalf of a user (optional)
# @param string $etsy_token_secret Secret token authorizing the app to access resources on behalf of a user (optional)
# @param string $etsy_client_id Etsy Client Id (optional)
# @param string $etsy_refresh_token Etsy Refresh token (optional)
# @param string $facebook_app_id Facebook App ID (optional)
# @param string $facebook_app_secret Facebook App Secret (optional)
# @param string $facebook_access_token Facebook Access Token (optional)
# @param string $facebook_business_id Facebook Business ID (optional)
# @param string $neto_api_key Neto API Key (optional)
# @param string $neto_api_username Neto User Name (optional)
# @param string $shopline_access_token Shopline APP Key (optional)
# @param string $shopline_app_key Shopline APP Key (optional)
# @param string $shopline_app_secret Shopline App Secret (optional)
# @param string $shopline_shared_secret Shopline Shared Secret (optional)
# @param string $shopify_access_token Access token authorizing the app to access resources on behalf of a user (optional)
# @param string $shopify_api_key Shopify API Key (optional)
# @param string $shopify_api_password Shopify API Password (optional)
# @param string $shopify_shared_secret Shared secret (optional)
# @param string $shopee_partner_id Shopee Partner ID (optional)
# @param string $shopee_partner_key Shopee Partner Key (optional)
# @param string $shopee_shop_id Shopee SHOP ID (optional)
# @param string $shopee_refresh_token Shopee Refresh Token (optional)
# @param string $shopee_region Shopee API endpoint Region. Use for Chinese Mainland or Brazil. (optional)
# @param string $shopee_environment Shopee Environment (optional)
# @param string $shoplazza_access_token Access token authorizing the app to access resources on behalf of a user (optional)
# @param string $shoplazza_shared_secret Shared secret (optional)
# @param string $miva_access_token Miva access token (optional)
# @param string $miva_signature Miva signature (optional)
# @param string $shopware_access_key Shopware access key (optional)
# @param string $unas_api_key UNAS API Key (optional)
# @param string $shopware_api_key Shopware api key (optional)
# @param string $shopware_api_secret Shopware client secret access key (optional)
# @param string $bigcartel_user_name Subdomain of store (optional)
# @param string $bigcartel_password BigCartel account password (optional)
# @param string $bricklink_consumer_key Bricklink Consumer Key (optional)
# @param string $bricklink_consumer_secret Bricklink Consumer Secret (optional)
# @param string $bricklink_token Bricklink Access Token (optional)
# @param string $bricklink_token_secret Bricklink Access Token Secret (optional)
# @param string $volusion_login It&#39;s a Volusion account for which API is enabled (optional)
# @param string $volusion_password Volusion API Password (optional)
# @param string $walmart_client_id Walmart client ID. For the region &#39;ca&#39; use Consumer ID (optional)
# @param string $walmart_client_secret Walmart client secret. For the region &#39;ca&#39; use Private Key (optional)
# @param string $walmart_environment Walmart environment (optional, default to 'production')
# @param string $walmart_channel_type Walmart WM_CONSUMER.CHANNEL.TYPE header (optional)
# @param string $walmart_region Walmart region (optional, default to 'us')
# @param string $square_client_id Square (Weebly) Client ID (optional)
# @param string $square_client_secret Square (Weebly) Client Secret (optional)
# @param string $square_refresh_token Square (Weebly) Refresh Token (optional)
# @param string $squarespace_api_key Squarespace API Key (optional)
# @param string $squarespace_client_id Squarespace Connector Client ID (optional)
# @param string $squarespace_client_secret Squarespace Connector Client Secret (optional)
# @param string $squarespace_access_token Squarespace access token (optional)
# @param string $squarespace_refresh_token Squarespace refresh token (optional)
# @param string $hybris_client_id Omni Commerce Connector Client ID (optional)
# @param string $hybris_client_secret Omni Commerce Connector Client Secret (optional)
# @param string $hybris_username User Name (optional)
# @param string $hybris_password User password (optional)
# @param ARRAY[string] $hybris_websites Websites to stores mapping data (optional)
# @param string $lightspeed_api_key LightSpeed api key (optional)
# @param string $lightspeed_api_secret LightSpeed api secret (optional)
# @param string $commercehq_api_key CommerceHQ api key (optional)
# @param string $commercehq_api_password CommerceHQ api password (optional)
# @param string $wc_consumer_key Woocommerce consumer key (optional)
# @param string $wc_consumer_secret Woocommerce consumer secret (optional)
# @param string $magento_consumer_key Magento Consumer Key (optional)
# @param string $magento_consumer_secret Magento Consumer Secret (optional)
# @param string $magento_access_token Magento Access Token (optional)
# @param string $magento_token_secret Magento Token Secret (optional)
# @param string $prestashop_webservice_key Prestashop webservice key (optional)
# @param string $wix_app_id Wix App ID (optional)
# @param string $wix_app_secret_key Wix App Secret Key (optional)
# @param string $wix_instance_id Wix Instance ID (optional)
# @param string $wix_refresh_token Wix refresh token (optional)
# @param string $mercado_libre_app_id Mercado Libre App ID (optional)
# @param string $mercado_libre_app_secret_key Mercado Libre App Secret Key (optional)
# @param string $mercado_libre_refresh_token Mercado Libre Refresh Token (optional)
# @param int $zid_client_id Zid Client ID (optional)
# @param string $zid_client_secret Zid Client Secret (optional)
# @param string $zid_access_token Zid Access Token (optional)
# @param string $zid_authorization Zid Authorization (optional)
# @param string $zid_refresh_token Zid refresh token (optional)
# @param string $flipkart_client_id Flipkart Client ID (optional)
# @param string $flipkart_client_secret Flipkart Client Secret (optional)
# @param string $allegro_client_id Allegro Client ID (optional)
# @param string $allegro_client_secret Allegro Client Secret (optional)
# @param string $allegro_access_token Allegro Access Token (optional)
# @param string $allegro_refresh_token Allegro Refresh Token (optional)
# @param string $allegro_environment Allegro Environment (optional, default to 'production')
# @param string $zoho_client_id Zoho Client ID (optional)
# @param string $zoho_client_secret Zoho Client Secret (optional)
# @param string $zoho_refresh_token Zoho Refresh Token (optional)
# @param string $zoho_region Zoho API endpoint Region (optional)
# @param int $tiendanube_user_id Tiendanube User ID (optional)
# @param string $tiendanube_access_token Tiendanube Access Token (optional)
# @param string $tiendanube_client_secret Tiendanube Client Secret (optional)
# @param string $otto_client_id Otto Client ID (optional)
# @param string $otto_client_secret Otto Client Secret (optional)
# @param string $otto_app_id Otto App ID (optional)
# @param string $otto_refresh_token Otto Refresh Token (optional)
# @param string $otto_environment Otto Environment (optional)
# @param string $otto_access_token Otto Access Token (optional)
# @param string $tiktokshop_app_key TikTok Shop App Key (optional)
# @param string $tiktokshop_app_secret TikTok Shop App Secret (optional)
# @param string $tiktokshop_refresh_token TikTok Shop Refresh Token (optional)
# @param string $tiktokshop_access_token TikTok Shop Access Token (optional)
# @param string $salla_client_id Salla Client ID (optional)
# @param string $salla_client_secret Salla Client Secret (optional)
# @param string $salla_refresh_token Salla Refresh Token (optional)
# @param string $salla_access_token Salla Access Token (optional)
# @param string $temu_app_key Temu App Key (optional)
# @param string $temu_app_secret Temu App Secret (optional)
# @param string $temu_access_token Temu Access Token (optional)
# @param string $temu_region Temu API endpoint Region. (optional)
{
    my $params = {
    'replace_parameters' => {
        data_type => 'boolean',
        description => 'Identifies if there is a necessity to replace parameters',
        required => '0',
    },
    'new_store_url' => {
        data_type => 'string',
        description => 'The web address of the store you want to update to connect to API2Cart',
        required => '0',
    },
    'new_store_key' => {
        data_type => 'string',
        description => 'Update store key',
        required => '0',
    },
    'bridge_url' => {
        data_type => 'string',
        description => 'This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)',
        required => '0',
    },
    'store_root' => {
        data_type => 'string',
        description => 'Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)',
        required => '0',
    },
    'db_tables_prefix' => {
        data_type => 'string',
        description => 'DB tables prefix',
        required => '0',
    },
    'user_agent' => {
        data_type => 'string',
        description => 'This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values.',
        required => '0',
    },
    '_3dcart_private_key' => {
        data_type => 'string',
        description => '3DCart Private Key',
        required => '0',
    },
    '_3dcart_access_token' => {
        data_type => 'string',
        description => '3DCart Token',
        required => '0',
    },
    '_3dcartapi_api_key' => {
        data_type => 'string',
        description => '3DCart API Key',
        required => '0',
    },
    'amazon_sp_client_id' => {
        data_type => 'string',
        description => 'Amazon SP API app client id',
        required => '0',
    },
    'amazon_sp_client_secret' => {
        data_type => 'string',
        description => 'Amazon SP API app client secret',
        required => '0',
    },
    'amazon_sp_refresh_token' => {
        data_type => 'string',
        description => 'Amazon SP API OAuth refresh token',
        required => '0',
    },
    'amazon_sp_aws_region' => {
        data_type => 'string',
        description => 'Amazon AWS Region',
        required => '0',
    },
    'amazon_sp_api_environment' => {
        data_type => 'string',
        description => 'Amazon SP API environment',
        required => '0',
    },
    'amazon_seller_id' => {
        data_type => 'string',
        description => 'Amazon Seller ID (Merchant token)',
        required => '0',
    },
    'aspdotnetstorefront_api_user' => {
        data_type => 'string',
        description => 'It&#39;s a AspDotNetStorefront account for which API is available',
        required => '0',
    },
    'aspdotnetstorefront_api_pass' => {
        data_type => 'string',
        description => 'AspDotNetStorefront API Password',
        required => '0',
    },
    'bigcommerceapi_admin_account' => {
        data_type => 'string',
        description => 'It&#39;s a BigCommerce account for which API is enabled',
        required => '0',
    },
    'bigcommerceapi_api_path' => {
        data_type => 'string',
        description => 'BigCommerce API URL',
        required => '0',
    },
    'bigcommerceapi_api_key' => {
        data_type => 'string',
        description => 'Bigcommerce API Key',
        required => '0',
    },
    'bigcommerceapi_client_id' => {
        data_type => 'string',
        description => 'Client ID of the requesting app',
        required => '0',
    },
    'bigcommerceapi_access_token' => {
        data_type => 'string',
        description => 'Access token authorizing the app to access resources on behalf of a user',
        required => '0',
    },
    'bigcommerceapi_context' => {
        data_type => 'string',
        description => 'API Path section unique to the store',
        required => '0',
    },
    'bol_api_key' => {
        data_type => 'string',
        description => 'Bol API Key',
        required => '0',
    },
    'bol_api_secret' => {
        data_type => 'string',
        description => 'Bol API Secret',
        required => '0',
    },
    'bol_retailer_id' => {
        data_type => 'int',
        description => 'Bol Retailer ID',
        required => '0',
    },
    'demandware_client_id' => {
        data_type => 'string',
        description => 'Demandware client id',
        required => '0',
    },
    'demandware_api_password' => {
        data_type => 'string',
        description => 'Demandware api password',
        required => '0',
    },
    'demandware_user_name' => {
        data_type => 'string',
        description => 'Demandware user name',
        required => '0',
    },
    'demandware_user_password' => {
        data_type => 'string',
        description => 'Demandware user password',
        required => '0',
    },
    'ebay_client_id' => {
        data_type => 'string',
        description => 'Application ID (AppID).',
        required => '0',
    },
    'ebay_client_secret' => {
        data_type => 'string',
        description => 'Shared Secret from eBay application',
        required => '0',
    },
    'ebay_runame' => {
        data_type => 'string',
        description => 'The RuName value that eBay assigns to your application.',
        required => '0',
    },
    'ebay_access_token' => {
        data_type => 'string',
        description => 'Used to authenticate API requests.',
        required => '0',
    },
    'ebay_refresh_token' => {
        data_type => 'string',
        description => 'Used to renew the access token.',
        required => '0',
    },
    'ebay_environment' => {
        data_type => 'string',
        description => 'eBay environment',
        required => '0',
    },
    'ebay_site_id' => {
        data_type => 'int',
        description => 'eBay global ID',
        required => '0',
    },
    'ecwid_acess_token' => {
        data_type => 'string',
        description => 'Access token authorizing the app to access resources on behalf of a user',
        required => '0',
    },
    'ecwid_store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lazada_app_id' => {
        data_type => 'string',
        description => 'Lazada App ID',
        required => '0',
    },
    'lazada_app_secret' => {
        data_type => 'string',
        description => 'Lazada App Secret',
        required => '0',
    },
    'lazada_refresh_token' => {
        data_type => 'string',
        description => 'Lazada Refresh Token',
        required => '0',
    },
    'lazada_region' => {
        data_type => 'string',
        description => 'Lazada API endpoint Region',
        required => '0',
    },
    'etsy_keystring' => {
        data_type => 'string',
        description => 'Etsy keystring',
        required => '0',
    },
    'etsy_shared_secret' => {
        data_type => 'string',
        description => 'Etsy shared secret',
        required => '0',
    },
    'etsy_access_token' => {
        data_type => 'string',
        description => 'Access token authorizing the app to access resources on behalf of a user',
        required => '0',
    },
    'etsy_token_secret' => {
        data_type => 'string',
        description => 'Secret token authorizing the app to access resources on behalf of a user',
        required => '0',
    },
    'etsy_client_id' => {
        data_type => 'string',
        description => 'Etsy Client Id',
        required => '0',
    },
    'etsy_refresh_token' => {
        data_type => 'string',
        description => 'Etsy Refresh token',
        required => '0',
    },
    'facebook_app_id' => {
        data_type => 'string',
        description => 'Facebook App ID',
        required => '0',
    },
    'facebook_app_secret' => {
        data_type => 'string',
        description => 'Facebook App Secret',
        required => '0',
    },
    'facebook_access_token' => {
        data_type => 'string',
        description => 'Facebook Access Token',
        required => '0',
    },
    'facebook_business_id' => {
        data_type => 'string',
        description => 'Facebook Business ID',
        required => '0',
    },
    'neto_api_key' => {
        data_type => 'string',
        description => 'Neto API Key',
        required => '0',
    },
    'neto_api_username' => {
        data_type => 'string',
        description => 'Neto User Name',
        required => '0',
    },
    'shopline_access_token' => {
        data_type => 'string',
        description => 'Shopline APP Key',
        required => '0',
    },
    'shopline_app_key' => {
        data_type => 'string',
        description => 'Shopline APP Key',
        required => '0',
    },
    'shopline_app_secret' => {
        data_type => 'string',
        description => 'Shopline App Secret',
        required => '0',
    },
    'shopline_shared_secret' => {
        data_type => 'string',
        description => 'Shopline Shared Secret',
        required => '0',
    },
    'shopify_access_token' => {
        data_type => 'string',
        description => 'Access token authorizing the app to access resources on behalf of a user',
        required => '0',
    },
    'shopify_api_key' => {
        data_type => 'string',
        description => 'Shopify API Key',
        required => '0',
    },
    'shopify_api_password' => {
        data_type => 'string',
        description => 'Shopify API Password',
        required => '0',
    },
    'shopify_shared_secret' => {
        data_type => 'string',
        description => 'Shared secret',
        required => '0',
    },
    'shopee_partner_id' => {
        data_type => 'string',
        description => 'Shopee Partner ID',
        required => '0',
    },
    'shopee_partner_key' => {
        data_type => 'string',
        description => 'Shopee Partner Key',
        required => '0',
    },
    'shopee_shop_id' => {
        data_type => 'string',
        description => 'Shopee SHOP ID',
        required => '0',
    },
    'shopee_refresh_token' => {
        data_type => 'string',
        description => 'Shopee Refresh Token',
        required => '0',
    },
    'shopee_region' => {
        data_type => 'string',
        description => 'Shopee API endpoint Region. Use for Chinese Mainland or Brazil.',
        required => '0',
    },
    'shopee_environment' => {
        data_type => 'string',
        description => 'Shopee Environment',
        required => '0',
    },
    'shoplazza_access_token' => {
        data_type => 'string',
        description => 'Access token authorizing the app to access resources on behalf of a user',
        required => '0',
    },
    'shoplazza_shared_secret' => {
        data_type => 'string',
        description => 'Shared secret',
        required => '0',
    },
    'miva_access_token' => {
        data_type => 'string',
        description => 'Miva access token',
        required => '0',
    },
    'miva_signature' => {
        data_type => 'string',
        description => 'Miva signature',
        required => '0',
    },
    'shopware_access_key' => {
        data_type => 'string',
        description => 'Shopware access key',
        required => '0',
    },
    'unas_api_key' => {
        data_type => 'string',
        description => 'UNAS API Key',
        required => '0',
    },
    'shopware_api_key' => {
        data_type => 'string',
        description => 'Shopware api key',
        required => '0',
    },
    'shopware_api_secret' => {
        data_type => 'string',
        description => 'Shopware client secret access key',
        required => '0',
    },
    'bigcartel_user_name' => {
        data_type => 'string',
        description => 'Subdomain of store',
        required => '0',
    },
    'bigcartel_password' => {
        data_type => 'string',
        description => 'BigCartel account password',
        required => '0',
    },
    'bricklink_consumer_key' => {
        data_type => 'string',
        description => 'Bricklink Consumer Key',
        required => '0',
    },
    'bricklink_consumer_secret' => {
        data_type => 'string',
        description => 'Bricklink Consumer Secret',
        required => '0',
    },
    'bricklink_token' => {
        data_type => 'string',
        description => 'Bricklink Access Token',
        required => '0',
    },
    'bricklink_token_secret' => {
        data_type => 'string',
        description => 'Bricklink Access Token Secret',
        required => '0',
    },
    'volusion_login' => {
        data_type => 'string',
        description => 'It&#39;s a Volusion account for which API is enabled',
        required => '0',
    },
    'volusion_password' => {
        data_type => 'string',
        description => 'Volusion API Password',
        required => '0',
    },
    'walmart_client_id' => {
        data_type => 'string',
        description => 'Walmart client ID. For the region &#39;ca&#39; use Consumer ID',
        required => '0',
    },
    'walmart_client_secret' => {
        data_type => 'string',
        description => 'Walmart client secret. For the region &#39;ca&#39; use Private Key',
        required => '0',
    },
    'walmart_environment' => {
        data_type => 'string',
        description => 'Walmart environment',
        required => '0',
    },
    'walmart_channel_type' => {
        data_type => 'string',
        description => 'Walmart WM_CONSUMER.CHANNEL.TYPE header',
        required => '0',
    },
    'walmart_region' => {
        data_type => 'string',
        description => 'Walmart region',
        required => '0',
    },
    'square_client_id' => {
        data_type => 'string',
        description => 'Square (Weebly) Client ID',
        required => '0',
    },
    'square_client_secret' => {
        data_type => 'string',
        description => 'Square (Weebly) Client Secret',
        required => '0',
    },
    'square_refresh_token' => {
        data_type => 'string',
        description => 'Square (Weebly) Refresh Token',
        required => '0',
    },
    'squarespace_api_key' => {
        data_type => 'string',
        description => 'Squarespace API Key',
        required => '0',
    },
    'squarespace_client_id' => {
        data_type => 'string',
        description => 'Squarespace Connector Client ID',
        required => '0',
    },
    'squarespace_client_secret' => {
        data_type => 'string',
        description => 'Squarespace Connector Client Secret',
        required => '0',
    },
    'squarespace_access_token' => {
        data_type => 'string',
        description => 'Squarespace access token',
        required => '0',
    },
    'squarespace_refresh_token' => {
        data_type => 'string',
        description => 'Squarespace refresh token',
        required => '0',
    },
    'hybris_client_id' => {
        data_type => 'string',
        description => 'Omni Commerce Connector Client ID',
        required => '0',
    },
    'hybris_client_secret' => {
        data_type => 'string',
        description => 'Omni Commerce Connector Client Secret',
        required => '0',
    },
    'hybris_username' => {
        data_type => 'string',
        description => 'User Name',
        required => '0',
    },
    'hybris_password' => {
        data_type => 'string',
        description => 'User password',
        required => '0',
    },
    'hybris_websites' => {
        data_type => 'ARRAY[string]',
        description => 'Websites to stores mapping data',
        required => '0',
    },
    'lightspeed_api_key' => {
        data_type => 'string',
        description => 'LightSpeed api key',
        required => '0',
    },
    'lightspeed_api_secret' => {
        data_type => 'string',
        description => 'LightSpeed api secret',
        required => '0',
    },
    'commercehq_api_key' => {
        data_type => 'string',
        description => 'CommerceHQ api key',
        required => '0',
    },
    'commercehq_api_password' => {
        data_type => 'string',
        description => 'CommerceHQ api password',
        required => '0',
    },
    'wc_consumer_key' => {
        data_type => 'string',
        description => 'Woocommerce consumer key',
        required => '0',
    },
    'wc_consumer_secret' => {
        data_type => 'string',
        description => 'Woocommerce consumer secret',
        required => '0',
    },
    'magento_consumer_key' => {
        data_type => 'string',
        description => 'Magento Consumer Key',
        required => '0',
    },
    'magento_consumer_secret' => {
        data_type => 'string',
        description => 'Magento Consumer Secret',
        required => '0',
    },
    'magento_access_token' => {
        data_type => 'string',
        description => 'Magento Access Token',
        required => '0',
    },
    'magento_token_secret' => {
        data_type => 'string',
        description => 'Magento Token Secret',
        required => '0',
    },
    'prestashop_webservice_key' => {
        data_type => 'string',
        description => 'Prestashop webservice key',
        required => '0',
    },
    'wix_app_id' => {
        data_type => 'string',
        description => 'Wix App ID',
        required => '0',
    },
    'wix_app_secret_key' => {
        data_type => 'string',
        description => 'Wix App Secret Key',
        required => '0',
    },
    'wix_instance_id' => {
        data_type => 'string',
        description => 'Wix Instance ID',
        required => '0',
    },
    'wix_refresh_token' => {
        data_type => 'string',
        description => 'Wix refresh token',
        required => '0',
    },
    'mercado_libre_app_id' => {
        data_type => 'string',
        description => 'Mercado Libre App ID',
        required => '0',
    },
    'mercado_libre_app_secret_key' => {
        data_type => 'string',
        description => 'Mercado Libre App Secret Key',
        required => '0',
    },
    'mercado_libre_refresh_token' => {
        data_type => 'string',
        description => 'Mercado Libre Refresh Token',
        required => '0',
    },
    'zid_client_id' => {
        data_type => 'int',
        description => 'Zid Client ID',
        required => '0',
    },
    'zid_client_secret' => {
        data_type => 'string',
        description => 'Zid Client Secret',
        required => '0',
    },
    'zid_access_token' => {
        data_type => 'string',
        description => 'Zid Access Token',
        required => '0',
    },
    'zid_authorization' => {
        data_type => 'string',
        description => 'Zid Authorization',
        required => '0',
    },
    'zid_refresh_token' => {
        data_type => 'string',
        description => 'Zid refresh token',
        required => '0',
    },
    'flipkart_client_id' => {
        data_type => 'string',
        description => 'Flipkart Client ID',
        required => '0',
    },
    'flipkart_client_secret' => {
        data_type => 'string',
        description => 'Flipkart Client Secret',
        required => '0',
    },
    'allegro_client_id' => {
        data_type => 'string',
        description => 'Allegro Client ID',
        required => '0',
    },
    'allegro_client_secret' => {
        data_type => 'string',
        description => 'Allegro Client Secret',
        required => '0',
    },
    'allegro_access_token' => {
        data_type => 'string',
        description => 'Allegro Access Token',
        required => '0',
    },
    'allegro_refresh_token' => {
        data_type => 'string',
        description => 'Allegro Refresh Token',
        required => '0',
    },
    'allegro_environment' => {
        data_type => 'string',
        description => 'Allegro Environment',
        required => '0',
    },
    'zoho_client_id' => {
        data_type => 'string',
        description => 'Zoho Client ID',
        required => '0',
    },
    'zoho_client_secret' => {
        data_type => 'string',
        description => 'Zoho Client Secret',
        required => '0',
    },
    'zoho_refresh_token' => {
        data_type => 'string',
        description => 'Zoho Refresh Token',
        required => '0',
    },
    'zoho_region' => {
        data_type => 'string',
        description => 'Zoho API endpoint Region',
        required => '0',
    },
    'tiendanube_user_id' => {
        data_type => 'int',
        description => 'Tiendanube User ID',
        required => '0',
    },
    'tiendanube_access_token' => {
        data_type => 'string',
        description => 'Tiendanube Access Token',
        required => '0',
    },
    'tiendanube_client_secret' => {
        data_type => 'string',
        description => 'Tiendanube Client Secret',
        required => '0',
    },
    'otto_client_id' => {
        data_type => 'string',
        description => 'Otto Client ID',
        required => '0',
    },
    'otto_client_secret' => {
        data_type => 'string',
        description => 'Otto Client Secret',
        required => '0',
    },
    'otto_app_id' => {
        data_type => 'string',
        description => 'Otto App ID',
        required => '0',
    },
    'otto_refresh_token' => {
        data_type => 'string',
        description => 'Otto Refresh Token',
        required => '0',
    },
    'otto_environment' => {
        data_type => 'string',
        description => 'Otto Environment',
        required => '0',
    },
    'otto_access_token' => {
        data_type => 'string',
        description => 'Otto Access Token',
        required => '0',
    },
    'tiktokshop_app_key' => {
        data_type => 'string',
        description => 'TikTok Shop App Key',
        required => '0',
    },
    'tiktokshop_app_secret' => {
        data_type => 'string',
        description => 'TikTok Shop App Secret',
        required => '0',
    },
    'tiktokshop_refresh_token' => {
        data_type => 'string',
        description => 'TikTok Shop Refresh Token',
        required => '0',
    },
    'tiktokshop_access_token' => {
        data_type => 'string',
        description => 'TikTok Shop Access Token',
        required => '0',
    },
    'salla_client_id' => {
        data_type => 'string',
        description => 'Salla Client ID',
        required => '0',
    },
    'salla_client_secret' => {
        data_type => 'string',
        description => 'Salla Client Secret',
        required => '0',
    },
    'salla_refresh_token' => {
        data_type => 'string',
        description => 'Salla Refresh Token',
        required => '0',
    },
    'salla_access_token' => {
        data_type => 'string',
        description => 'Salla Access Token',
        required => '0',
    },
    'temu_app_key' => {
        data_type => 'string',
        description => 'Temu App Key',
        required => '0',
    },
    'temu_app_secret' => {
        data_type => 'string',
        description => 'Temu App Secret',
        required => '0',
    },
    'temu_access_token' => {
        data_type => 'string',
        description => 'Temu Access Token',
        required => '0',
    },
    'temu_region' => {
        data_type => 'string',
        description => 'Temu API endpoint Region.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'account_config_update' } = {
        summary => 'account.config.update',
        params => $params,
        returns => 'AccountConfigUpdate200Response',
        };
}
# @return AccountConfigUpdate200Response
#
sub account_config_update {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/account.config.update.json';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'replace_parameters'}) {
        $query_params->{'replace_parameters'} = $self->{api_client}->to_query_value($args{'replace_parameters'});
    }

    # query params
    if ( exists $args{'new_store_url'}) {
        $query_params->{'new_store_url'} = $self->{api_client}->to_query_value($args{'new_store_url'});
    }

    # query params
    if ( exists $args{'new_store_key'}) {
        $query_params->{'new_store_key'} = $self->{api_client}->to_query_value($args{'new_store_key'});
    }

    # query params
    if ( exists $args{'bridge_url'}) {
        $query_params->{'bridge_url'} = $self->{api_client}->to_query_value($args{'bridge_url'});
    }

    # query params
    if ( exists $args{'store_root'}) {
        $query_params->{'store_root'} = $self->{api_client}->to_query_value($args{'store_root'});
    }

    # query params
    if ( exists $args{'db_tables_prefix'}) {
        $query_params->{'db_tables_prefix'} = $self->{api_client}->to_query_value($args{'db_tables_prefix'});
    }

    # query params
    if ( exists $args{'user_agent'}) {
        $query_params->{'user_agent'} = $self->{api_client}->to_query_value($args{'user_agent'});
    }

    # query params
    if ( exists $args{'_3dcart_private_key'}) {
        $query_params->{'3dcart_private_key'} = $self->{api_client}->to_query_value($args{'_3dcart_private_key'});
    }

    # query params
    if ( exists $args{'_3dcart_access_token'}) {
        $query_params->{'3dcart_access_token'} = $self->{api_client}->to_query_value($args{'_3dcart_access_token'});
    }

    # query params
    if ( exists $args{'_3dcartapi_api_key'}) {
        $query_params->{'3dcartapi_api_key'} = $self->{api_client}->to_query_value($args{'_3dcartapi_api_key'});
    }

    # query params
    if ( exists $args{'amazon_sp_client_id'}) {
        $query_params->{'amazon_sp_client_id'} = $self->{api_client}->to_query_value($args{'amazon_sp_client_id'});
    }

    # query params
    if ( exists $args{'amazon_sp_client_secret'}) {
        $query_params->{'amazon_sp_client_secret'} = $self->{api_client}->to_query_value($args{'amazon_sp_client_secret'});
    }

    # query params
    if ( exists $args{'amazon_sp_refresh_token'}) {
        $query_params->{'amazon_sp_refresh_token'} = $self->{api_client}->to_query_value($args{'amazon_sp_refresh_token'});
    }

    # query params
    if ( exists $args{'amazon_sp_aws_region'}) {
        $query_params->{'amazon_sp_aws_region'} = $self->{api_client}->to_query_value($args{'amazon_sp_aws_region'});
    }

    # query params
    if ( exists $args{'amazon_sp_api_environment'}) {
        $query_params->{'amazon_sp_api_environment'} = $self->{api_client}->to_query_value($args{'amazon_sp_api_environment'});
    }

    # query params
    if ( exists $args{'amazon_seller_id'}) {
        $query_params->{'amazon_seller_id'} = $self->{api_client}->to_query_value($args{'amazon_seller_id'});
    }

    # query params
    if ( exists $args{'aspdotnetstorefront_api_user'}) {
        $query_params->{'aspdotnetstorefront_api_user'} = $self->{api_client}->to_query_value($args{'aspdotnetstorefront_api_user'});
    }

    # query params
    if ( exists $args{'aspdotnetstorefront_api_pass'}) {
        $query_params->{'aspdotnetstorefront_api_pass'} = $self->{api_client}->to_query_value($args{'aspdotnetstorefront_api_pass'});
    }

    # query params
    if ( exists $args{'bigcommerceapi_admin_account'}) {
        $query_params->{'bigcommerceapi_admin_account'} = $self->{api_client}->to_query_value($args{'bigcommerceapi_admin_account'});
    }

    # query params
    if ( exists $args{'bigcommerceapi_api_path'}) {
        $query_params->{'bigcommerceapi_api_path'} = $self->{api_client}->to_query_value($args{'bigcommerceapi_api_path'});
    }

    # query params
    if ( exists $args{'bigcommerceapi_api_key'}) {
        $query_params->{'bigcommerceapi_api_key'} = $self->{api_client}->to_query_value($args{'bigcommerceapi_api_key'});
    }

    # query params
    if ( exists $args{'bigcommerceapi_client_id'}) {
        $query_params->{'bigcommerceapi_client_id'} = $self->{api_client}->to_query_value($args{'bigcommerceapi_client_id'});
    }

    # query params
    if ( exists $args{'bigcommerceapi_access_token'}) {
        $query_params->{'bigcommerceapi_access_token'} = $self->{api_client}->to_query_value($args{'bigcommerceapi_access_token'});
    }

    # query params
    if ( exists $args{'bigcommerceapi_context'}) {
        $query_params->{'bigcommerceapi_context'} = $self->{api_client}->to_query_value($args{'bigcommerceapi_context'});
    }

    # query params
    if ( exists $args{'bol_api_key'}) {
        $query_params->{'bol_api_key'} = $self->{api_client}->to_query_value($args{'bol_api_key'});
    }

    # query params
    if ( exists $args{'bol_api_secret'}) {
        $query_params->{'bol_api_secret'} = $self->{api_client}->to_query_value($args{'bol_api_secret'});
    }

    # query params
    if ( exists $args{'bol_retailer_id'}) {
        $query_params->{'bol_retailer_id'} = $self->{api_client}->to_query_value($args{'bol_retailer_id'});
    }

    # query params
    if ( exists $args{'demandware_client_id'}) {
        $query_params->{'demandware_client_id'} = $self->{api_client}->to_query_value($args{'demandware_client_id'});
    }

    # query params
    if ( exists $args{'demandware_api_password'}) {
        $query_params->{'demandware_api_password'} = $self->{api_client}->to_query_value($args{'demandware_api_password'});
    }

    # query params
    if ( exists $args{'demandware_user_name'}) {
        $query_params->{'demandware_user_name'} = $self->{api_client}->to_query_value($args{'demandware_user_name'});
    }

    # query params
    if ( exists $args{'demandware_user_password'}) {
        $query_params->{'demandware_user_password'} = $self->{api_client}->to_query_value($args{'demandware_user_password'});
    }

    # query params
    if ( exists $args{'ebay_client_id'}) {
        $query_params->{'ebay_client_id'} = $self->{api_client}->to_query_value($args{'ebay_client_id'});
    }

    # query params
    if ( exists $args{'ebay_client_secret'}) {
        $query_params->{'ebay_client_secret'} = $self->{api_client}->to_query_value($args{'ebay_client_secret'});
    }

    # query params
    if ( exists $args{'ebay_runame'}) {
        $query_params->{'ebay_runame'} = $self->{api_client}->to_query_value($args{'ebay_runame'});
    }

    # query params
    if ( exists $args{'ebay_access_token'}) {
        $query_params->{'ebay_access_token'} = $self->{api_client}->to_query_value($args{'ebay_access_token'});
    }

    # query params
    if ( exists $args{'ebay_refresh_token'}) {
        $query_params->{'ebay_refresh_token'} = $self->{api_client}->to_query_value($args{'ebay_refresh_token'});
    }

    # query params
    if ( exists $args{'ebay_environment'}) {
        $query_params->{'ebay_environment'} = $self->{api_client}->to_query_value($args{'ebay_environment'});
    }

    # query params
    if ( exists $args{'ebay_site_id'}) {
        $query_params->{'ebay_site_id'} = $self->{api_client}->to_query_value($args{'ebay_site_id'});
    }

    # query params
    if ( exists $args{'ecwid_acess_token'}) {
        $query_params->{'ecwid_acess_token'} = $self->{api_client}->to_query_value($args{'ecwid_acess_token'});
    }

    # query params
    if ( exists $args{'ecwid_store_id'}) {
        $query_params->{'ecwid_store_id'} = $self->{api_client}->to_query_value($args{'ecwid_store_id'});
    }

    # query params
    if ( exists $args{'lazada_app_id'}) {
        $query_params->{'lazada_app_id'} = $self->{api_client}->to_query_value($args{'lazada_app_id'});
    }

    # query params
    if ( exists $args{'lazada_app_secret'}) {
        $query_params->{'lazada_app_secret'} = $self->{api_client}->to_query_value($args{'lazada_app_secret'});
    }

    # query params
    if ( exists $args{'lazada_refresh_token'}) {
        $query_params->{'lazada_refresh_token'} = $self->{api_client}->to_query_value($args{'lazada_refresh_token'});
    }

    # query params
    if ( exists $args{'lazada_region'}) {
        $query_params->{'lazada_region'} = $self->{api_client}->to_query_value($args{'lazada_region'});
    }

    # query params
    if ( exists $args{'etsy_keystring'}) {
        $query_params->{'etsy_keystring'} = $self->{api_client}->to_query_value($args{'etsy_keystring'});
    }

    # query params
    if ( exists $args{'etsy_shared_secret'}) {
        $query_params->{'etsy_shared_secret'} = $self->{api_client}->to_query_value($args{'etsy_shared_secret'});
    }

    # query params
    if ( exists $args{'etsy_access_token'}) {
        $query_params->{'etsy_access_token'} = $self->{api_client}->to_query_value($args{'etsy_access_token'});
    }

    # query params
    if ( exists $args{'etsy_token_secret'}) {
        $query_params->{'etsy_token_secret'} = $self->{api_client}->to_query_value($args{'etsy_token_secret'});
    }

    # query params
    if ( exists $args{'etsy_client_id'}) {
        $query_params->{'etsy_client_id'} = $self->{api_client}->to_query_value($args{'etsy_client_id'});
    }

    # query params
    if ( exists $args{'etsy_refresh_token'}) {
        $query_params->{'etsy_refresh_token'} = $self->{api_client}->to_query_value($args{'etsy_refresh_token'});
    }

    # query params
    if ( exists $args{'facebook_app_id'}) {
        $query_params->{'facebook_app_id'} = $self->{api_client}->to_query_value($args{'facebook_app_id'});
    }

    # query params
    if ( exists $args{'facebook_app_secret'}) {
        $query_params->{'facebook_app_secret'} = $self->{api_client}->to_query_value($args{'facebook_app_secret'});
    }

    # query params
    if ( exists $args{'facebook_access_token'}) {
        $query_params->{'facebook_access_token'} = $self->{api_client}->to_query_value($args{'facebook_access_token'});
    }

    # query params
    if ( exists $args{'facebook_business_id'}) {
        $query_params->{'facebook_business_id'} = $self->{api_client}->to_query_value($args{'facebook_business_id'});
    }

    # query params
    if ( exists $args{'neto_api_key'}) {
        $query_params->{'neto_api_key'} = $self->{api_client}->to_query_value($args{'neto_api_key'});
    }

    # query params
    if ( exists $args{'neto_api_username'}) {
        $query_params->{'neto_api_username'} = $self->{api_client}->to_query_value($args{'neto_api_username'});
    }

    # query params
    if ( exists $args{'shopline_access_token'}) {
        $query_params->{'shopline_access_token'} = $self->{api_client}->to_query_value($args{'shopline_access_token'});
    }

    # query params
    if ( exists $args{'shopline_app_key'}) {
        $query_params->{'shopline_app_key'} = $self->{api_client}->to_query_value($args{'shopline_app_key'});
    }

    # query params
    if ( exists $args{'shopline_app_secret'}) {
        $query_params->{'shopline_app_secret'} = $self->{api_client}->to_query_value($args{'shopline_app_secret'});
    }

    # query params
    if ( exists $args{'shopline_shared_secret'}) {
        $query_params->{'shopline_shared_secret'} = $self->{api_client}->to_query_value($args{'shopline_shared_secret'});
    }

    # query params
    if ( exists $args{'shopify_access_token'}) {
        $query_params->{'shopify_access_token'} = $self->{api_client}->to_query_value($args{'shopify_access_token'});
    }

    # query params
    if ( exists $args{'shopify_api_key'}) {
        $query_params->{'shopify_api_key'} = $self->{api_client}->to_query_value($args{'shopify_api_key'});
    }

    # query params
    if ( exists $args{'shopify_api_password'}) {
        $query_params->{'shopify_api_password'} = $self->{api_client}->to_query_value($args{'shopify_api_password'});
    }

    # query params
    if ( exists $args{'shopify_shared_secret'}) {
        $query_params->{'shopify_shared_secret'} = $self->{api_client}->to_query_value($args{'shopify_shared_secret'});
    }

    # query params
    if ( exists $args{'shopee_partner_id'}) {
        $query_params->{'shopee_partner_id'} = $self->{api_client}->to_query_value($args{'shopee_partner_id'});
    }

    # query params
    if ( exists $args{'shopee_partner_key'}) {
        $query_params->{'shopee_partner_key'} = $self->{api_client}->to_query_value($args{'shopee_partner_key'});
    }

    # query params
    if ( exists $args{'shopee_shop_id'}) {
        $query_params->{'shopee_shop_id'} = $self->{api_client}->to_query_value($args{'shopee_shop_id'});
    }

    # query params
    if ( exists $args{'shopee_refresh_token'}) {
        $query_params->{'shopee_refresh_token'} = $self->{api_client}->to_query_value($args{'shopee_refresh_token'});
    }

    # query params
    if ( exists $args{'shopee_region'}) {
        $query_params->{'shopee_region'} = $self->{api_client}->to_query_value($args{'shopee_region'});
    }

    # query params
    if ( exists $args{'shopee_environment'}) {
        $query_params->{'shopee_environment'} = $self->{api_client}->to_query_value($args{'shopee_environment'});
    }

    # query params
    if ( exists $args{'shoplazza_access_token'}) {
        $query_params->{'shoplazza_access_token'} = $self->{api_client}->to_query_value($args{'shoplazza_access_token'});
    }

    # query params
    if ( exists $args{'shoplazza_shared_secret'}) {
        $query_params->{'shoplazza_shared_secret'} = $self->{api_client}->to_query_value($args{'shoplazza_shared_secret'});
    }

    # query params
    if ( exists $args{'miva_access_token'}) {
        $query_params->{'miva_access_token'} = $self->{api_client}->to_query_value($args{'miva_access_token'});
    }

    # query params
    if ( exists $args{'miva_signature'}) {
        $query_params->{'miva_signature'} = $self->{api_client}->to_query_value($args{'miva_signature'});
    }

    # query params
    if ( exists $args{'shopware_access_key'}) {
        $query_params->{'shopware_access_key'} = $self->{api_client}->to_query_value($args{'shopware_access_key'});
    }

    # query params
    if ( exists $args{'unas_api_key'}) {
        $query_params->{'unas_api_key'} = $self->{api_client}->to_query_value($args{'unas_api_key'});
    }

    # query params
    if ( exists $args{'shopware_api_key'}) {
        $query_params->{'shopware_api_key'} = $self->{api_client}->to_query_value($args{'shopware_api_key'});
    }

    # query params
    if ( exists $args{'shopware_api_secret'}) {
        $query_params->{'shopware_api_secret'} = $self->{api_client}->to_query_value($args{'shopware_api_secret'});
    }

    # query params
    if ( exists $args{'bigcartel_user_name'}) {
        $query_params->{'bigcartel_user_name'} = $self->{api_client}->to_query_value($args{'bigcartel_user_name'});
    }

    # query params
    if ( exists $args{'bigcartel_password'}) {
        $query_params->{'bigcartel_password'} = $self->{api_client}->to_query_value($args{'bigcartel_password'});
    }

    # query params
    if ( exists $args{'bricklink_consumer_key'}) {
        $query_params->{'bricklink_consumer_key'} = $self->{api_client}->to_query_value($args{'bricklink_consumer_key'});
    }

    # query params
    if ( exists $args{'bricklink_consumer_secret'}) {
        $query_params->{'bricklink_consumer_secret'} = $self->{api_client}->to_query_value($args{'bricklink_consumer_secret'});
    }

    # query params
    if ( exists $args{'bricklink_token'}) {
        $query_params->{'bricklink_token'} = $self->{api_client}->to_query_value($args{'bricklink_token'});
    }

    # query params
    if ( exists $args{'bricklink_token_secret'}) {
        $query_params->{'bricklink_token_secret'} = $self->{api_client}->to_query_value($args{'bricklink_token_secret'});
    }

    # query params
    if ( exists $args{'volusion_login'}) {
        $query_params->{'volusion_login'} = $self->{api_client}->to_query_value($args{'volusion_login'});
    }

    # query params
    if ( exists $args{'volusion_password'}) {
        $query_params->{'volusion_password'} = $self->{api_client}->to_query_value($args{'volusion_password'});
    }

    # query params
    if ( exists $args{'walmart_client_id'}) {
        $query_params->{'walmart_client_id'} = $self->{api_client}->to_query_value($args{'walmart_client_id'});
    }

    # query params
    if ( exists $args{'walmart_client_secret'}) {
        $query_params->{'walmart_client_secret'} = $self->{api_client}->to_query_value($args{'walmart_client_secret'});
    }

    # query params
    if ( exists $args{'walmart_environment'}) {
        $query_params->{'walmart_environment'} = $self->{api_client}->to_query_value($args{'walmart_environment'});
    }

    # query params
    if ( exists $args{'walmart_channel_type'}) {
        $query_params->{'walmart_channel_type'} = $self->{api_client}->to_query_value($args{'walmart_channel_type'});
    }

    # query params
    if ( exists $args{'walmart_region'}) {
        $query_params->{'walmart_region'} = $self->{api_client}->to_query_value($args{'walmart_region'});
    }

    # query params
    if ( exists $args{'square_client_id'}) {
        $query_params->{'square_client_id'} = $self->{api_client}->to_query_value($args{'square_client_id'});
    }

    # query params
    if ( exists $args{'square_client_secret'}) {
        $query_params->{'square_client_secret'} = $self->{api_client}->to_query_value($args{'square_client_secret'});
    }

    # query params
    if ( exists $args{'square_refresh_token'}) {
        $query_params->{'square_refresh_token'} = $self->{api_client}->to_query_value($args{'square_refresh_token'});
    }

    # query params
    if ( exists $args{'squarespace_api_key'}) {
        $query_params->{'squarespace_api_key'} = $self->{api_client}->to_query_value($args{'squarespace_api_key'});
    }

    # query params
    if ( exists $args{'squarespace_client_id'}) {
        $query_params->{'squarespace_client_id'} = $self->{api_client}->to_query_value($args{'squarespace_client_id'});
    }

    # query params
    if ( exists $args{'squarespace_client_secret'}) {
        $query_params->{'squarespace_client_secret'} = $self->{api_client}->to_query_value($args{'squarespace_client_secret'});
    }

    # query params
    if ( exists $args{'squarespace_access_token'}) {
        $query_params->{'squarespace_access_token'} = $self->{api_client}->to_query_value($args{'squarespace_access_token'});
    }

    # query params
    if ( exists $args{'squarespace_refresh_token'}) {
        $query_params->{'squarespace_refresh_token'} = $self->{api_client}->to_query_value($args{'squarespace_refresh_token'});
    }

    # query params
    if ( exists $args{'hybris_client_id'}) {
        $query_params->{'hybris_client_id'} = $self->{api_client}->to_query_value($args{'hybris_client_id'});
    }

    # query params
    if ( exists $args{'hybris_client_secret'}) {
        $query_params->{'hybris_client_secret'} = $self->{api_client}->to_query_value($args{'hybris_client_secret'});
    }

    # query params
    if ( exists $args{'hybris_username'}) {
        $query_params->{'hybris_username'} = $self->{api_client}->to_query_value($args{'hybris_username'});
    }

    # query params
    if ( exists $args{'hybris_password'}) {
        $query_params->{'hybris_password'} = $self->{api_client}->to_query_value($args{'hybris_password'});
    }

    # query params
    if ( exists $args{'hybris_websites'}) {
        $query_params->{'hybris_websites'} = $self->{api_client}->to_query_value($args{'hybris_websites'});
    }

    # query params
    if ( exists $args{'lightspeed_api_key'}) {
        $query_params->{'lightspeed_api_key'} = $self->{api_client}->to_query_value($args{'lightspeed_api_key'});
    }

    # query params
    if ( exists $args{'lightspeed_api_secret'}) {
        $query_params->{'lightspeed_api_secret'} = $self->{api_client}->to_query_value($args{'lightspeed_api_secret'});
    }

    # query params
    if ( exists $args{'commercehq_api_key'}) {
        $query_params->{'commercehq_api_key'} = $self->{api_client}->to_query_value($args{'commercehq_api_key'});
    }

    # query params
    if ( exists $args{'commercehq_api_password'}) {
        $query_params->{'commercehq_api_password'} = $self->{api_client}->to_query_value($args{'commercehq_api_password'});
    }

    # query params
    if ( exists $args{'wc_consumer_key'}) {
        $query_params->{'wc_consumer_key'} = $self->{api_client}->to_query_value($args{'wc_consumer_key'});
    }

    # query params
    if ( exists $args{'wc_consumer_secret'}) {
        $query_params->{'wc_consumer_secret'} = $self->{api_client}->to_query_value($args{'wc_consumer_secret'});
    }

    # query params
    if ( exists $args{'magento_consumer_key'}) {
        $query_params->{'magento_consumer_key'} = $self->{api_client}->to_query_value($args{'magento_consumer_key'});
    }

    # query params
    if ( exists $args{'magento_consumer_secret'}) {
        $query_params->{'magento_consumer_secret'} = $self->{api_client}->to_query_value($args{'magento_consumer_secret'});
    }

    # query params
    if ( exists $args{'magento_access_token'}) {
        $query_params->{'magento_access_token'} = $self->{api_client}->to_query_value($args{'magento_access_token'});
    }

    # query params
    if ( exists $args{'magento_token_secret'}) {
        $query_params->{'magento_token_secret'} = $self->{api_client}->to_query_value($args{'magento_token_secret'});
    }

    # query params
    if ( exists $args{'prestashop_webservice_key'}) {
        $query_params->{'prestashop_webservice_key'} = $self->{api_client}->to_query_value($args{'prestashop_webservice_key'});
    }

    # query params
    if ( exists $args{'wix_app_id'}) {
        $query_params->{'wix_app_id'} = $self->{api_client}->to_query_value($args{'wix_app_id'});
    }

    # query params
    if ( exists $args{'wix_app_secret_key'}) {
        $query_params->{'wix_app_secret_key'} = $self->{api_client}->to_query_value($args{'wix_app_secret_key'});
    }

    # query params
    if ( exists $args{'wix_instance_id'}) {
        $query_params->{'wix_instance_id'} = $self->{api_client}->to_query_value($args{'wix_instance_id'});
    }

    # query params
    if ( exists $args{'wix_refresh_token'}) {
        $query_params->{'wix_refresh_token'} = $self->{api_client}->to_query_value($args{'wix_refresh_token'});
    }

    # query params
    if ( exists $args{'mercado_libre_app_id'}) {
        $query_params->{'mercado_libre_app_id'} = $self->{api_client}->to_query_value($args{'mercado_libre_app_id'});
    }

    # query params
    if ( exists $args{'mercado_libre_app_secret_key'}) {
        $query_params->{'mercado_libre_app_secret_key'} = $self->{api_client}->to_query_value($args{'mercado_libre_app_secret_key'});
    }

    # query params
    if ( exists $args{'mercado_libre_refresh_token'}) {
        $query_params->{'mercado_libre_refresh_token'} = $self->{api_client}->to_query_value($args{'mercado_libre_refresh_token'});
    }

    # query params
    if ( exists $args{'zid_client_id'}) {
        $query_params->{'zid_client_id'} = $self->{api_client}->to_query_value($args{'zid_client_id'});
    }

    # query params
    if ( exists $args{'zid_client_secret'}) {
        $query_params->{'zid_client_secret'} = $self->{api_client}->to_query_value($args{'zid_client_secret'});
    }

    # query params
    if ( exists $args{'zid_access_token'}) {
        $query_params->{'zid_access_token'} = $self->{api_client}->to_query_value($args{'zid_access_token'});
    }

    # query params
    if ( exists $args{'zid_authorization'}) {
        $query_params->{'zid_authorization'} = $self->{api_client}->to_query_value($args{'zid_authorization'});
    }

    # query params
    if ( exists $args{'zid_refresh_token'}) {
        $query_params->{'zid_refresh_token'} = $self->{api_client}->to_query_value($args{'zid_refresh_token'});
    }

    # query params
    if ( exists $args{'flipkart_client_id'}) {
        $query_params->{'flipkart_client_id'} = $self->{api_client}->to_query_value($args{'flipkart_client_id'});
    }

    # query params
    if ( exists $args{'flipkart_client_secret'}) {
        $query_params->{'flipkart_client_secret'} = $self->{api_client}->to_query_value($args{'flipkart_client_secret'});
    }

    # query params
    if ( exists $args{'allegro_client_id'}) {
        $query_params->{'allegro_client_id'} = $self->{api_client}->to_query_value($args{'allegro_client_id'});
    }

    # query params
    if ( exists $args{'allegro_client_secret'}) {
        $query_params->{'allegro_client_secret'} = $self->{api_client}->to_query_value($args{'allegro_client_secret'});
    }

    # query params
    if ( exists $args{'allegro_access_token'}) {
        $query_params->{'allegro_access_token'} = $self->{api_client}->to_query_value($args{'allegro_access_token'});
    }

    # query params
    if ( exists $args{'allegro_refresh_token'}) {
        $query_params->{'allegro_refresh_token'} = $self->{api_client}->to_query_value($args{'allegro_refresh_token'});
    }

    # query params
    if ( exists $args{'allegro_environment'}) {
        $query_params->{'allegro_environment'} = $self->{api_client}->to_query_value($args{'allegro_environment'});
    }

    # query params
    if ( exists $args{'zoho_client_id'}) {
        $query_params->{'zoho_client_id'} = $self->{api_client}->to_query_value($args{'zoho_client_id'});
    }

    # query params
    if ( exists $args{'zoho_client_secret'}) {
        $query_params->{'zoho_client_secret'} = $self->{api_client}->to_query_value($args{'zoho_client_secret'});
    }

    # query params
    if ( exists $args{'zoho_refresh_token'}) {
        $query_params->{'zoho_refresh_token'} = $self->{api_client}->to_query_value($args{'zoho_refresh_token'});
    }

    # query params
    if ( exists $args{'zoho_region'}) {
        $query_params->{'zoho_region'} = $self->{api_client}->to_query_value($args{'zoho_region'});
    }

    # query params
    if ( exists $args{'tiendanube_user_id'}) {
        $query_params->{'tiendanube_user_id'} = $self->{api_client}->to_query_value($args{'tiendanube_user_id'});
    }

    # query params
    if ( exists $args{'tiendanube_access_token'}) {
        $query_params->{'tiendanube_access_token'} = $self->{api_client}->to_query_value($args{'tiendanube_access_token'});
    }

    # query params
    if ( exists $args{'tiendanube_client_secret'}) {
        $query_params->{'tiendanube_client_secret'} = $self->{api_client}->to_query_value($args{'tiendanube_client_secret'});
    }

    # query params
    if ( exists $args{'otto_client_id'}) {
        $query_params->{'otto_client_id'} = $self->{api_client}->to_query_value($args{'otto_client_id'});
    }

    # query params
    if ( exists $args{'otto_client_secret'}) {
        $query_params->{'otto_client_secret'} = $self->{api_client}->to_query_value($args{'otto_client_secret'});
    }

    # query params
    if ( exists $args{'otto_app_id'}) {
        $query_params->{'otto_app_id'} = $self->{api_client}->to_query_value($args{'otto_app_id'});
    }

    # query params
    if ( exists $args{'otto_refresh_token'}) {
        $query_params->{'otto_refresh_token'} = $self->{api_client}->to_query_value($args{'otto_refresh_token'});
    }

    # query params
    if ( exists $args{'otto_environment'}) {
        $query_params->{'otto_environment'} = $self->{api_client}->to_query_value($args{'otto_environment'});
    }

    # query params
    if ( exists $args{'otto_access_token'}) {
        $query_params->{'otto_access_token'} = $self->{api_client}->to_query_value($args{'otto_access_token'});
    }

    # query params
    if ( exists $args{'tiktokshop_app_key'}) {
        $query_params->{'tiktokshop_app_key'} = $self->{api_client}->to_query_value($args{'tiktokshop_app_key'});
    }

    # query params
    if ( exists $args{'tiktokshop_app_secret'}) {
        $query_params->{'tiktokshop_app_secret'} = $self->{api_client}->to_query_value($args{'tiktokshop_app_secret'});
    }

    # query params
    if ( exists $args{'tiktokshop_refresh_token'}) {
        $query_params->{'tiktokshop_refresh_token'} = $self->{api_client}->to_query_value($args{'tiktokshop_refresh_token'});
    }

    # query params
    if ( exists $args{'tiktokshop_access_token'}) {
        $query_params->{'tiktokshop_access_token'} = $self->{api_client}->to_query_value($args{'tiktokshop_access_token'});
    }

    # query params
    if ( exists $args{'salla_client_id'}) {
        $query_params->{'salla_client_id'} = $self->{api_client}->to_query_value($args{'salla_client_id'});
    }

    # query params
    if ( exists $args{'salla_client_secret'}) {
        $query_params->{'salla_client_secret'} = $self->{api_client}->to_query_value($args{'salla_client_secret'});
    }

    # query params
    if ( exists $args{'salla_refresh_token'}) {
        $query_params->{'salla_refresh_token'} = $self->{api_client}->to_query_value($args{'salla_refresh_token'});
    }

    # query params
    if ( exists $args{'salla_access_token'}) {
        $query_params->{'salla_access_token'} = $self->{api_client}->to_query_value($args{'salla_access_token'});
    }

    # query params
    if ( exists $args{'temu_app_key'}) {
        $query_params->{'temu_app_key'} = $self->{api_client}->to_query_value($args{'temu_app_key'});
    }

    # query params
    if ( exists $args{'temu_app_secret'}) {
        $query_params->{'temu_app_secret'} = $self->{api_client}->to_query_value($args{'temu_app_secret'});
    }

    # query params
    if ( exists $args{'temu_access_token'}) {
        $query_params->{'temu_access_token'} = $self->{api_client}->to_query_value($args{'temu_access_token'});
    }

    # query params
    if ( exists $args{'temu_region'}) {
        $query_params->{'temu_region'} = $self->{api_client}->to_query_value($args{'temu_region'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AccountConfigUpdate200Response', $response);
    return $_response_object;
}

#
# account_failed_webhooks
#
# account.failed_webhooks
#
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $ids List of сomma-separated webhook ids (optional)
{
    my $params = {
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'List of сomma-separated webhook ids',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'account_failed_webhooks' } = {
        summary => 'account.failed_webhooks',
        params => $params,
        returns => 'AccountFailedWebhooks200Response',
        };
}
# @return AccountFailedWebhooks200Response
#
sub account_failed_webhooks {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/account.failed_webhooks.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AccountFailedWebhooks200Response', $response);
    return $_response_object;
}

#
# account_supported_platforms
#
# account.supported_platforms
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'account_supported_platforms' } = {
        summary => 'account.supported_platforms',
        params => $params,
        returns => 'AccountSupportedPlatforms200Response',
        };
}
# @return AccountSupportedPlatforms200Response
#
sub account_supported_platforms {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/account.supported_platforms.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AccountSupportedPlatforms200Response', $response);
    return $_response_object;
}

1;
