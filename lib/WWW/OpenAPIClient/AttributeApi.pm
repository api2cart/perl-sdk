=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::AttributeApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# attribute_add
#
# attribute.add
#
# @param string $type Defines attribute&#39;s type (required)
# @param string $name Defines attributes&#39;s name (required)
# @param string $code Entity code (optional)
# @param string $store_id Store Id (optional)
# @param string $lang_id Language id (optional)
# @param boolean $visible Set visibility status (optional, default to false)
# @param boolean $required Defines if the option is required (optional, default to false)
# @param int $position Attribute&#x60;s position (optional, default to 0)
# @param string $attribute_group_id Filter by attribute_group_id (optional)
# @param string $is_global Attribute saving scope (optional, default to 'Store')
# @param boolean $is_searchable Use attribute in Quick Search (optional, default to false)
# @param string $is_filterable Use In Layered Navigation (optional, default to 'No')
# @param boolean $is_comparable Comparable on Front-end (optional, default to false)
# @param boolean $is_html_allowed_on_front Allow HTML Tags on Frontend (optional, default to false)
# @param boolean $is_filterable_in_search Use In Search Results Layered Navigation (optional, default to false)
# @param boolean $is_configurable Use To Create Configurable Product (optional, default to false)
# @param boolean $is_visible_in_advanced_search Use in Advanced Search (optional, default to false)
# @param boolean $is_used_for_promo_rules Use for Promo Rule Conditions (optional, default to false)
# @param boolean $used_in_product_listing Used in Product Listing (optional, default to false)
# @param boolean $used_for_sort_by Used for Sorting in Product Listing (optional, default to false)
# @param string $apply_to Types of products which can have this attribute (optional, default to 'all_types')
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => 'Defines attribute&#39;s type',
        required => '1',
    },
    'name' => {
        data_type => 'string',
        description => 'Defines attributes&#39;s name',
        required => '1',
    },
    'code' => {
        data_type => 'string',
        description => 'Entity code',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    'visible' => {
        data_type => 'boolean',
        description => 'Set visibility status',
        required => '0',
    },
    'required' => {
        data_type => 'boolean',
        description => 'Defines if the option is required',
        required => '0',
    },
    'position' => {
        data_type => 'int',
        description => 'Attribute&#x60;s position',
        required => '0',
    },
    'attribute_group_id' => {
        data_type => 'string',
        description => 'Filter by attribute_group_id',
        required => '0',
    },
    'is_global' => {
        data_type => 'string',
        description => 'Attribute saving scope',
        required => '0',
    },
    'is_searchable' => {
        data_type => 'boolean',
        description => 'Use attribute in Quick Search',
        required => '0',
    },
    'is_filterable' => {
        data_type => 'string',
        description => 'Use In Layered Navigation',
        required => '0',
    },
    'is_comparable' => {
        data_type => 'boolean',
        description => 'Comparable on Front-end',
        required => '0',
    },
    'is_html_allowed_on_front' => {
        data_type => 'boolean',
        description => 'Allow HTML Tags on Frontend',
        required => '0',
    },
    'is_filterable_in_search' => {
        data_type => 'boolean',
        description => 'Use In Search Results Layered Navigation',
        required => '0',
    },
    'is_configurable' => {
        data_type => 'boolean',
        description => 'Use To Create Configurable Product',
        required => '0',
    },
    'is_visible_in_advanced_search' => {
        data_type => 'boolean',
        description => 'Use in Advanced Search',
        required => '0',
    },
    'is_used_for_promo_rules' => {
        data_type => 'boolean',
        description => 'Use for Promo Rule Conditions',
        required => '0',
    },
    'used_in_product_listing' => {
        data_type => 'boolean',
        description => 'Used in Product Listing',
        required => '0',
    },
    'used_for_sort_by' => {
        data_type => 'boolean',
        description => 'Used for Sorting in Product Listing',
        required => '0',
    },
    'apply_to' => {
        data_type => 'string',
        description => 'Types of products which can have this attribute',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_add' } = {
        summary => 'attribute.add',
        params => $params,
        returns => 'AttributeAdd200Response',
        };
}
# @return AttributeAdd200Response
#
sub attribute_add {
    my ($self, %args) = @_;

    # verify the required parameter 'type' is set
    unless (exists $args{'type'}) {
      croak("Missing the required parameter 'type' when calling attribute_add");
    }

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling attribute_add");
    }

    # parse inputs
    my $_resource_path = '/attribute.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'code'}) {
        $query_params->{'code'} = $self->{api_client}->to_query_value($args{'code'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    # query params
    if ( exists $args{'visible'}) {
        $query_params->{'visible'} = $self->{api_client}->to_query_value($args{'visible'});
    }

    # query params
    if ( exists $args{'required'}) {
        $query_params->{'required'} = $self->{api_client}->to_query_value($args{'required'});
    }

    # query params
    if ( exists $args{'position'}) {
        $query_params->{'position'} = $self->{api_client}->to_query_value($args{'position'});
    }

    # query params
    if ( exists $args{'attribute_group_id'}) {
        $query_params->{'attribute_group_id'} = $self->{api_client}->to_query_value($args{'attribute_group_id'});
    }

    # query params
    if ( exists $args{'is_global'}) {
        $query_params->{'is_global'} = $self->{api_client}->to_query_value($args{'is_global'});
    }

    # query params
    if ( exists $args{'is_searchable'}) {
        $query_params->{'is_searchable'} = $self->{api_client}->to_query_value($args{'is_searchable'});
    }

    # query params
    if ( exists $args{'is_filterable'}) {
        $query_params->{'is_filterable'} = $self->{api_client}->to_query_value($args{'is_filterable'});
    }

    # query params
    if ( exists $args{'is_comparable'}) {
        $query_params->{'is_comparable'} = $self->{api_client}->to_query_value($args{'is_comparable'});
    }

    # query params
    if ( exists $args{'is_html_allowed_on_front'}) {
        $query_params->{'is_html_allowed_on_front'} = $self->{api_client}->to_query_value($args{'is_html_allowed_on_front'});
    }

    # query params
    if ( exists $args{'is_filterable_in_search'}) {
        $query_params->{'is_filterable_in_search'} = $self->{api_client}->to_query_value($args{'is_filterable_in_search'});
    }

    # query params
    if ( exists $args{'is_configurable'}) {
        $query_params->{'is_configurable'} = $self->{api_client}->to_query_value($args{'is_configurable'});
    }

    # query params
    if ( exists $args{'is_visible_in_advanced_search'}) {
        $query_params->{'is_visible_in_advanced_search'} = $self->{api_client}->to_query_value($args{'is_visible_in_advanced_search'});
    }

    # query params
    if ( exists $args{'is_used_for_promo_rules'}) {
        $query_params->{'is_used_for_promo_rules'} = $self->{api_client}->to_query_value($args{'is_used_for_promo_rules'});
    }

    # query params
    if ( exists $args{'used_in_product_listing'}) {
        $query_params->{'used_in_product_listing'} = $self->{api_client}->to_query_value($args{'used_in_product_listing'});
    }

    # query params
    if ( exists $args{'used_for_sort_by'}) {
        $query_params->{'used_for_sort_by'} = $self->{api_client}->to_query_value($args{'used_for_sort_by'});
    }

    # query params
    if ( exists $args{'apply_to'}) {
        $query_params->{'apply_to'} = $self->{api_client}->to_query_value($args{'apply_to'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeAdd200Response', $response);
    return $_response_object;
}

#
# attribute_assign_group
#
# attribute.assign.group
#
# @param string $id Entity id (required)
# @param string $group_id Attribute group_id (required)
# @param string $attribute_set_id Attribute set id (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Attribute group_id',
        required => '1',
    },
    'attribute_set_id' => {
        data_type => 'string',
        description => 'Attribute set id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_assign_group' } = {
        summary => 'attribute.assign.group',
        params => $params,
        returns => 'AttributeAssignGroup200Response',
        };
}
# @return AttributeAssignGroup200Response
#
sub attribute_assign_group {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attribute_assign_group");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling attribute_assign_group");
    }

    # parse inputs
    my $_resource_path = '/attribute.assign.group.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'group_id'}) {
        $query_params->{'group_id'} = $self->{api_client}->to_query_value($args{'group_id'});
    }

    # query params
    if ( exists $args{'attribute_set_id'}) {
        $query_params->{'attribute_set_id'} = $self->{api_client}->to_query_value($args{'attribute_set_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeAssignGroup200Response', $response);
    return $_response_object;
}

#
# attribute_assign_set
#
# attribute.assign.set
#
# @param string $id Entity id (required)
# @param string $attribute_set_id Attribute set id (required)
# @param string $group_id Attribute group_id (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'attribute_set_id' => {
        data_type => 'string',
        description => 'Attribute set id',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Attribute group_id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_assign_set' } = {
        summary => 'attribute.assign.set',
        params => $params,
        returns => 'AttributeAssignGroup200Response',
        };
}
# @return AttributeAssignGroup200Response
#
sub attribute_assign_set {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attribute_assign_set");
    }

    # verify the required parameter 'attribute_set_id' is set
    unless (exists $args{'attribute_set_id'}) {
      croak("Missing the required parameter 'attribute_set_id' when calling attribute_assign_set");
    }

    # parse inputs
    my $_resource_path = '/attribute.assign.set.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'group_id'}) {
        $query_params->{'group_id'} = $self->{api_client}->to_query_value($args{'group_id'});
    }

    # query params
    if ( exists $args{'attribute_set_id'}) {
        $query_params->{'attribute_set_id'} = $self->{api_client}->to_query_value($args{'attribute_set_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeAssignGroup200Response', $response);
    return $_response_object;
}

#
# attribute_attributeset_list
#
# attribute.attributeset.list
#
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,name')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_attributeset_list' } = {
        summary => 'attribute.attributeset.list',
        params => $params,
        returns => 'ModelResponseAttributeAttributesetList',
        };
}
# @return ModelResponseAttributeAttributesetList
#
sub attribute_attributeset_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attribute.attributeset.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseAttributeAttributesetList', $response);
    return $_response_object;
}

#
# attribute_count
#
# attribute.count
#
# @param string $type Defines attribute&#39;s type (optional)
# @param string $attribute_set_id Filter items by attribute set id (optional)
# @param string $store_id Store Id (optional)
# @param string $lang_id Language id (optional)
# @param boolean $visible Filter items by visibility status (optional)
# @param boolean $required Defines if the option is required (optional)
# @param boolean $system True if attribute is system (optional)
{
    my $params = {
    'type' => {
        data_type => 'string',
        description => 'Defines attribute&#39;s type',
        required => '0',
    },
    'attribute_set_id' => {
        data_type => 'string',
        description => 'Filter items by attribute set id',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    'visible' => {
        data_type => 'boolean',
        description => 'Filter items by visibility status',
        required => '0',
    },
    'required' => {
        data_type => 'boolean',
        description => 'Defines if the option is required',
        required => '0',
    },
    'system' => {
        data_type => 'boolean',
        description => 'True if attribute is system',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_count' } = {
        summary => 'attribute.count',
        params => $params,
        returns => 'AttributeCount200Response',
        };
}
# @return AttributeCount200Response
#
sub attribute_count {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attribute.count.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'attribute_set_id'}) {
        $query_params->{'attribute_set_id'} = $self->{api_client}->to_query_value($args{'attribute_set_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    # query params
    if ( exists $args{'visible'}) {
        $query_params->{'visible'} = $self->{api_client}->to_query_value($args{'visible'});
    }

    # query params
    if ( exists $args{'required'}) {
        $query_params->{'required'} = $self->{api_client}->to_query_value($args{'required'});
    }

    # query params
    if ( exists $args{'system'}) {
        $query_params->{'system'} = $self->{api_client}->to_query_value($args{'system'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeCount200Response', $response);
    return $_response_object;
}

#
# attribute_delete
#
# attribute.delete
#
# @param string $id Entity id (required)
# @param string $store_id Store Id (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_delete' } = {
        summary => 'attribute.delete',
        params => $params,
        returns => 'AttributeDelete200Response',
        };
}
# @return AttributeDelete200Response
#
sub attribute_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attribute_delete");
    }

    # parse inputs
    my $_resource_path = '/attribute.delete.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeDelete200Response', $response);
    return $_response_object;
}

#
# attribute_group_list
#
# attribute.group.list
#
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $attribute_set_id Attribute set id (optional)
# @param string $lang_id Language id (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,name')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'attribute_set_id' => {
        data_type => 'string',
        description => 'Attribute set id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_group_list' } = {
        summary => 'attribute.group.list',
        params => $params,
        returns => 'ModelResponseAttributeGroupList',
        };
}
# @return ModelResponseAttributeGroupList
#
sub attribute_group_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attribute.group.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'attribute_set_id'}) {
        $query_params->{'attribute_set_id'} = $self->{api_client}->to_query_value($args{'attribute_set_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseAttributeGroupList', $response);
    return $_response_object;
}

#
# attribute_info
#
# attribute.info
#
# @param string $id Entity id (required)
# @param string $attribute_set_id Attribute set id (optional)
# @param string $store_id Store Id (optional)
# @param string $lang_id Language id (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'force_all')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'attribute_set_id' => {
        data_type => 'string',
        description => 'Attribute set id',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_info' } = {
        summary => 'attribute.info',
        params => $params,
        returns => 'AttributeInfo200Response',
        };
}
# @return AttributeInfo200Response
#
sub attribute_info {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attribute_info");
    }

    # parse inputs
    my $_resource_path = '/attribute.info.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'attribute_set_id'}) {
        $query_params->{'attribute_set_id'} = $self->{api_client}->to_query_value($args{'attribute_set_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeInfo200Response', $response);
    return $_response_object;
}

#
# attribute_list
#
# attribute.list
#
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $attribute_ids Filter attributes by ids (optional)
# @param string $attribute_set_id Filter items by attribute set id (optional)
# @param string $store_id Store Id (optional)
# @param string $lang_id Retrieves attributes on specified language id (optional)
# @param string $type Defines attribute&#39;s type (optional)
# @param boolean $visible Filter items by visibility status (optional)
# @param boolean $required Defines if the option is required (optional)
# @param boolean $system True if attribute is system (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,name,code,type')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'attribute_ids' => {
        data_type => 'string',
        description => 'Filter attributes by ids',
        required => '0',
    },
    'attribute_set_id' => {
        data_type => 'string',
        description => 'Filter items by attribute set id',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Retrieves attributes on specified language id',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Defines attribute&#39;s type',
        required => '0',
    },
    'visible' => {
        data_type => 'boolean',
        description => 'Filter items by visibility status',
        required => '0',
    },
    'required' => {
        data_type => 'boolean',
        description => 'Defines if the option is required',
        required => '0',
    },
    'system' => {
        data_type => 'boolean',
        description => 'True if attribute is system',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_list' } = {
        summary => 'attribute.list',
        params => $params,
        returns => 'ModelResponseAttributeList',
        };
}
# @return ModelResponseAttributeList
#
sub attribute_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attribute.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'attribute_ids'}) {
        $query_params->{'attribute_ids'} = $self->{api_client}->to_query_value($args{'attribute_ids'});
    }

    # query params
    if ( exists $args{'attribute_set_id'}) {
        $query_params->{'attribute_set_id'} = $self->{api_client}->to_query_value($args{'attribute_set_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'visible'}) {
        $query_params->{'visible'} = $self->{api_client}->to_query_value($args{'visible'});
    }

    # query params
    if ( exists $args{'required'}) {
        $query_params->{'required'} = $self->{api_client}->to_query_value($args{'required'});
    }

    # query params
    if ( exists $args{'system'}) {
        $query_params->{'system'} = $self->{api_client}->to_query_value($args{'system'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseAttributeList', $response);
    return $_response_object;
}

#
# attribute_type_list
#
# attribute.type.list
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'attribute_type_list' } = {
        summary => 'attribute.type.list',
        params => $params,
        returns => 'AttributeTypeList200Response',
        };
}
# @return AttributeTypeList200Response
#
sub attribute_type_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/attribute.type.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeTypeList200Response', $response);
    return $_response_object;
}

#
# attribute_unassign_group
#
# attribute.unassign.group
#
# @param string $id Entity id (required)
# @param string $group_id Customer group_id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Customer group_id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_unassign_group' } = {
        summary => 'attribute.unassign.group',
        params => $params,
        returns => 'AttributeUnassignGroup200Response',
        };
}
# @return AttributeUnassignGroup200Response
#
sub attribute_unassign_group {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attribute_unassign_group");
    }

    # verify the required parameter 'group_id' is set
    unless (exists $args{'group_id'}) {
      croak("Missing the required parameter 'group_id' when calling attribute_unassign_group");
    }

    # parse inputs
    my $_resource_path = '/attribute.unassign.group.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'group_id'}) {
        $query_params->{'group_id'} = $self->{api_client}->to_query_value($args{'group_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeUnassignGroup200Response', $response);
    return $_response_object;
}

#
# attribute_unassign_set
#
# attribute.unassign.set
#
# @param string $id Entity id (required)
# @param string $attribute_set_id Attribute set id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'attribute_set_id' => {
        data_type => 'string',
        description => 'Attribute set id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_unassign_set' } = {
        summary => 'attribute.unassign.set',
        params => $params,
        returns => 'AttributeUnassignGroup200Response',
        };
}
# @return AttributeUnassignGroup200Response
#
sub attribute_unassign_set {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attribute_unassign_set");
    }

    # verify the required parameter 'attribute_set_id' is set
    unless (exists $args{'attribute_set_id'}) {
      croak("Missing the required parameter 'attribute_set_id' when calling attribute_unassign_set");
    }

    # parse inputs
    my $_resource_path = '/attribute.unassign.set.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'attribute_set_id'}) {
        $query_params->{'attribute_set_id'} = $self->{api_client}->to_query_value($args{'attribute_set_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeUnassignGroup200Response', $response);
    return $_response_object;
}

#
# attribute_update
#
# attribute.update
#
# @param string $id Entity id (required)
# @param string $name Defines new attributes&#39;s name (required)
# @param string $store_id Store Id (optional)
# @param string $lang_id Language id (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'name' => {
        data_type => 'string',
        description => 'Defines new attributes&#39;s name',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_update' } = {
        summary => 'attribute.update',
        params => $params,
        returns => 'AttributeUpdate200Response',
        };
}
# @return AttributeUpdate200Response
#
sub attribute_update {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attribute_update");
    }

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling attribute_update");
    }

    # parse inputs
    my $_resource_path = '/attribute.update.json';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeUpdate200Response', $response);
    return $_response_object;
}

#
# attribute_value_add
#
# attribute.value.add
#
# @param string $attribute_id Attribute Id (required)
# @param string $name Defines attribute value&#39;s name (required)
# @param string $code Entity code (optional)
# @param string $description Defines attribute value&#39;s description (optional)
# @param string $store_id Store Id (optional)
# @param string $lang_id Language id (optional)
{
    my $params = {
    'attribute_id' => {
        data_type => 'string',
        description => 'Attribute Id',
        required => '1',
    },
    'name' => {
        data_type => 'string',
        description => 'Defines attribute value&#39;s name',
        required => '1',
    },
    'code' => {
        data_type => 'string',
        description => 'Entity code',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => 'Defines attribute value&#39;s description',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_value_add' } = {
        summary => 'attribute.value.add',
        params => $params,
        returns => 'AttributeAdd200Response',
        };
}
# @return AttributeAdd200Response
#
sub attribute_value_add {
    my ($self, %args) = @_;

    # verify the required parameter 'attribute_id' is set
    unless (exists $args{'attribute_id'}) {
      croak("Missing the required parameter 'attribute_id' when calling attribute_value_add");
    }

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling attribute_value_add");
    }

    # parse inputs
    my $_resource_path = '/attribute.value.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'attribute_id'}) {
        $query_params->{'attribute_id'} = $self->{api_client}->to_query_value($args{'attribute_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'code'}) {
        $query_params->{'code'} = $self->{api_client}->to_query_value($args{'code'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeAdd200Response', $response);
    return $_response_object;
}

#
# attribute_value_delete
#
# attribute.value.delete
#
# @param string $id Entity id (required)
# @param string $attribute_id Attribute Id (required)
# @param string $store_id Store Id (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'attribute_id' => {
        data_type => 'string',
        description => 'Attribute Id',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_value_delete' } = {
        summary => 'attribute.value.delete',
        params => $params,
        returns => 'AttributeValueDelete200Response',
        };
}
# @return AttributeValueDelete200Response
#
sub attribute_value_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attribute_value_delete");
    }

    # verify the required parameter 'attribute_id' is set
    unless (exists $args{'attribute_id'}) {
      croak("Missing the required parameter 'attribute_id' when calling attribute_value_delete");
    }

    # parse inputs
    my $_resource_path = '/attribute.value.delete.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'attribute_id'}) {
        $query_params->{'attribute_id'} = $self->{api_client}->to_query_value($args{'attribute_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeValueDelete200Response', $response);
    return $_response_object;
}

#
# attribute_value_update
#
# attribute.value.update
#
# @param string $id Defines attribute value&#39;s id (required)
# @param string $attribute_id Attribute Id (required)
# @param string $name Defines attribute value&#39;s name (optional)
# @param string $description Defines new attribute value&#39;s description (optional)
# @param string $code Entity code (optional)
# @param string $store_id Store Id (optional)
# @param string $lang_id Language id (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Defines attribute value&#39;s id',
        required => '1',
    },
    'attribute_id' => {
        data_type => 'string',
        description => 'Attribute Id',
        required => '1',
    },
    'name' => {
        data_type => 'string',
        description => 'Defines attribute value&#39;s name',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => 'Defines new attribute value&#39;s description',
        required => '0',
    },
    'code' => {
        data_type => 'string',
        description => 'Entity code',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'attribute_value_update' } = {
        summary => 'attribute.value.update',
        params => $params,
        returns => 'AttributeUpdate200Response',
        };
}
# @return AttributeUpdate200Response
#
sub attribute_value_update {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling attribute_value_update");
    }

    # verify the required parameter 'attribute_id' is set
    unless (exists $args{'attribute_id'}) {
      croak("Missing the required parameter 'attribute_id' when calling attribute_value_update");
    }

    # parse inputs
    my $_resource_path = '/attribute.value.update.json';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'attribute_id'}) {
        $query_params->{'attribute_id'} = $self->{api_client}->to_query_value($args{'attribute_id'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'code'}) {
        $query_params->{'code'} = $self->{api_client}->to_query_value($args{'code'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeUpdate200Response', $response);
    return $_response_object;
}

1;
