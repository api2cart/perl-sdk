=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::MarketplaceApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# marketplace_product_find
#
# marketplace.product.find
#
# @param string $store_id Store Id (optional)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param string $categories_ids Defines product add that is specified by comma-separated categories id (optional)
# @param string $keyword Defines search keyword (optional)
# @param string $asin Amazon Standard Identification Number. (optional)
# @param string $ean European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products. (optional)
# @param string $gtin Global Trade Item Number. An GTIN is an identifier for trade items. (optional)
# @param string $upc Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products. (optional)
# @param string $mpn Manufacturer Part Number. A MPN is an identifier of a particular part design or material used. (optional)
# @param string $isbn International Standard Book Number. An ISBN is a unique identifier for books. (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'force_all')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
{
    my $params = {
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'categories_ids' => {
        data_type => 'string',
        description => 'Defines product add that is specified by comma-separated categories id',
        required => '0',
    },
    'keyword' => {
        data_type => 'string',
        description => 'Defines search keyword',
        required => '0',
    },
    'asin' => {
        data_type => 'string',
        description => 'Amazon Standard Identification Number.',
        required => '0',
    },
    'ean' => {
        data_type => 'string',
        description => 'European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.',
        required => '0',
    },
    'gtin' => {
        data_type => 'string',
        description => 'Global Trade Item Number. An GTIN is an identifier for trade items.',
        required => '0',
    },
    'upc' => {
        data_type => 'string',
        description => 'Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.',
        required => '0',
    },
    'mpn' => {
        data_type => 'string',
        description => 'Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.',
        required => '0',
    },
    'isbn' => {
        data_type => 'string',
        description => 'International Standard Book Number. An ISBN is a unique identifier for books.',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'marketplace_product_find' } = {
        summary => 'marketplace.product.find',
        params => $params,
        returns => 'ModelResponseMarketplaceProductFind',
        };
}
# @return ModelResponseMarketplaceProductFind
#
sub marketplace_product_find {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/marketplace.product.find.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'categories_ids'}) {
        $query_params->{'categories_ids'} = $self->{api_client}->to_query_value($args{'categories_ids'});
    }

    # query params
    if ( exists $args{'keyword'}) {
        $query_params->{'keyword'} = $self->{api_client}->to_query_value($args{'keyword'});
    }

    # query params
    if ( exists $args{'asin'}) {
        $query_params->{'asin'} = $self->{api_client}->to_query_value($args{'asin'});
    }

    # query params
    if ( exists $args{'ean'}) {
        $query_params->{'ean'} = $self->{api_client}->to_query_value($args{'ean'});
    }

    # query params
    if ( exists $args{'gtin'}) {
        $query_params->{'gtin'} = $self->{api_client}->to_query_value($args{'gtin'});
    }

    # query params
    if ( exists $args{'upc'}) {
        $query_params->{'upc'} = $self->{api_client}->to_query_value($args{'upc'});
    }

    # query params
    if ( exists $args{'mpn'}) {
        $query_params->{'mpn'} = $self->{api_client}->to_query_value($args{'mpn'});
    }

    # query params
    if ( exists $args{'isbn'}) {
        $query_params->{'isbn'} = $self->{api_client}->to_query_value($args{'isbn'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseMarketplaceProductFind', $response);
    return $_response_object;
}

1;
