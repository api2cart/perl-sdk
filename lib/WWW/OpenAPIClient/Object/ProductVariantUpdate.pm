=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::ProductVariantUpdate;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use WWW::OpenAPIClient::Object::ProductVariantUpdateOptionsInner;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            my $_json_attribute = $self->attribute_map->{$_key};
            my $_type = $self->openapi_types->{$_key};
            my $_value = $self->{$_key};
            if ($_type =~ /^array\[(.+)\]$/i) { # array
                my $_subclass = $1;
                $_data->{$_json_attribute} =  [ map { $self->_to_json_primitives($_subclass, $_) } @$_value ];
            } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
                my $_subclass = $1;
                my %_hash = ();
                while (my($_key, $_element) = each %{$_value}) {
                    $_hash{$_key} = $self->_to_json_primitives($_subclass, $_element);
                }
                $_data->{$_json_attribute} = \%_hash;
            } elsif ( grep( /^$_type$/, ('int', 'double', 'string', 'boolean', 'DATE', 'DATE_TIME'))) {
                $_data->{$_json_attribute} = $self->_to_json_primitives($_type, $_value);
            } else {
                $_data->{$_json_attribute} = $_value;
            }
        }
    }

    return $_data;
}

# to_json non-array data
sub _to_json_primitives {
    my ($self, $type, $data) = @_;
    if ( grep( /^$type$/, ('int', 'double'))) {
        # https://metacpan.org/pod/JSON#simple-scalars
        # numify it, ensuring it will be dumped as a number
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        # https://metacpan.org/pod/JSON#simple-scalars
        # stringified
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        # https://metacpan.org/pod/JSON#JSON::true,-JSON::false,-JSON::null
        return $data ? \1 : \0;
    } elsif ($type eq 'DATE') {
        return undef unless defined $data;
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Eymd($optional_separator),-$dt-%3Emdy(...),-$dt-%3Edmy(...)
            return $data->ymd;
        }
        return $data .q();
    } elsif ($type eq 'DATE_TIME') {
        return undef unless defined $data;
        # the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Erfc3339
            return $data->rfc3339;
        }
        return $data .q();
    } else { # hash (model),  In this case, the TO_JSON of the $data object is executed
        return $data;
    }
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if (grep( /^$type$/ , ('DATE_TIME', 'DATE'))) {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double'))) {
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        return !!$data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => '',
                                  class => 'ProductVariantUpdate',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'id' => {
        datatype => 'string',
        base_name => 'id',
        description => 'Defines variant update specified by variant id',
        format => '',
        read_only => '',
            },
    'product_id' => {
        datatype => 'string',
        base_name => 'product_id',
        description => 'Defines product&#39;s id where the variant has to be updated',
        format => '',
        read_only => '',
            },
    'store_id' => {
        datatype => 'string',
        base_name => 'store_id',
        description => 'Defines store id where the variant should be found',
        format => '',
        read_only => '',
            },
    'lang_id' => {
        datatype => 'string',
        base_name => 'lang_id',
        description => 'Language id',
        format => '',
        read_only => '',
            },
    'options' => {
        datatype => 'ARRAY[ProductVariantUpdateOptionsInner]',
        base_name => 'options',
        description => 'Defines variant&#39;s options list',
        format => '',
        read_only => '',
            },
    'name' => {
        datatype => 'string',
        base_name => 'name',
        description => 'Defines variant&#39;s name that has to be updated',
        format => '',
        read_only => '',
            },
    'description' => {
        datatype => 'string',
        base_name => 'description',
        description => 'Specifies variant&#39;s description',
        format => '',
        read_only => '',
            },
    'short_description' => {
        datatype => 'string',
        base_name => 'short_description',
        description => 'Defines short description',
        format => '',
        read_only => '',
            },
    'model' => {
        datatype => 'string',
        base_name => 'model',
        description => 'Specifies variant&#39;s model that has to be added',
        format => '',
        read_only => '',
            },
    'sku' => {
        datatype => 'string',
        base_name => 'sku',
        description => 'Defines new product&#39;s variant sku',
        format => '',
        read_only => '',
            },
    'visible' => {
        datatype => 'string',
        base_name => 'visible',
        description => 'Set visibility status',
        format => '',
        read_only => '',
            },
    'status' => {
        datatype => 'string',
        base_name => 'status',
        description => 'Defines product variant&#39;s status',
        format => '',
        read_only => '',
            },
    'backorder_status' => {
        datatype => 'string',
        base_name => 'backorder_status',
        description => 'Set backorder status',
        format => '',
        read_only => '',
            },
    'low_stock_threshold' => {
        datatype => 'double',
        base_name => 'low_stock_threshold',
        description => 'Specify the quantity threshold below which the product is considered low in stock',
        format => '',
        read_only => '',
            },
    'available_for_sale' => {
        datatype => 'boolean',
        base_name => 'available_for_sale',
        description => 'Specifies the set of visible/invisible product&#39;s variants for sale',
        format => '',
        read_only => '',
            },
    'avail' => {
        datatype => 'boolean',
        base_name => 'avail',
        description => 'Defines category&#39;s visibility status',
        format => '',
        read_only => '',
            },
    'is_default' => {
        datatype => 'boolean',
        base_name => 'is_default',
        description => 'Defines as a default variant',
        format => '',
        read_only => '',
            },
    'is_free_shipping' => {
        datatype => 'boolean',
        base_name => 'is_free_shipping',
        description => 'Specifies variant&#39;s free shipping flag that has to be added',
        format => '',
        read_only => '',
            },
    'taxable' => {
        datatype => 'boolean',
        base_name => 'taxable',
        description => 'Specifies whether a tax is charged',
        format => '',
        read_only => '',
            },
    'tax_class_id' => {
        datatype => 'string',
        base_name => 'tax_class_id',
        description => 'Defines tax classes where entity has to be added',
        format => '',
        read_only => '',
            },
    'is_virtual' => {
        datatype => 'boolean',
        base_name => 'is_virtual',
        description => 'Defines whether the product is virtual',
        format => '',
        read_only => '',
            },
    'manage_stock' => {
        datatype => 'boolean',
        base_name => 'manage_stock',
        description => 'Defines inventory tracking for product variant',
        format => '',
        read_only => '',
            },
    'in_stock' => {
        datatype => 'boolean',
        base_name => 'in_stock',
        description => 'Set stock status',
        format => '',
        read_only => '',
            },
    'warehouse_id' => {
        datatype => 'string',
        base_name => 'warehouse_id',
        description => 'This parameter is used for selecting a warehouse where you need to set/modify a product quantity.',
        format => '',
        read_only => '',
            },
    'reserve_quantity' => {
        datatype => 'double',
        base_name => 'reserve_quantity',
        description => 'This parameter allows to reserve/unreserve product variants quantity.',
        format => '',
        read_only => '',
            },
    'quantity' => {
        datatype => 'double',
        base_name => 'quantity',
        description => 'Defines new products&#39; variants quantity',
        format => '',
        read_only => '',
            },
    'increase_quantity' => {
        datatype => 'double',
        base_name => 'increase_quantity',
        description => 'Defines the incremental changes in product quantity',
        format => '',
        read_only => '',
            },
    'reduce_quantity' => {
        datatype => 'double',
        base_name => 'reduce_quantity',
        description => 'Defines the decrement changes in product quantity',
        format => '',
        read_only => '',
            },
    'price' => {
        datatype => 'double',
        base_name => 'price',
        description => 'Defines new product&#39;s variant price',
        format => '',
        read_only => '',
            },
    'special_price' => {
        datatype => 'double',
        base_name => 'special_price',
        description => 'Defines new product&#39;s variant special price',
        format => '',
        read_only => '',
            },
    'retail_price' => {
        datatype => 'double',
        base_name => 'retail_price',
        description => 'Defines new product&#39;s retail price',
        format => '',
        read_only => '',
            },
    'old_price' => {
        datatype => 'double',
        base_name => 'old_price',
        description => 'Defines product&#39;s old price',
        format => '',
        read_only => '',
            },
    'cost_price' => {
        datatype => 'double',
        base_name => 'cost_price',
        description => 'Defines new product&#39;s cost price',
        format => '',
        read_only => '',
            },
    'fixed_cost_shipping_price' => {
        datatype => 'double',
        base_name => 'fixed_cost_shipping_price',
        description => 'Specifies fixed cost shipping price',
        format => '',
        read_only => '',
            },
    'sprice_create' => {
        datatype => 'string',
        base_name => 'sprice_create',
        description => 'Defines the date of special price creation',
        format => '',
        read_only => '',
            },
    'sprice_expire' => {
        datatype => 'string',
        base_name => 'sprice_expire',
        description => 'Defines the term of special price offer duration',
        format => '',
        read_only => '',
            },
    'weight' => {
        datatype => 'double',
        base_name => 'weight',
        description => 'Weight',
        format => '',
        read_only => '',
            },
    'barcode' => {
        datatype => 'string',
        base_name => 'barcode',
        description => 'A barcode is a unique code composed of numbers used as a product identifier.',
        format => '',
        read_only => '',
            },
    'width' => {
        datatype => 'double',
        base_name => 'width',
        description => 'Defines product&#39;s width',
        format => '',
        read_only => '',
            },
    'weight_unit' => {
        datatype => 'string',
        base_name => 'weight_unit',
        description => 'Weight Unit',
        format => '',
        read_only => '',
            },
    'height' => {
        datatype => 'double',
        base_name => 'height',
        description => 'Defines product&#39;s height',
        format => '',
        read_only => '',
            },
    'length' => {
        datatype => 'double',
        base_name => 'length',
        description => 'Defines product&#39;s length',
        format => '',
        read_only => '',
            },
    'gtin' => {
        datatype => 'string',
        base_name => 'gtin',
        description => 'Global Trade Item Number. An GTIN is an identifier for trade items.',
        format => '',
        read_only => '',
            },
    'upc' => {
        datatype => 'string',
        base_name => 'upc',
        description => 'Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.',
        format => '',
        read_only => '',
            },
    'mpn' => {
        datatype => 'string',
        base_name => 'mpn',
        description => 'Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.',
        format => '',
        read_only => '',
            },
    'ean' => {
        datatype => 'string',
        base_name => 'ean',
        description => 'European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.',
        format => '',
        read_only => '',
            },
    'isbn' => {
        datatype => 'string',
        base_name => 'isbn',
        description => 'International Standard Book Number. An ISBN is a unique identifier for books.',
        format => '',
        read_only => '',
            },
    'harmonized_system_code' => {
        datatype => 'string',
        base_name => 'harmonized_system_code',
        description => 'Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes',
        format => '',
        read_only => '',
            },
    'country_of_origin' => {
        datatype => 'string',
        base_name => 'country_of_origin',
        description => 'The country where the inventory item was made',
        format => '',
        read_only => '',
            },
    'meta_title' => {
        datatype => 'string',
        base_name => 'meta_title',
        description => 'Defines unique meta title for each entity',
        format => '',
        read_only => '',
            },
    'meta_description' => {
        datatype => 'string',
        base_name => 'meta_description',
        description => 'Defines unique meta description of a entity',
        format => '',
        read_only => '',
            },
    'meta_keywords' => {
        datatype => 'string',
        base_name => 'meta_keywords',
        description => 'Defines unique meta keywords for each entity',
        format => '',
        read_only => '',
            },
    'reindex' => {
        datatype => 'boolean',
        base_name => 'reindex',
        description => 'Is reindex required',
        format => '',
        read_only => '',
            },
    'clear_cache' => {
        datatype => 'boolean',
        base_name => 'clear_cache',
        description => 'Is cache clear required',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'id' => 'string',
    'product_id' => 'string',
    'store_id' => 'string',
    'lang_id' => 'string',
    'options' => 'ARRAY[ProductVariantUpdateOptionsInner]',
    'name' => 'string',
    'description' => 'string',
    'short_description' => 'string',
    'model' => 'string',
    'sku' => 'string',
    'visible' => 'string',
    'status' => 'string',
    'backorder_status' => 'string',
    'low_stock_threshold' => 'double',
    'available_for_sale' => 'boolean',
    'avail' => 'boolean',
    'is_default' => 'boolean',
    'is_free_shipping' => 'boolean',
    'taxable' => 'boolean',
    'tax_class_id' => 'string',
    'is_virtual' => 'boolean',
    'manage_stock' => 'boolean',
    'in_stock' => 'boolean',
    'warehouse_id' => 'string',
    'reserve_quantity' => 'double',
    'quantity' => 'double',
    'increase_quantity' => 'double',
    'reduce_quantity' => 'double',
    'price' => 'double',
    'special_price' => 'double',
    'retail_price' => 'double',
    'old_price' => 'double',
    'cost_price' => 'double',
    'fixed_cost_shipping_price' => 'double',
    'sprice_create' => 'string',
    'sprice_expire' => 'string',
    'weight' => 'double',
    'barcode' => 'string',
    'width' => 'double',
    'weight_unit' => 'string',
    'height' => 'double',
    'length' => 'double',
    'gtin' => 'string',
    'upc' => 'string',
    'mpn' => 'string',
    'ean' => 'string',
    'isbn' => 'string',
    'harmonized_system_code' => 'string',
    'country_of_origin' => 'string',
    'meta_title' => 'string',
    'meta_description' => 'string',
    'meta_keywords' => 'string',
    'reindex' => 'boolean',
    'clear_cache' => 'boolean'
} );

__PACKAGE__->attribute_map( {
    'id' => 'id',
    'product_id' => 'product_id',
    'store_id' => 'store_id',
    'lang_id' => 'lang_id',
    'options' => 'options',
    'name' => 'name',
    'description' => 'description',
    'short_description' => 'short_description',
    'model' => 'model',
    'sku' => 'sku',
    'visible' => 'visible',
    'status' => 'status',
    'backorder_status' => 'backorder_status',
    'low_stock_threshold' => 'low_stock_threshold',
    'available_for_sale' => 'available_for_sale',
    'avail' => 'avail',
    'is_default' => 'is_default',
    'is_free_shipping' => 'is_free_shipping',
    'taxable' => 'taxable',
    'tax_class_id' => 'tax_class_id',
    'is_virtual' => 'is_virtual',
    'manage_stock' => 'manage_stock',
    'in_stock' => 'in_stock',
    'warehouse_id' => 'warehouse_id',
    'reserve_quantity' => 'reserve_quantity',
    'quantity' => 'quantity',
    'increase_quantity' => 'increase_quantity',
    'reduce_quantity' => 'reduce_quantity',
    'price' => 'price',
    'special_price' => 'special_price',
    'retail_price' => 'retail_price',
    'old_price' => 'old_price',
    'cost_price' => 'cost_price',
    'fixed_cost_shipping_price' => 'fixed_cost_shipping_price',
    'sprice_create' => 'sprice_create',
    'sprice_expire' => 'sprice_expire',
    'weight' => 'weight',
    'barcode' => 'barcode',
    'width' => 'width',
    'weight_unit' => 'weight_unit',
    'height' => 'height',
    'length' => 'length',
    'gtin' => 'gtin',
    'upc' => 'upc',
    'mpn' => 'mpn',
    'ean' => 'ean',
    'isbn' => 'isbn',
    'harmonized_system_code' => 'harmonized_system_code',
    'country_of_origin' => 'country_of_origin',
    'meta_title' => 'meta_title',
    'meta_description' => 'meta_description',
    'meta_keywords' => 'meta_keywords',
    'reindex' => 'reindex',
    'clear_cache' => 'clear_cache'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
