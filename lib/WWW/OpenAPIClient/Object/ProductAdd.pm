=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::ProductAdd;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use WWW::OpenAPIClient::Object::ProductAddBestOffer;
use WWW::OpenAPIClient::Object::ProductAddCertificationsInner;
use WWW::OpenAPIClient::Object::ProductAddFilesInner;
use WWW::OpenAPIClient::Object::ProductAddGroupPricesInner;
use WWW::OpenAPIClient::Object::ProductAddLogisticInfoInner;
use WWW::OpenAPIClient::Object::ProductAddManufacturerInfo;
use WWW::OpenAPIClient::Object::ProductAddPackageDetails;
use WWW::OpenAPIClient::Object::ProductAddPersonalizationDetails;
use WWW::OpenAPIClient::Object::ProductAddSalesTax;
use WWW::OpenAPIClient::Object::ProductAddSellerProfiles;
use WWW::OpenAPIClient::Object::ProductAddShippingDetailsInner;
use WWW::OpenAPIClient::Object::ProductAddSizeChart;
use WWW::OpenAPIClient::Object::ProductAddSpecificsInner;
use WWW::OpenAPIClient::Object::ProductAddTierPricesInner;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            my $_json_attribute = $self->attribute_map->{$_key};
            my $_type = $self->openapi_types->{$_key};
            my $_value = $self->{$_key};
            if ($_type =~ /^array\[(.+)\]$/i) { # array
                my $_subclass = $1;
                $_data->{$_json_attribute} =  [ map { $self->_to_json_primitives($_subclass, $_) } @$_value ];
            } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
                my $_subclass = $1;
                my %_hash = ();
                while (my($_key, $_element) = each %{$_value}) {
                    $_hash{$_key} = $self->_to_json_primitives($_subclass, $_element);
                }
                $_data->{$_json_attribute} = \%_hash;
            } elsif ( grep( /^$_type$/, ('int', 'double', 'string', 'boolean', 'DATE', 'DATE_TIME'))) {
                $_data->{$_json_attribute} = $self->_to_json_primitives($_type, $_value);
            } else {
                $_data->{$_json_attribute} = $_value;
            }
        }
    }

    return $_data;
}

# to_json non-array data
sub _to_json_primitives {
    my ($self, $type, $data) = @_;
    if ( grep( /^$type$/, ('int', 'double'))) {
        # https://metacpan.org/pod/JSON#simple-scalars
        # numify it, ensuring it will be dumped as a number
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        # https://metacpan.org/pod/JSON#simple-scalars
        # stringified
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        # https://metacpan.org/pod/JSON#JSON::true,-JSON::false,-JSON::null
        return $data ? \1 : \0;
    } elsif ($type eq 'DATE') {
        return undef unless defined $data;
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Eymd($optional_separator),-$dt-%3Emdy(...),-$dt-%3Edmy(...)
            return $data->ymd;
        }
        return $data .q();
    } elsif ($type eq 'DATE_TIME') {
        return undef unless defined $data;
        # the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Erfc3339
            return $data->rfc3339;
        }
        return $data .q();
    } else { # hash (model),  In this case, the TO_JSON of the $data object is executed
        return $data;
    }
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if (grep( /^$type$/ , ('DATE_TIME', 'DATE'))) {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double'))) {
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        return !!$data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => '',
                                  class => 'ProductAdd',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'name' => {
        datatype => 'string',
        base_name => 'name',
        description => 'Defines product&#39;s name that has to be added',
        format => '',
        read_only => '',
            },
    'model' => {
        datatype => 'string',
        base_name => 'model',
        description => 'Defines product&#39;s model that has to be added',
        format => '',
        read_only => '',
            },
    'description' => {
        datatype => 'string',
        base_name => 'description',
        description => 'Defines product&#39;s description that has to be added',
        format => '',
        read_only => '',
            },
    'price' => {
        datatype => 'double',
        base_name => 'price',
        description => 'Defines product&#39;s price that has to be added',
        format => '',
        read_only => '',
            },
    'sku' => {
        datatype => 'string',
        base_name => 'sku',
        description => 'Defines product&#39;s sku that has to be added',
        format => '',
        read_only => '',
            },
    'short_description' => {
        datatype => 'string',
        base_name => 'short_description',
        description => 'Defines short description',
        format => '',
        read_only => '',
            },
    'type' => {
        datatype => 'string',
        base_name => 'type',
        description => 'Defines product&#39;s type',
        format => '',
        read_only => '',
            },
    'status' => {
        datatype => 'string',
        base_name => 'status',
        description => 'Defines product&#39;s status',
        format => '',
        read_only => '',
            },
    'visible' => {
        datatype => 'string',
        base_name => 'visible',
        description => 'Set visibility status',
        format => '',
        read_only => '',
            },
    'category_id' => {
        datatype => 'string',
        base_name => 'category_id',
        description => 'Defines product add that is specified by category id',
        format => '',
        read_only => '',
            },
    'categories_ids' => {
        datatype => 'string',
        base_name => 'categories_ids',
        description => 'Defines product add that is specified by comma-separated categories id',
        format => '',
        read_only => '',
            },
    'product_class' => {
        datatype => 'string',
        base_name => 'product_class',
        description => 'A categorization for the product',
        format => '',
        read_only => '',
            },
    'product_type' => {
        datatype => 'string',
        base_name => 'product_type',
        description => 'A categorization for the product',
        format => '',
        read_only => '',
            },
    'is_virtual' => {
        datatype => 'boolean',
        base_name => 'is_virtual',
        description => 'Defines whether the product is virtual',
        format => '',
        read_only => '',
            },
    'downloadable' => {
        datatype => 'boolean',
        base_name => 'downloadable',
        description => 'Defines whether the product is downloadable',
        format => '',
        read_only => '',
            },
    'is_supply' => {
        datatype => 'boolean',
        base_name => 'is_supply',
        description => 'If true, it indicates the product as a supply, otherwise it indicates that it is a finished product.',
        format => '',
        read_only => '',
            },
    'available_for_view' => {
        datatype => 'boolean',
        base_name => 'available_for_view',
        description => 'Specifies the set of visible/invisible products for users',
        format => '',
        read_only => '',
            },
    'available_for_sale' => {
        datatype => 'boolean',
        base_name => 'available_for_sale',
        description => 'Specifies the set of visible/invisible products for sale',
        format => '',
        read_only => '',
            },
    'store_id' => {
        datatype => 'string',
        base_name => 'store_id',
        description => 'Store Id',
        format => '',
        read_only => '',
            },
    'stores_ids' => {
        datatype => 'string',
        base_name => 'stores_ids',
        description => 'Assign product to the stores that is specified by comma-separated stores&#39; id',
        format => '',
        read_only => '',
            },
    'lang_id' => {
        datatype => 'string',
        base_name => 'lang_id',
        description => 'Language id',
        format => '',
        read_only => '',
            },
    'old_price' => {
        datatype => 'double',
        base_name => 'old_price',
        description => 'Defines product&#39;s old price',
        format => '',
        read_only => '',
            },
    'special_price' => {
        datatype => 'double',
        base_name => 'special_price',
        description => 'Defines product&#39;s model that has to be added',
        format => '',
        read_only => '',
            },
    'wholesale_price' => {
        datatype => 'double',
        base_name => 'wholesale_price',
        description => 'Defines product&#39;s sale price',
        format => '',
        read_only => '',
            },
    'cost_price' => {
        datatype => 'double',
        base_name => 'cost_price',
        description => 'Defines new product&#39;s cost price',
        format => '',
        read_only => '',
            },
    'fixed_cost_shipping_price' => {
        datatype => 'double',
        base_name => 'fixed_cost_shipping_price',
        description => 'Specifies product&#39;s fixed cost shipping price',
        format => '',
        read_only => '',
            },
    'tier_prices' => {
        datatype => 'ARRAY[ProductAddTierPricesInner]',
        base_name => 'tier_prices',
        description => 'Defines product&#39;s tier prices',
        format => '',
        read_only => '',
            },
    'group_prices' => {
        datatype => 'ARRAY[ProductAddGroupPricesInner]',
        base_name => 'group_prices',
        description => 'Defines product&#39;s group prices',
        format => '',
        read_only => '',
            },
    'buyitnow_price' => {
        datatype => 'double',
        base_name => 'buyitnow_price',
        description => 'Defines buy it now value',
        format => '',
        read_only => '',
            },
    'reserve_price' => {
        datatype => 'double',
        base_name => 'reserve_price',
        description => 'Defines reserve price value',
        format => '',
        read_only => '',
            },
    'quantity' => {
        datatype => 'double',
        base_name => 'quantity',
        description => 'Defines product&#39;s quantity that has to be added',
        format => '',
        read_only => '',
            },
    'in_stock' => {
        datatype => 'boolean',
        base_name => 'in_stock',
        description => 'Set stock status',
        format => '',
        read_only => '',
            },
    'manage_stock' => {
        datatype => 'boolean',
        base_name => 'manage_stock',
        description => 'Defines inventory tracking for product',
        format => '',
        read_only => '',
            },
    'warehouse_id' => {
        datatype => 'string',
        base_name => 'warehouse_id',
        description => 'This parameter is used for selecting a warehouse where you need to set/modify a product quantity.',
        format => '',
        read_only => '',
            },
    'backorder_status' => {
        datatype => 'string',
        base_name => 'backorder_status',
        description => 'Set backorder status',
        format => '',
        read_only => '',
            },
    'min_order_quantity' => {
        datatype => 'double',
        base_name => 'min_order_quantity',
        description => 'The minimum quantity an order must contain, to be eligible to purchase this product.',
        format => '',
        read_only => '',
            },
    'max_order_quantity' => {
        datatype => 'double',
        base_name => 'max_order_quantity',
        description => 'The maximum quantity an order can contain when purchasing the product.',
        format => '',
        read_only => '',
            },
    'weight' => {
        datatype => 'double',
        base_name => 'weight',
        description => 'Weight',
        format => '',
        read_only => '',
            },
    'weight_unit' => {
        datatype => 'string',
        base_name => 'weight_unit',
        description => 'Weight Unit',
        format => '',
        read_only => '',
            },
    'width' => {
        datatype => 'double',
        base_name => 'width',
        description => 'Defines product&#39;s width',
        format => '',
        read_only => '',
            },
    'height' => {
        datatype => 'double',
        base_name => 'height',
        description => 'Defines product&#39;s height',
        format => '',
        read_only => '',
            },
    'length' => {
        datatype => 'double',
        base_name => 'length',
        description => 'Defines product&#39;s length',
        format => '',
        read_only => '',
            },
    'dimensions_unit' => {
        datatype => 'string',
        base_name => 'dimensions_unit',
        description => 'Weight Unit',
        format => '',
        read_only => '',
            },
    'barcode' => {
        datatype => 'string',
        base_name => 'barcode',
        description => 'A barcode is a unique code composed of numbers used as a product identifier.',
        format => '',
        read_only => '',
            },
    'upc' => {
        datatype => 'string',
        base_name => 'upc',
        description => 'Universal Product Code. A UPC (UPC-A) is a commonly used identifer for many different products.',
        format => '',
        read_only => '',
            },
    'ean' => {
        datatype => 'string',
        base_name => 'ean',
        description => 'European Article Number. An EAN is a unique 8 or 13-digit identifier that many industries (such as book publishers) use to identify products.',
        format => '',
        read_only => '',
            },
    'isbn' => {
        datatype => 'string',
        base_name => 'isbn',
        description => 'International Standard Book Number. An ISBN is a unique identifier for books.',
        format => '',
        read_only => '',
            },
    'gtin' => {
        datatype => 'string',
        base_name => 'gtin',
        description => 'Global Trade Item Number. An GTIN is an identifier for trade items.',
        format => '',
        read_only => '',
            },
    'mpn' => {
        datatype => 'string',
        base_name => 'mpn',
        description => 'Manufacturer Part Number. A MPN is an identifier of a particular part design or material used.',
        format => '',
        read_only => '',
            },
    'asin' => {
        datatype => 'string',
        base_name => 'asin',
        description => 'Amazon Standard Identification Number.',
        format => '',
        read_only => '',
            },
    'product_reference' => {
        datatype => 'string',
        base_name => 'product_reference',
        description => 'Groups all variations, that you want to combine into one product.',
        format => '',
        read_only => '',
            },
    'harmonized_system_code' => {
        datatype => 'string',
        base_name => 'harmonized_system_code',
        description => 'Harmonized System Code. An HSC is a 6-digit identifier that allows participating countries to classify traded goods on a common basis for customs purposes',
        format => '',
        read_only => '',
            },
    'country_of_origin' => {
        datatype => 'string',
        base_name => 'country_of_origin',
        description => 'The country where the inventory item was made',
        format => '',
        read_only => '',
            },
    'manufacturer' => {
        datatype => 'string',
        base_name => 'manufacturer',
        description => 'Defines product&#39;s manufacturer',
        format => '',
        read_only => '',
            },
    'manufacturer_id' => {
        datatype => 'string',
        base_name => 'manufacturer_id',
        description => 'Defines product&#39;s manufacturer by manufacturer_id',
        format => '',
        read_only => '',
            },
    'manufacturer_info' => {
        datatype => 'ProductAddManufacturerInfo',
        base_name => 'manufacturer_info',
        description => '',
        format => '',
        read_only => '',
            },
    'brand_name' => {
        datatype => 'string',
        base_name => 'brand_name',
        description => 'Defines product brand name',
        format => '',
        read_only => '',
            },
    'image_url' => {
        datatype => 'string',
        base_name => 'image_url',
        description => 'Image Url',
        format => '',
        read_only => '',
            },
    'image_name' => {
        datatype => 'string',
        base_name => 'image_name',
        description => 'Defines image&#39;s name',
        format => '',
        read_only => '',
            },
    'additional_image_urls' => {
        datatype => 'ARRAY[string]',
        base_name => 'additional_image_urls',
        description => 'Image Url',
        format => '',
        read_only => '',
            },
    'files' => {
        datatype => 'ARRAY[ProductAddFilesInner]',
        base_name => 'files',
        description => 'File Url',
        format => '',
        read_only => '',
            },
    'size_chart' => {
        datatype => 'ProductAddSizeChart',
        base_name => 'size_chart',
        description => '',
        format => '',
        read_only => '',
            },
    'related_products_ids' => {
        datatype => 'string',
        base_name => 'related_products_ids',
        description => 'Defines product&#39;s related products ids that has to be added',
        format => '',
        read_only => '',
            },
    'up_sell_products_ids' => {
        datatype => 'string',
        base_name => 'up_sell_products_ids',
        description => 'Defines product&#39;s up-sell products ids that has to be added',
        format => '',
        read_only => '',
            },
    'cross_sell_products_ids' => {
        datatype => 'string',
        base_name => 'cross_sell_products_ids',
        description => 'Defines product&#39;s cross-sell products ids that has to be added',
        format => '',
        read_only => '',
            },
    'attribute_set_name' => {
        datatype => 'string',
        base_name => 'attribute_set_name',
        description => 'Defines product’s attribute set name in Magento',
        format => '',
        read_only => '',
            },
    'attribute_name' => {
        datatype => 'string',
        base_name => 'attribute_name',
        description => 'Defines product’s attribute name separated with a comma in Magento',
        format => '',
        read_only => '',
            },
    'search_keywords' => {
        datatype => 'string',
        base_name => 'search_keywords',
        description => 'Defines unique search keywords',
        format => '',
        read_only => '',
            },
    'tags' => {
        datatype => 'string',
        base_name => 'tags',
        description => 'Product tags',
        format => '',
        read_only => '',
            },
    'materials' => {
        datatype => 'ARRAY[string]',
        base_name => 'materials',
        description => 'A list of material strings for materials used in the product.',
        format => '',
        read_only => '',
            },
    'certifications' => {
        datatype => 'ARRAY[ProductAddCertificationsInner]',
        base_name => 'certifications',
        description => 'An array of product certifications. The list of possible certifications can be obtained using the \&quot;&lt;i&gt;category.info&lt;/i&gt;\&quot; method (&lt;i&gt;additional_fields-&gt;rules-&gt;product_certifications&lt;/i&gt;).',
        format => '',
        read_only => '',
            },
    'specifics' => {
        datatype => 'ARRAY[ProductAddSpecificsInner]',
        base_name => 'specifics',
        description => 'An array of Item Specific Name/Value pairs used by the seller to provide descriptive details of an item in a structured manner.         The list of possible specifications can be obtained using the category.info method (additional_fields-&gt;product_specifics).         &lt;b&gt;The structure of the parameter is different for specific platforms.&lt;/b&gt;',
        format => '',
        read_only => '',
            },
    'avail_from' => {
        datatype => 'string',
        base_name => 'avail_from',
        description => 'Allows to schedule a time in the future that the item becomes available. The value should be greater than the current date and time.',
        format => '',
        read_only => '',
            },
    'sprice_create' => {
        datatype => 'string',
        base_name => 'sprice_create',
        description => 'Defines the date of special price creation',
        format => '',
        read_only => '',
            },
    'sprice_modified' => {
        datatype => 'string',
        base_name => 'sprice_modified',
        description => 'Defines the date of special price modification',
        format => '',
        read_only => '',
            },
    'sprice_expire' => {
        datatype => 'string',
        base_name => 'sprice_expire',
        description => 'Defines the term of special price offer duration',
        format => '',
        read_only => '',
            },
    'created_at' => {
        datatype => 'string',
        base_name => 'created_at',
        description => 'Defines the date of entity creation',
        format => '',
        read_only => '',
            },
    'auto_renew' => {
        datatype => 'boolean',
        base_name => 'auto_renew',
        description => 'When true, automatically renews a listing upon its expiration.',
        format => '',
        read_only => '',
            },
    'when_made' => {
        datatype => 'string',
        base_name => 'when_made',
        description => 'An enumerated string for the era in which the maker made the product.',
        format => '',
        read_only => '',
            },
    'meta_title' => {
        datatype => 'string',
        base_name => 'meta_title',
        description => 'Defines unique meta title for each entity',
        format => '',
        read_only => '',
            },
    'meta_keywords' => {
        datatype => 'string',
        base_name => 'meta_keywords',
        description => 'Defines unique meta keywords for each entity',
        format => '',
        read_only => '',
            },
    'meta_description' => {
        datatype => 'string',
        base_name => 'meta_description',
        description => 'Defines unique meta description of a entity',
        format => '',
        read_only => '',
            },
    'url' => {
        datatype => 'string',
        base_name => 'url',
        description => 'Defines unique product&#39;s URL',
        format => '',
        read_only => '',
            },
    'seo_url' => {
        datatype => 'string',
        base_name => 'seo_url',
        description => 'Defines unique URL for SEO',
        format => '',
        read_only => '',
            },
    'tax_class_id' => {
        datatype => 'string',
        base_name => 'tax_class_id',
        description => 'Defines tax classes where entity has to be added',
        format => '',
        read_only => '',
            },
    'taxable' => {
        datatype => 'boolean',
        base_name => 'taxable',
        description => 'Specifies whether a tax is charged',
        format => '',
        read_only => '',
            },
    'sales_tax' => {
        datatype => 'ProductAddSalesTax',
        base_name => 'sales_tax',
        description => '',
        format => '',
        read_only => '',
            },
    'condition' => {
        datatype => 'string',
        base_name => 'condition',
        description => 'The human-readable label for the condition (e.g., \&quot;New\&quot;).',
        format => '',
        read_only => '',
            },
    'condition_description' => {
        datatype => 'string',
        base_name => 'condition_description',
        description => 'Detailed description of the product condition.',
        format => '',
        read_only => '',
            },
    'allow_display_condition' => {
        datatype => 'boolean',
        base_name => 'allow_display_condition',
        description => 'Flag used to determine whether the product condition is shown to the customer on the product page.',
        format => '',
        read_only => '',
            },
    'payment_methods' => {
        datatype => 'ARRAY[string]',
        base_name => 'payment_methods',
        description => 'Identifies the payment method (such as PayPal) that the seller will accept when the buyer pays for the item. Look at cart.info method response for allowed values.&lt;hr&gt;&lt;div style&#x3D;\&quot;font-style:normal\&quot;&gt;Param structure:&lt;div style&#x3D;\&quot;margin-left: 2%;\&quot;&gt;&lt;code style&#x3D;\&quot;padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\&quot;&gt;payment_methods[0] &#x3D; string&lt;/br&gt;payment_methods[1] &#x3D; string&lt;/br&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;',
        format => '',
        read_only => '',
            },
    'paypal_email' => {
        datatype => 'string',
        base_name => 'paypal_email',
        description => 'Valid PayPal email address for the PayPal account that the seller will use if they offer PayPal as a payment method for the listing.',
        format => '',
        read_only => '',
            },
    'shipping_template_id' => {
        datatype => 'int',
        base_name => 'shipping_template_id',
        description => 'The numeric ID of the shipping template associated with the products in Etsy. You can find possible values in the \&quot;cart.info\&quot; API method response, in the field shipping_zones[]-&gt;id.',
        format => '',
        read_only => '',
            },
    'shipping_details' => {
        datatype => 'ARRAY[ProductAddShippingDetailsInner]',
        base_name => 'shipping_details',
        description => 'The shipping details, including flat and calculated shipping costs and shipping insurance costs. Look at cart.info method response for allowed values.&lt;hr&gt;&lt;div style&#x3D;\&quot;font-style:normal\&quot;&gt;Param structure:&lt;div style&#x3D;\&quot;margin-left: 2%;\&quot;&gt;&lt;code style&#x3D;\&quot;padding:0; background-color:#ffffff;font-size:85%;font-family:monospace;\&quot;&gt;shipping_details[0][&lt;b&gt;shipping_type&lt;/b&gt;] &#x3D; string &lt;/br&gt;shipping_details[0][&lt;b&gt;shipping_service&lt;/b&gt;] &#x3D; string&lt;/br&gt;shipping_details[0][&lt;b&gt;shipping_cost&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;shipping_details[1][&lt;b&gt;shipping_type&lt;/b&gt;] &#x3D; string &lt;/br&gt;shipping_details[1][&lt;b&gt;shipping_service&lt;/b&gt;] &#x3D; string&lt;/br&gt;shipping_details[1][&lt;b&gt;shipping_cost&lt;/b&gt;] &#x3D; decimal&lt;/br&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;',
        format => '',
        read_only => '',
            },
    'is_free_shipping' => {
        datatype => 'boolean',
        base_name => 'is_free_shipping',
        description => 'Specifies product&#39;s free shipping flag that has to be added',
        format => '',
        read_only => '',
            },
    'delivery_code' => {
        datatype => 'string',
        base_name => 'delivery_code',
        description => 'The delivery promise that applies to offer',
        format => '',
        read_only => '',
            },
    'delivery_type' => {
        datatype => 'string',
        base_name => 'delivery_type',
        description => 'Defines the type of the delivery.',
        format => '',
        read_only => '',
            },
    'delivery_time' => {
        datatype => 'int',
        base_name => 'delivery_time',
        description => 'Defines delivery time in days.',
        format => '',
        read_only => '',
            },
    'delivery_option_ids' => {
        datatype => 'string',
        base_name => 'delivery_option_ids',
        description => 'Defines delivery options for product by ids.',
        format => '',
        read_only => '',
            },
    'package_details' => {
        datatype => 'ProductAddPackageDetails',
        base_name => 'package_details',
        description => '',
        format => '',
        read_only => '',
            },
    'logistic_info' => {
        datatype => 'ARRAY[ProductAddLogisticInfoInner]',
        base_name => 'logistic_info',
        description => 'Defines product&#39;s logistic channel settings',
        format => '',
        read_only => '',
            },
    'listing_duration' => {
        datatype => 'string',
        base_name => 'listing_duration',
        description => 'Describes the number of days the seller wants the listing to be active. Look at cart.info method response for allowed values.',
        format => '',
        read_only => '',
            },
    'listing_type' => {
        datatype => 'string',
        base_name => 'listing_type',
        description => 'Indicates the selling format of the marketplace listing.',
        format => '',
        read_only => '',
            },
    'category_type' => {
        datatype => 'string',
        base_name => 'category_type',
        description => 'Specifies the type of category (e.g., apparel or other) for the product being added.',
        format => '',
        read_only => '',
            },
    'return_accepted' => {
        datatype => 'boolean',
        base_name => 'return_accepted',
        description => 'Indicates whether the seller allows the buyer to return the item.',
        format => '',
        read_only => '',
            },
    'seller_profiles' => {
        datatype => 'ProductAddSellerProfiles',
        base_name => 'seller_profiles',
        description => '',
        format => '',
        read_only => '',
            },
    'auction_confidentiality_level' => {
        datatype => 'string',
        base_name => 'auction_confidentiality_level',
        description => 'This allows buyers to remain anonymous when the bid or buy an item.',
        format => '',
        read_only => '',
            },
    'best_offer' => {
        datatype => 'ProductAddBestOffer',
        base_name => 'best_offer',
        description => '',
        format => '',
        read_only => '',
            },
    'production_partner_ids' => {
        datatype => 'string',
        base_name => 'production_partner_ids',
        description => 'Defines product&#39;s production partner ids that has to be added',
        format => '',
        read_only => '',
            },
    'marketplace_item_properties' => {
        datatype => 'string',
        base_name => 'marketplace_item_properties',
        description => 'String containing the JSON representation of the supplied data',
        format => '',
        read_only => '',
            },
    'clear_cache' => {
        datatype => 'boolean',
        base_name => 'clear_cache',
        description => 'Is cache clear required',
        format => '',
        read_only => '',
            },
    'viewed_count' => {
        datatype => 'int',
        base_name => 'viewed_count',
        description => 'Specifies the number of product&#39;s reviews',
        format => '',
        read_only => '',
            },
    'ordered_count' => {
        datatype => 'int',
        base_name => 'ordered_count',
        description => 'Defines how many times the product was ordered',
        format => '',
        read_only => '',
            },
    'shop_section_id' => {
        datatype => 'int',
        base_name => 'shop_section_id',
        description => 'Add Shop Section Id',
        format => '',
        read_only => '',
            },
    'return_policy_id' => {
        datatype => 'int',
        base_name => 'return_policy_id',
        description => 'Add Return Policy Id',
        format => '',
        read_only => '',
            },
    'personalization_details' => {
        datatype => 'ProductAddPersonalizationDetails',
        base_name => 'personalization_details',
        description => '',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'name' => 'string',
    'model' => 'string',
    'description' => 'string',
    'price' => 'double',
    'sku' => 'string',
    'short_description' => 'string',
    'type' => 'string',
    'status' => 'string',
    'visible' => 'string',
    'category_id' => 'string',
    'categories_ids' => 'string',
    'product_class' => 'string',
    'product_type' => 'string',
    'is_virtual' => 'boolean',
    'downloadable' => 'boolean',
    'is_supply' => 'boolean',
    'available_for_view' => 'boolean',
    'available_for_sale' => 'boolean',
    'store_id' => 'string',
    'stores_ids' => 'string',
    'lang_id' => 'string',
    'old_price' => 'double',
    'special_price' => 'double',
    'wholesale_price' => 'double',
    'cost_price' => 'double',
    'fixed_cost_shipping_price' => 'double',
    'tier_prices' => 'ARRAY[ProductAddTierPricesInner]',
    'group_prices' => 'ARRAY[ProductAddGroupPricesInner]',
    'buyitnow_price' => 'double',
    'reserve_price' => 'double',
    'quantity' => 'double',
    'in_stock' => 'boolean',
    'manage_stock' => 'boolean',
    'warehouse_id' => 'string',
    'backorder_status' => 'string',
    'min_order_quantity' => 'double',
    'max_order_quantity' => 'double',
    'weight' => 'double',
    'weight_unit' => 'string',
    'width' => 'double',
    'height' => 'double',
    'length' => 'double',
    'dimensions_unit' => 'string',
    'barcode' => 'string',
    'upc' => 'string',
    'ean' => 'string',
    'isbn' => 'string',
    'gtin' => 'string',
    'mpn' => 'string',
    'asin' => 'string',
    'product_reference' => 'string',
    'harmonized_system_code' => 'string',
    'country_of_origin' => 'string',
    'manufacturer' => 'string',
    'manufacturer_id' => 'string',
    'manufacturer_info' => 'ProductAddManufacturerInfo',
    'brand_name' => 'string',
    'image_url' => 'string',
    'image_name' => 'string',
    'additional_image_urls' => 'ARRAY[string]',
    'files' => 'ARRAY[ProductAddFilesInner]',
    'size_chart' => 'ProductAddSizeChart',
    'related_products_ids' => 'string',
    'up_sell_products_ids' => 'string',
    'cross_sell_products_ids' => 'string',
    'attribute_set_name' => 'string',
    'attribute_name' => 'string',
    'search_keywords' => 'string',
    'tags' => 'string',
    'materials' => 'ARRAY[string]',
    'certifications' => 'ARRAY[ProductAddCertificationsInner]',
    'specifics' => 'ARRAY[ProductAddSpecificsInner]',
    'avail_from' => 'string',
    'sprice_create' => 'string',
    'sprice_modified' => 'string',
    'sprice_expire' => 'string',
    'created_at' => 'string',
    'auto_renew' => 'boolean',
    'when_made' => 'string',
    'meta_title' => 'string',
    'meta_keywords' => 'string',
    'meta_description' => 'string',
    'url' => 'string',
    'seo_url' => 'string',
    'tax_class_id' => 'string',
    'taxable' => 'boolean',
    'sales_tax' => 'ProductAddSalesTax',
    'condition' => 'string',
    'condition_description' => 'string',
    'allow_display_condition' => 'boolean',
    'payment_methods' => 'ARRAY[string]',
    'paypal_email' => 'string',
    'shipping_template_id' => 'int',
    'shipping_details' => 'ARRAY[ProductAddShippingDetailsInner]',
    'is_free_shipping' => 'boolean',
    'delivery_code' => 'string',
    'delivery_type' => 'string',
    'delivery_time' => 'int',
    'delivery_option_ids' => 'string',
    'package_details' => 'ProductAddPackageDetails',
    'logistic_info' => 'ARRAY[ProductAddLogisticInfoInner]',
    'listing_duration' => 'string',
    'listing_type' => 'string',
    'category_type' => 'string',
    'return_accepted' => 'boolean',
    'seller_profiles' => 'ProductAddSellerProfiles',
    'auction_confidentiality_level' => 'string',
    'best_offer' => 'ProductAddBestOffer',
    'production_partner_ids' => 'string',
    'marketplace_item_properties' => 'string',
    'clear_cache' => 'boolean',
    'viewed_count' => 'int',
    'ordered_count' => 'int',
    'shop_section_id' => 'int',
    'return_policy_id' => 'int',
    'personalization_details' => 'ProductAddPersonalizationDetails'
} );

__PACKAGE__->attribute_map( {
    'name' => 'name',
    'model' => 'model',
    'description' => 'description',
    'price' => 'price',
    'sku' => 'sku',
    'short_description' => 'short_description',
    'type' => 'type',
    'status' => 'status',
    'visible' => 'visible',
    'category_id' => 'category_id',
    'categories_ids' => 'categories_ids',
    'product_class' => 'product_class',
    'product_type' => 'product_type',
    'is_virtual' => 'is_virtual',
    'downloadable' => 'downloadable',
    'is_supply' => 'is_supply',
    'available_for_view' => 'available_for_view',
    'available_for_sale' => 'available_for_sale',
    'store_id' => 'store_id',
    'stores_ids' => 'stores_ids',
    'lang_id' => 'lang_id',
    'old_price' => 'old_price',
    'special_price' => 'special_price',
    'wholesale_price' => 'wholesale_price',
    'cost_price' => 'cost_price',
    'fixed_cost_shipping_price' => 'fixed_cost_shipping_price',
    'tier_prices' => 'tier_prices',
    'group_prices' => 'group_prices',
    'buyitnow_price' => 'buyitnow_price',
    'reserve_price' => 'reserve_price',
    'quantity' => 'quantity',
    'in_stock' => 'in_stock',
    'manage_stock' => 'manage_stock',
    'warehouse_id' => 'warehouse_id',
    'backorder_status' => 'backorder_status',
    'min_order_quantity' => 'min_order_quantity',
    'max_order_quantity' => 'max_order_quantity',
    'weight' => 'weight',
    'weight_unit' => 'weight_unit',
    'width' => 'width',
    'height' => 'height',
    'length' => 'length',
    'dimensions_unit' => 'dimensions_unit',
    'barcode' => 'barcode',
    'upc' => 'upc',
    'ean' => 'ean',
    'isbn' => 'isbn',
    'gtin' => 'gtin',
    'mpn' => 'mpn',
    'asin' => 'asin',
    'product_reference' => 'product_reference',
    'harmonized_system_code' => 'harmonized_system_code',
    'country_of_origin' => 'country_of_origin',
    'manufacturer' => 'manufacturer',
    'manufacturer_id' => 'manufacturer_id',
    'manufacturer_info' => 'manufacturer_info',
    'brand_name' => 'brand_name',
    'image_url' => 'image_url',
    'image_name' => 'image_name',
    'additional_image_urls' => 'additional_image_urls',
    'files' => 'files',
    'size_chart' => 'size_chart',
    'related_products_ids' => 'related_products_ids',
    'up_sell_products_ids' => 'up_sell_products_ids',
    'cross_sell_products_ids' => 'cross_sell_products_ids',
    'attribute_set_name' => 'attribute_set_name',
    'attribute_name' => 'attribute_name',
    'search_keywords' => 'search_keywords',
    'tags' => 'tags',
    'materials' => 'materials',
    'certifications' => 'certifications',
    'specifics' => 'specifics',
    'avail_from' => 'avail_from',
    'sprice_create' => 'sprice_create',
    'sprice_modified' => 'sprice_modified',
    'sprice_expire' => 'sprice_expire',
    'created_at' => 'created_at',
    'auto_renew' => 'auto_renew',
    'when_made' => 'when_made',
    'meta_title' => 'meta_title',
    'meta_keywords' => 'meta_keywords',
    'meta_description' => 'meta_description',
    'url' => 'url',
    'seo_url' => 'seo_url',
    'tax_class_id' => 'tax_class_id',
    'taxable' => 'taxable',
    'sales_tax' => 'sales_tax',
    'condition' => 'condition',
    'condition_description' => 'condition_description',
    'allow_display_condition' => 'allow_display_condition',
    'payment_methods' => 'payment_methods',
    'paypal_email' => 'paypal_email',
    'shipping_template_id' => 'shipping_template_id',
    'shipping_details' => 'shipping_details',
    'is_free_shipping' => 'is_free_shipping',
    'delivery_code' => 'delivery_code',
    'delivery_type' => 'delivery_type',
    'delivery_time' => 'delivery_time',
    'delivery_option_ids' => 'delivery_option_ids',
    'package_details' => 'package_details',
    'logistic_info' => 'logistic_info',
    'listing_duration' => 'listing_duration',
    'listing_type' => 'listing_type',
    'category_type' => 'category_type',
    'return_accepted' => 'return_accepted',
    'seller_profiles' => 'seller_profiles',
    'auction_confidentiality_level' => 'auction_confidentiality_level',
    'best_offer' => 'best_offer',
    'production_partner_ids' => 'production_partner_ids',
    'marketplace_item_properties' => 'marketplace_item_properties',
    'clear_cache' => 'clear_cache',
    'viewed_count' => 'viewed_count',
    'ordered_count' => 'ordered_count',
    'shop_section_id' => 'shop_section_id',
    'return_policy_id' => 'return_policy_id',
    'personalization_details' => 'personalization_details'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
