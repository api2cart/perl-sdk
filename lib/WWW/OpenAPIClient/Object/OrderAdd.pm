=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::OrderAdd;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use WWW::OpenAPIClient::Object::OrderAddNoteAttributesInner;
use WWW::OpenAPIClient::Object::OrderAddOrderItemInner;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            my $_json_attribute = $self->attribute_map->{$_key};
            my $_type = $self->openapi_types->{$_key};
            my $_value = $self->{$_key};
            if ($_type =~ /^array\[(.+)\]$/i) { # array
                my $_subclass = $1;
                $_data->{$_json_attribute} =  [ map { $self->_to_json_primitives($_subclass, $_) } @$_value ];
            } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
                my $_subclass = $1;
                my %_hash = ();
                while (my($_key, $_element) = each %{$_value}) {
                    $_hash{$_key} = $self->_to_json_primitives($_subclass, $_element);
                }
                $_data->{$_json_attribute} = \%_hash;
            } elsif ( grep( /^$_type$/, ('int', 'double', 'string', 'boolean', 'DATE', 'DATE_TIME'))) {
                $_data->{$_json_attribute} = $self->_to_json_primitives($_type, $_value);
            } else {
                $_data->{$_json_attribute} = $_value;
            }
        }
    }

    return $_data;
}

# to_json non-array data
sub _to_json_primitives {
    my ($self, $type, $data) = @_;
    if ( grep( /^$type$/, ('int', 'double'))) {
        # https://metacpan.org/pod/JSON#simple-scalars
        # numify it, ensuring it will be dumped as a number
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        # https://metacpan.org/pod/JSON#simple-scalars
        # stringified
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        # https://metacpan.org/pod/JSON#JSON::true,-JSON::false,-JSON::null
        return $data ? \1 : \0;
    } elsif ($type eq 'DATE') {
        return undef unless defined $data;
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Eymd($optional_separator),-$dt-%3Emdy(...),-$dt-%3Edmy(...)
            return $data->ymd;
        }
        return $data .q();
    } elsif ($type eq 'DATE_TIME') {
        return undef unless defined $data;
        # the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Erfc3339
            return $data->rfc3339;
        }
        return $data .q();
    } else { # hash (model),  In this case, the TO_JSON of the $data object is executed
        return $data;
    }
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if (grep( /^$type$/ , ('DATE_TIME', 'DATE'))) {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double'))) {
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        return !!$data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => '',
                                  class => 'OrderAdd',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'id' => {
        datatype => 'string',
        base_name => 'id',
        description => 'Defines order&#39;s id',
        format => '',
        read_only => '',
            },
    'order_id' => {
        datatype => 'string',
        base_name => 'order_id',
        description => 'Defines the order id if it is supported by the cart',
        format => '',
        read_only => '',
            },
    'store_id' => {
        datatype => 'string',
        base_name => 'store_id',
        description => 'Defines store id where the order should be assigned',
        format => '',
        read_only => '',
            },
    'channel_id' => {
        datatype => 'string',
        base_name => 'channel_id',
        description => 'Channel ID',
        format => '',
        read_only => '',
            },
    'order_status' => {
        datatype => 'string',
        base_name => 'order_status',
        description => 'Defines order status.',
        format => '',
        read_only => '',
            },
    'send_notifications' => {
        datatype => 'boolean',
        base_name => 'send_notifications',
        description => 'Send notifications to customer after order was created',
        format => '',
        read_only => '',
            },
    'send_admin_notifications' => {
        datatype => 'boolean',
        base_name => 'send_admin_notifications',
        description => 'Notify admin when new order was created.',
        format => '',
        read_only => '',
            },
    'customer_email' => {
        datatype => 'string',
        base_name => 'customer_email',
        description => 'Defines the customer specified by email for whom order has to be created',
        format => '',
        read_only => '',
            },
    'bill_first_name' => {
        datatype => 'string',
        base_name => 'bill_first_name',
        description => 'Specifies billing first name',
        format => '',
        read_only => '',
            },
    'bill_last_name' => {
        datatype => 'string',
        base_name => 'bill_last_name',
        description => 'Specifies billing last name',
        format => '',
        read_only => '',
            },
    'bill_address_1' => {
        datatype => 'string',
        base_name => 'bill_address_1',
        description => 'Specifies first billing address',
        format => '',
        read_only => '',
            },
    'bill_city' => {
        datatype => 'string',
        base_name => 'bill_city',
        description => 'Specifies billing city',
        format => '',
        read_only => '',
            },
    'bill_postcode' => {
        datatype => 'string',
        base_name => 'bill_postcode',
        description => 'Specifies billing postcode',
        format => '',
        read_only => '',
            },
    'bill_state' => {
        datatype => 'string',
        base_name => 'bill_state',
        description => 'Specifies billing state code',
        format => '',
        read_only => '',
            },
    'bill_country' => {
        datatype => 'string',
        base_name => 'bill_country',
        description => 'Specifies billing country code',
        format => '',
        read_only => '',
            },
    'shipp_first_name' => {
        datatype => 'string',
        base_name => 'shipp_first_name',
        description => 'Specifies shipping first name',
        format => '',
        read_only => '',
            },
    'shipp_last_name' => {
        datatype => 'string',
        base_name => 'shipp_last_name',
        description => 'Specifies shipping last name',
        format => '',
        read_only => '',
            },
    'shipp_address_1' => {
        datatype => 'string',
        base_name => 'shipp_address_1',
        description => 'Specifies first shipping address',
        format => '',
        read_only => '',
            },
    'shipp_city' => {
        datatype => 'string',
        base_name => 'shipp_city',
        description => 'Specifies shipping city',
        format => '',
        read_only => '',
            },
    'shipp_postcode' => {
        datatype => 'string',
        base_name => 'shipp_postcode',
        description => 'Specifies shipping postcode',
        format => '',
        read_only => '',
            },
    'shipp_state' => {
        datatype => 'string',
        base_name => 'shipp_state',
        description => 'Specifies shipping state code',
        format => '',
        read_only => '',
            },
    'shipp_country' => {
        datatype => 'string',
        base_name => 'shipp_country',
        description => 'Specifies shipping country code',
        format => '',
        read_only => '',
            },
    'total_price' => {
        datatype => 'double',
        base_name => 'total_price',
        description => 'Defines order&#39;s total price',
        format => '',
        read_only => '',
            },
    'date' => {
        datatype => 'string',
        base_name => 'date',
        description => 'Specifies an order creation date in format Y-m-d H:i:s',
        format => '',
        read_only => '',
            },
    'order_payment_method' => {
        datatype => 'string',
        base_name => 'order_payment_method',
        description => 'Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39;',
        format => '',
        read_only => '',
            },
    'transaction_id' => {
        datatype => 'string',
        base_name => 'transaction_id',
        description => 'Payment transaction id',
        format => '',
        read_only => '',
            },
    'order_shipping_method' => {
        datatype => 'string',
        base_name => 'order_shipping_method',
        description => 'Defines order shipping method',
        format => '',
        read_only => '',
            },
    'currency' => {
        datatype => 'string',
        base_name => 'currency',
        description => 'Currency code of order',
        format => '',
        read_only => '',
            },
    'bill_address_2' => {
        datatype => 'string',
        base_name => 'bill_address_2',
        description => 'Specifies second billing address',
        format => '',
        read_only => '',
            },
    'bill_company' => {
        datatype => 'string',
        base_name => 'bill_company',
        description => 'Specifies billing company',
        format => '',
        read_only => '',
            },
    'bill_phone' => {
        datatype => 'string',
        base_name => 'bill_phone',
        description => 'Specifies billing phone',
        format => '',
        read_only => '',
            },
    'bill_fax' => {
        datatype => 'string',
        base_name => 'bill_fax',
        description => 'Specifies billing fax',
        format => '',
        read_only => '',
            },
    'comment' => {
        datatype => 'string',
        base_name => 'comment',
        description => 'Specifies order comment',
        format => '',
        read_only => '',
            },
    'admin_comment' => {
        datatype => 'string',
        base_name => 'admin_comment',
        description => 'Specifies admin&#39;s order comment',
        format => '',
        read_only => '',
            },
    'admin_private_comment' => {
        datatype => 'string',
        base_name => 'admin_private_comment',
        description => 'Specifies private admin&#39;s order comment',
        format => '',
        read_only => '',
            },
    'customer_first_name' => {
        datatype => 'string',
        base_name => 'customer_first_name',
        description => 'Specifies customer&#39;s first name',
        format => '',
        read_only => '',
            },
    'customer_last_name' => {
        datatype => 'string',
        base_name => 'customer_last_name',
        description => 'Specifies customer’s last name',
        format => '',
        read_only => '',
            },
    'customer_phone' => {
        datatype => 'string',
        base_name => 'customer_phone',
        description => 'Specifies customer’s phone',
        format => '',
        read_only => '',
            },
    'customer_country' => {
        datatype => 'string',
        base_name => 'customer_country',
        description => 'Specifies customer&#39;s address ISO code or name of country',
        format => '',
        read_only => '',
            },
    'customer_birthday' => {
        datatype => 'string',
        base_name => 'customer_birthday',
        description => 'Specifies customer’s birthday',
        format => '',
        read_only => '',
            },
    'customer_fax' => {
        datatype => 'string',
        base_name => 'customer_fax',
        description => 'Specifies customer’s fax',
        format => '',
        read_only => '',
            },
    'shipp_address_2' => {
        datatype => 'string',
        base_name => 'shipp_address_2',
        description => 'Specifies second address line of a shipping street address',
        format => '',
        read_only => '',
            },
    'shipp_company' => {
        datatype => 'string',
        base_name => 'shipp_company',
        description => 'Specifies shipping company',
        format => '',
        read_only => '',
            },
    'shipp_phone' => {
        datatype => 'string',
        base_name => 'shipp_phone',
        description => 'Specifies shipping phone',
        format => '',
        read_only => '',
            },
    'shipp_fax' => {
        datatype => 'string',
        base_name => 'shipp_fax',
        description => 'Specifies shipping fax',
        format => '',
        read_only => '',
            },
    'date_modified' => {
        datatype => 'string',
        base_name => 'date_modified',
        description => 'Specifies order&#39;s  modification date',
        format => '',
        read_only => '',
            },
    'date_finished' => {
        datatype => 'string',
        base_name => 'date_finished',
        description => 'Specifies order&#39;s  finished date',
        format => '',
        read_only => '',
            },
    'subtotal_price' => {
        datatype => 'double',
        base_name => 'subtotal_price',
        description => 'Total price of all ordered products multiplied by their number, excluding tax, shipping price and discounts',
        format => '',
        read_only => '',
            },
    'tax_price' => {
        datatype => 'double',
        base_name => 'tax_price',
        description => 'The value of tax cost for order',
        format => '',
        read_only => '',
            },
    'prices_inc_tax' => {
        datatype => 'boolean',
        base_name => 'prices_inc_tax',
        description => 'Indicates whether prices and subtotal includes tax.',
        format => '',
        read_only => '',
            },
    'shipping_price' => {
        datatype => 'double',
        base_name => 'shipping_price',
        description => 'Specifies order&#39;s shipping price',
        format => '',
        read_only => '',
            },
    'shipping_tax' => {
        datatype => 'double',
        base_name => 'shipping_tax',
        description => 'Specifies order&#39;s shipping price tax',
        format => '',
        read_only => '',
            },
    'carrier_id' => {
        datatype => 'string',
        base_name => 'carrier_id',
        description => 'Defines tracking carrier id',
        format => '',
        read_only => '',
            },
    'warehouse_id' => {
        datatype => 'string',
        base_name => 'warehouse_id',
        description => 'This parameter is used for selecting a warehouse where you need to set/modify a product quantity.',
        format => '',
        read_only => '',
            },
    'discount' => {
        datatype => 'double',
        base_name => 'discount',
        description => 'Specifies order&#39;s discount',
        format => '',
        read_only => '',
            },
    'coupon_discount' => {
        datatype => 'double',
        base_name => 'coupon_discount',
        description => 'Specifies order&#39;s coupon discount',
        format => '',
        read_only => '',
            },
    'coupons' => {
        datatype => 'ARRAY[string]',
        base_name => 'coupons',
        description => 'Coupons that will be applied to order',
        format => '',
        read_only => '',
            },
    'gift_certificate_discount' => {
        datatype => 'double',
        base_name => 'gift_certificate_discount',
        description => 'Discounts for order with gift certificates',
        format => '',
        read_only => '',
            },
    'fulfillment_status' => {
        datatype => 'string',
        base_name => 'fulfillment_status',
        description => 'Create order with fulfillment status',
        format => '',
        read_only => '',
            },
    'financial_status' => {
        datatype => 'string',
        base_name => 'financial_status',
        description => 'Create order with financial status',
        format => '',
        read_only => '',
            },
    'total_paid' => {
        datatype => 'double',
        base_name => 'total_paid',
        description => 'Defines total paid amount for the order',
        format => '',
        read_only => '',
            },
    'external_source' => {
        datatype => 'string',
        base_name => 'external_source',
        description => 'Identifying the system used to generate the order',
        format => '',
        read_only => '',
            },
    'tags' => {
        datatype => 'string',
        base_name => 'tags',
        description => 'Order tags',
        format => '',
        read_only => '',
            },
    'inventory_behaviour' => {
        datatype => 'string',
        base_name => 'inventory_behaviour',
        description => 'The behaviour to use when updating inventory.&lt;hr&gt;&lt;div style&#x3D;\&quot;font-style:normal\&quot;&gt;Values description:&lt;div style&#x3D;\&quot;margin-left: 2%; padding-top: 2%\&quot;&gt;&lt;div style&#x3D;\&quot;font-size:85%\&quot;&gt;&lt;b&gt;bypass&lt;/b&gt; &#x3D; Do not claim inventory &lt;/br&gt;&lt;/br&gt;&lt;b&gt;decrement_ignoring_policy&lt;/b&gt; &#x3D; Ignore the product&#39;s &lt;/br&gt; inventory policy and claim amounts&lt;/br&gt;&lt;/br&gt;&lt;b&gt;decrement_obeying_policy&lt;/b&gt; &#x3D;  Obey the product&#39;s &lt;/br&gt; inventory policy.&lt;/br&gt;&lt;/br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;',
        format => '',
        read_only => '',
            },
    'create_invoice' => {
        datatype => 'boolean',
        base_name => 'create_invoice',
        description => 'Defines whether the invoice is created automatically along with the order',
        format => '',
        read_only => '',
            },
    'note_attributes' => {
        datatype => 'ARRAY[OrderAddNoteAttributesInner]',
        base_name => 'note_attributes',
        description => 'Defines note attributes',
        format => '',
        read_only => '',
            },
    'total_weight' => {
        datatype => 'int',
        base_name => 'total_weight',
        description => 'Defines the sum of all line item weights in grams for the order',
        format => '',
        read_only => '',
            },
    'clear_cache' => {
        datatype => 'boolean',
        base_name => 'clear_cache',
        description => 'Is cache clear required',
        format => '',
        read_only => '',
            },
    'origin' => {
        datatype => 'string',
        base_name => 'origin',
        description => 'The source of the order',
        format => '',
        read_only => '',
            },
    'order_item' => {
        datatype => 'ARRAY[OrderAddOrderItemInner]',
        base_name => 'order_item',
        description => '',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'id' => 'string',
    'order_id' => 'string',
    'store_id' => 'string',
    'channel_id' => 'string',
    'order_status' => 'string',
    'send_notifications' => 'boolean',
    'send_admin_notifications' => 'boolean',
    'customer_email' => 'string',
    'bill_first_name' => 'string',
    'bill_last_name' => 'string',
    'bill_address_1' => 'string',
    'bill_city' => 'string',
    'bill_postcode' => 'string',
    'bill_state' => 'string',
    'bill_country' => 'string',
    'shipp_first_name' => 'string',
    'shipp_last_name' => 'string',
    'shipp_address_1' => 'string',
    'shipp_city' => 'string',
    'shipp_postcode' => 'string',
    'shipp_state' => 'string',
    'shipp_country' => 'string',
    'total_price' => 'double',
    'date' => 'string',
    'order_payment_method' => 'string',
    'transaction_id' => 'string',
    'order_shipping_method' => 'string',
    'currency' => 'string',
    'bill_address_2' => 'string',
    'bill_company' => 'string',
    'bill_phone' => 'string',
    'bill_fax' => 'string',
    'comment' => 'string',
    'admin_comment' => 'string',
    'admin_private_comment' => 'string',
    'customer_first_name' => 'string',
    'customer_last_name' => 'string',
    'customer_phone' => 'string',
    'customer_country' => 'string',
    'customer_birthday' => 'string',
    'customer_fax' => 'string',
    'shipp_address_2' => 'string',
    'shipp_company' => 'string',
    'shipp_phone' => 'string',
    'shipp_fax' => 'string',
    'date_modified' => 'string',
    'date_finished' => 'string',
    'subtotal_price' => 'double',
    'tax_price' => 'double',
    'prices_inc_tax' => 'boolean',
    'shipping_price' => 'double',
    'shipping_tax' => 'double',
    'carrier_id' => 'string',
    'warehouse_id' => 'string',
    'discount' => 'double',
    'coupon_discount' => 'double',
    'coupons' => 'ARRAY[string]',
    'gift_certificate_discount' => 'double',
    'fulfillment_status' => 'string',
    'financial_status' => 'string',
    'total_paid' => 'double',
    'external_source' => 'string',
    'tags' => 'string',
    'inventory_behaviour' => 'string',
    'create_invoice' => 'boolean',
    'note_attributes' => 'ARRAY[OrderAddNoteAttributesInner]',
    'total_weight' => 'int',
    'clear_cache' => 'boolean',
    'origin' => 'string',
    'order_item' => 'ARRAY[OrderAddOrderItemInner]'
} );

__PACKAGE__->attribute_map( {
    'id' => 'id',
    'order_id' => 'order_id',
    'store_id' => 'store_id',
    'channel_id' => 'channel_id',
    'order_status' => 'order_status',
    'send_notifications' => 'send_notifications',
    'send_admin_notifications' => 'send_admin_notifications',
    'customer_email' => 'customer_email',
    'bill_first_name' => 'bill_first_name',
    'bill_last_name' => 'bill_last_name',
    'bill_address_1' => 'bill_address_1',
    'bill_city' => 'bill_city',
    'bill_postcode' => 'bill_postcode',
    'bill_state' => 'bill_state',
    'bill_country' => 'bill_country',
    'shipp_first_name' => 'shipp_first_name',
    'shipp_last_name' => 'shipp_last_name',
    'shipp_address_1' => 'shipp_address_1',
    'shipp_city' => 'shipp_city',
    'shipp_postcode' => 'shipp_postcode',
    'shipp_state' => 'shipp_state',
    'shipp_country' => 'shipp_country',
    'total_price' => 'total_price',
    'date' => 'date',
    'order_payment_method' => 'order_payment_method',
    'transaction_id' => 'transaction_id',
    'order_shipping_method' => 'order_shipping_method',
    'currency' => 'currency',
    'bill_address_2' => 'bill_address_2',
    'bill_company' => 'bill_company',
    'bill_phone' => 'bill_phone',
    'bill_fax' => 'bill_fax',
    'comment' => 'comment',
    'admin_comment' => 'admin_comment',
    'admin_private_comment' => 'admin_private_comment',
    'customer_first_name' => 'customer_first_name',
    'customer_last_name' => 'customer_last_name',
    'customer_phone' => 'customer_phone',
    'customer_country' => 'customer_country',
    'customer_birthday' => 'customer_birthday',
    'customer_fax' => 'customer_fax',
    'shipp_address_2' => 'shipp_address_2',
    'shipp_company' => 'shipp_company',
    'shipp_phone' => 'shipp_phone',
    'shipp_fax' => 'shipp_fax',
    'date_modified' => 'date_modified',
    'date_finished' => 'date_finished',
    'subtotal_price' => 'subtotal_price',
    'tax_price' => 'tax_price',
    'prices_inc_tax' => 'prices_inc_tax',
    'shipping_price' => 'shipping_price',
    'shipping_tax' => 'shipping_tax',
    'carrier_id' => 'carrier_id',
    'warehouse_id' => 'warehouse_id',
    'discount' => 'discount',
    'coupon_discount' => 'coupon_discount',
    'coupons' => 'coupons',
    'gift_certificate_discount' => 'gift_certificate_discount',
    'fulfillment_status' => 'fulfillment_status',
    'financial_status' => 'financial_status',
    'total_paid' => 'total_paid',
    'external_source' => 'external_source',
    'tags' => 'tags',
    'inventory_behaviour' => 'inventory_behaviour',
    'create_invoice' => 'create_invoice',
    'note_attributes' => 'note_attributes',
    'total_weight' => 'total_weight',
    'clear_cache' => 'clear_cache',
    'origin' => 'origin',
    'order_item' => 'order_item'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
