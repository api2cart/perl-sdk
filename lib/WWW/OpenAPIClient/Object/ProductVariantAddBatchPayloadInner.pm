=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::ProductVariantAddBatchPayloadInner;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use WWW::OpenAPIClient::Object::ProductAddBatchPayloadInnerImagesInner;
use WWW::OpenAPIClient::Object::ProductUpdateBatchPayloadInnerAdvancedPricesInner;
use WWW::OpenAPIClient::Object::ProductVariantAddBatchPayloadInnerCombinationInner;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            my $_json_attribute = $self->attribute_map->{$_key};
            my $_type = $self->openapi_types->{$_key};
            my $_value = $self->{$_key};
            if ($_type =~ /^array\[(.+)\]$/i) { # array
                my $_subclass = $1;
                $_data->{$_json_attribute} =  [ map { $self->_to_json_primitives($_subclass, $_) } @$_value ];
            } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
                my $_subclass = $1;
                my %_hash = ();
                while (my($_key, $_element) = each %{$_value}) {
                    $_hash{$_key} = $self->_to_json_primitives($_subclass, $_element);
                }
                $_data->{$_json_attribute} = \%_hash;
            } elsif ( grep( /^$_type$/, ('int', 'double', 'string', 'boolean', 'DATE', 'DATE_TIME'))) {
                $_data->{$_json_attribute} = $self->_to_json_primitives($_type, $_value);
            } else {
                $_data->{$_json_attribute} = $_value;
            }
        }
    }

    return $_data;
}

# to_json non-array data
sub _to_json_primitives {
    my ($self, $type, $data) = @_;
    if ( grep( /^$type$/, ('int', 'double'))) {
        # https://metacpan.org/pod/JSON#simple-scalars
        # numify it, ensuring it will be dumped as a number
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        # https://metacpan.org/pod/JSON#simple-scalars
        # stringified
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        # https://metacpan.org/pod/JSON#JSON::true,-JSON::false,-JSON::null
        return $data ? \1 : \0;
    } elsif ($type eq 'DATE') {
        return undef unless defined $data;
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Eymd($optional_separator),-$dt-%3Emdy(...),-$dt-%3Edmy(...)
            return $data->ymd;
        }
        return $data .q();
    } elsif ($type eq 'DATE_TIME') {
        return undef unless defined $data;
        # the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Erfc3339
            return $data->rfc3339;
        }
        return $data .q();
    } else { # hash (model),  In this case, the TO_JSON of the $data object is executed
        return $data;
    }
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if (grep( /^$type$/ , ('DATE_TIME', 'DATE'))) {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double'))) {
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        return !!$data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => '',
                                  class => 'ProductVariantAddBatchPayloadInner',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'product_id' => {
        datatype => 'string',
        base_name => 'product_id',
        description => '',
        format => '',
        read_only => '',
            },
    'combination' => {
        datatype => 'ARRAY[ProductVariantAddBatchPayloadInnerCombinationInner]',
        base_name => 'combination',
        description => 'A unique combination that contains an array of options and their values, which form a variation.',
        format => '',
        read_only => '',
            },
    'name' => {
        datatype => 'string',
        base_name => 'name',
        description => '',
        format => '',
        read_only => '',
            },
    'description' => {
        datatype => 'string',
        base_name => 'description',
        description => '',
        format => '',
        read_only => '',
            },
    'short_description' => {
        datatype => 'string',
        base_name => 'short_description',
        description => '',
        format => '',
        read_only => '',
            },
    'sku' => {
        datatype => 'string',
        base_name => 'sku',
        description => '',
        format => '',
        read_only => '',
            },
    'model' => {
        datatype => 'string',
        base_name => 'model',
        description => '',
        format => '',
        read_only => '',
            },
    'price' => {
        datatype => 'double',
        base_name => 'price',
        description => '',
        format => '',
        read_only => '',
            },
    'old_price' => {
        datatype => 'double',
        base_name => 'old_price',
        description => '',
        format => '',
        read_only => '',
            },
    'cost_price' => {
        datatype => 'double',
        base_name => 'cost_price',
        description => '',
        format => '',
        read_only => '',
            },
    'special_price' => {
        datatype => 'double',
        base_name => 'special_price',
        description => '',
        format => '',
        read_only => '',
            },
    'sprice_create' => {
        datatype => 'string',
        base_name => 'sprice_create',
        description => '',
        format => '',
        read_only => '',
            },
    'sprice_expire' => {
        datatype => 'string',
        base_name => 'sprice_expire',
        description => '',
        format => '',
        read_only => '',
            },
    'advanced_prices' => {
        datatype => 'ARRAY[ProductUpdateBatchPayloadInnerAdvancedPricesInner]',
        base_name => 'advanced_prices',
        description => '',
        format => '',
        read_only => '',
            },
    'meta_title' => {
        datatype => 'double',
        base_name => 'meta_title',
        description => '',
        format => '',
        read_only => '',
            },
    'meta_description' => {
        datatype => 'double',
        base_name => 'meta_description',
        description => '',
        format => '',
        read_only => '',
            },
    'meta_keywords' => {
        datatype => 'ARRAY[string]',
        base_name => 'meta_keywords',
        description => '',
        format => '',
        read_only => '',
            },
    'categories_ids' => {
        datatype => 'ARRAY[string]',
        base_name => 'categories_ids',
        description => '',
        format => '',
        read_only => '',
            },
    'stores_ids' => {
        datatype => 'ARRAY[string]',
        base_name => 'stores_ids',
        description => '',
        format => '',
        read_only => '',
            },
    'weight' => {
        datatype => 'double',
        base_name => 'weight',
        description => '',
        format => '',
        read_only => '',
            },
    'width' => {
        datatype => 'double',
        base_name => 'width',
        description => '',
        format => '',
        read_only => '',
            },
    'height' => {
        datatype => 'double',
        base_name => 'height',
        description => '',
        format => '',
        read_only => '',
            },
    'length' => {
        datatype => 'double',
        base_name => 'length',
        description => '',
        format => '',
        read_only => '',
            },
    'weight_unit' => {
        datatype => 'string',
        base_name => 'weight_unit',
        description => '',
        format => '',
        read_only => '',
            },
    'warehouse_id' => {
        datatype => 'string',
        base_name => 'warehouse_id',
        description => '',
        format => '',
        read_only => '',
            },
    'quantity' => {
        datatype => 'double',
        base_name => 'quantity',
        description => '',
        format => '',
        read_only => '',
            },
    'manage_stock' => {
        datatype => 'boolean',
        base_name => 'manage_stock',
        description => '',
        format => '',
        read_only => '',
            },
    'in_stock' => {
        datatype => 'boolean',
        base_name => 'in_stock',
        description => '',
        format => '',
        read_only => '',
            },
    'store_id' => {
        datatype => 'string',
        base_name => 'store_id',
        description => '',
        format => '',
        read_only => '',
            },
    'lang_id' => {
        datatype => 'string',
        base_name => 'lang_id',
        description => '',
        format => '',
        read_only => '',
            },
    'tax_class_id' => {
        datatype => 'string',
        base_name => 'tax_class_id',
        description => '',
        format => '',
        read_only => '',
            },
    'backorder_status' => {
        datatype => 'string',
        base_name => 'backorder_status',
        description => '',
        format => '',
        read_only => '',
            },
    'status' => {
        datatype => 'string',
        base_name => 'status',
        description => '',
        format => '',
        read_only => '',
            },
    'visible' => {
        datatype => 'string',
        base_name => 'visible',
        description => '',
        format => '',
        read_only => '',
            },
    'is_virtual' => {
        datatype => 'boolean',
        base_name => 'is_virtual',
        description => '',
        format => '',
        read_only => '',
            },
    'downloadable' => {
        datatype => 'boolean',
        base_name => 'downloadable',
        description => '',
        format => '',
        read_only => '',
            },
    'is_default' => {
        datatype => 'boolean',
        base_name => 'is_default',
        description => '',
        format => '',
        read_only => '',
            },
    'upc' => {
        datatype => 'string',
        base_name => 'upc',
        description => '',
        format => '',
        read_only => '',
            },
    'isbn' => {
        datatype => 'string',
        base_name => 'isbn',
        description => '',
        format => '',
        read_only => '',
            },
    'mpn' => {
        datatype => 'string',
        base_name => 'mpn',
        description => '',
        format => '',
        read_only => '',
            },
    'ean' => {
        datatype => 'string',
        base_name => 'ean',
        description => '',
        format => '',
        read_only => '',
            },
    'barcode' => {
        datatype => 'string',
        base_name => 'barcode',
        description => '',
        format => '',
        read_only => '',
            },
    'available_for_sale' => {
        datatype => 'boolean',
        base_name => 'available_for_sale',
        description => '',
        format => '',
        read_only => '',
            },
    'is_free_shipping' => {
        datatype => 'boolean',
        base_name => 'is_free_shipping',
        description => '',
        format => '',
        read_only => '',
            },
    'taxable' => {
        datatype => 'boolean',
        base_name => 'taxable',
        description => '',
        format => '',
        read_only => '',
            },
    'seo_url' => {
        datatype => 'string',
        base_name => 'seo_url',
        description => '',
        format => '',
        read_only => '',
            },
    'manufacturer_id' => {
        datatype => 'string',
        base_name => 'manufacturer_id',
        description => '',
        format => '',
        read_only => '',
            },
    'harmonized_system_code' => {
        datatype => 'string',
        base_name => 'harmonized_system_code',
        description => '',
        format => '',
        read_only => '',
            },
    'marketplace_item_properties' => {
        datatype => 'object',
        base_name => 'marketplace_item_properties',
        description => '',
        format => '',
        read_only => '',
            },
    'images' => {
        datatype => 'ARRAY[ProductAddBatchPayloadInnerImagesInner]',
        base_name => 'images',
        description => '',
        format => '',
        read_only => '',
            },
    'product_images_ids' => {
        datatype => 'ARRAY[string]',
        base_name => 'product_images_ids',
        description => '',
        format => '',
        read_only => '',
            },
    'related_products_ids' => {
        datatype => 'ARRAY[string]',
        base_name => 'related_products_ids',
        description => '',
        format => '',
        read_only => '',
            },
    'up_sell_products_ids' => {
        datatype => 'ARRAY[string]',
        base_name => 'up_sell_products_ids',
        description => '',
        format => '',
        read_only => '',
            },
    'cross_sell_products_ids' => {
        datatype => 'ARRAY[string]',
        base_name => 'cross_sell_products_ids',
        description => '',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'product_id' => 'string',
    'combination' => 'ARRAY[ProductVariantAddBatchPayloadInnerCombinationInner]',
    'name' => 'string',
    'description' => 'string',
    'short_description' => 'string',
    'sku' => 'string',
    'model' => 'string',
    'price' => 'double',
    'old_price' => 'double',
    'cost_price' => 'double',
    'special_price' => 'double',
    'sprice_create' => 'string',
    'sprice_expire' => 'string',
    'advanced_prices' => 'ARRAY[ProductUpdateBatchPayloadInnerAdvancedPricesInner]',
    'meta_title' => 'double',
    'meta_description' => 'double',
    'meta_keywords' => 'ARRAY[string]',
    'categories_ids' => 'ARRAY[string]',
    'stores_ids' => 'ARRAY[string]',
    'weight' => 'double',
    'width' => 'double',
    'height' => 'double',
    'length' => 'double',
    'weight_unit' => 'string',
    'warehouse_id' => 'string',
    'quantity' => 'double',
    'manage_stock' => 'boolean',
    'in_stock' => 'boolean',
    'store_id' => 'string',
    'lang_id' => 'string',
    'tax_class_id' => 'string',
    'backorder_status' => 'string',
    'status' => 'string',
    'visible' => 'string',
    'is_virtual' => 'boolean',
    'downloadable' => 'boolean',
    'is_default' => 'boolean',
    'upc' => 'string',
    'isbn' => 'string',
    'mpn' => 'string',
    'ean' => 'string',
    'barcode' => 'string',
    'available_for_sale' => 'boolean',
    'is_free_shipping' => 'boolean',
    'taxable' => 'boolean',
    'seo_url' => 'string',
    'manufacturer_id' => 'string',
    'harmonized_system_code' => 'string',
    'marketplace_item_properties' => 'object',
    'images' => 'ARRAY[ProductAddBatchPayloadInnerImagesInner]',
    'product_images_ids' => 'ARRAY[string]',
    'related_products_ids' => 'ARRAY[string]',
    'up_sell_products_ids' => 'ARRAY[string]',
    'cross_sell_products_ids' => 'ARRAY[string]'
} );

__PACKAGE__->attribute_map( {
    'product_id' => 'product_id',
    'combination' => 'combination',
    'name' => 'name',
    'description' => 'description',
    'short_description' => 'short_description',
    'sku' => 'sku',
    'model' => 'model',
    'price' => 'price',
    'old_price' => 'old_price',
    'cost_price' => 'cost_price',
    'special_price' => 'special_price',
    'sprice_create' => 'sprice_create',
    'sprice_expire' => 'sprice_expire',
    'advanced_prices' => 'advanced_prices',
    'meta_title' => 'meta_title',
    'meta_description' => 'meta_description',
    'meta_keywords' => 'meta_keywords',
    'categories_ids' => 'categories_ids',
    'stores_ids' => 'stores_ids',
    'weight' => 'weight',
    'width' => 'width',
    'height' => 'height',
    'length' => 'length',
    'weight_unit' => 'weight_unit',
    'warehouse_id' => 'warehouse_id',
    'quantity' => 'quantity',
    'manage_stock' => 'manage_stock',
    'in_stock' => 'in_stock',
    'store_id' => 'store_id',
    'lang_id' => 'lang_id',
    'tax_class_id' => 'tax_class_id',
    'backorder_status' => 'backorder_status',
    'status' => 'status',
    'visible' => 'visible',
    'is_virtual' => 'is_virtual',
    'downloadable' => 'downloadable',
    'is_default' => 'is_default',
    'upc' => 'upc',
    'isbn' => 'isbn',
    'mpn' => 'mpn',
    'ean' => 'ean',
    'barcode' => 'barcode',
    'available_for_sale' => 'available_for_sale',
    'is_free_shipping' => 'is_free_shipping',
    'taxable' => 'taxable',
    'seo_url' => 'seo_url',
    'manufacturer_id' => 'manufacturer_id',
    'harmonized_system_code' => 'harmonized_system_code',
    'marketplace_item_properties' => 'marketplace_item_properties',
    'images' => 'images',
    'product_images_ids' => 'product_images_ids',
    'related_products_ids' => 'related_products_ids',
    'up_sell_products_ids' => 'up_sell_products_ids',
    'cross_sell_products_ids' => 'cross_sell_products_ids'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
