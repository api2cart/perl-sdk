=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::CartApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# cart_bridge
#
# cart.bridge
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'cart_bridge' } = {
        summary => 'cart.bridge',
        params => $params,
        returns => 'CartBridge200Response',
        };
}
# @return CartBridge200Response
#
sub cart_bridge {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.bridge.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartBridge200Response', $response);
    return $_response_object;
}

#
# cart_catalog_price_rules_count
#
# cart.catalog_price_rules.count
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'cart_catalog_price_rules_count' } = {
        summary => 'cart.catalog_price_rules.count',
        params => $params,
        returns => 'CartCatalogPriceRulesCount200Response',
        };
}
# @return CartCatalogPriceRulesCount200Response
#
sub cart_catalog_price_rules_count {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.catalog_price_rules.count.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartCatalogPriceRulesCount200Response', $response);
    return $_response_object;
}

#
# cart_catalog_price_rules_list
#
# cart.catalog_price_rules.list
#
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $ids Retrieves  catalog_price_rules by ids (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,name,description')
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Retrieves  catalog_price_rules by ids',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_catalog_price_rules_list' } = {
        summary => 'cart.catalog_price_rules.list',
        params => $params,
        returns => 'ModelResponseCartCatalogPriceRulesList',
        };
}
# @return ModelResponseCartCatalogPriceRulesList
#
sub cart_catalog_price_rules_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.catalog_price_rules.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseCartCatalogPriceRulesList', $response);
    return $_response_object;
}

#
# cart_clear_cache
#
# cart.clear_cache
#
# @param string $cache_type Defines which cache should be cleared. (required)
{
    my $params = {
    'cache_type' => {
        data_type => 'string',
        description => 'Defines which cache should be cleared.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_clear_cache' } = {
        summary => 'cart.clear_cache',
        params => $params,
        returns => 'CartClearCache200Response',
        };
}
# @return CartClearCache200Response
#
sub cart_clear_cache {
    my ($self, %args) = @_;

    # verify the required parameter 'cache_type' is set
    unless (exists $args{'cache_type'}) {
      croak("Missing the required parameter 'cache_type' when calling cart_clear_cache");
    }

    # parse inputs
    my $_resource_path = '/cart.clear_cache.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'cache_type'}) {
        $query_params->{'cache_type'} = $self->{api_client}->to_query_value($args{'cache_type'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartClearCache200Response', $response);
    return $_response_object;
}

#
# cart_config
#
# cart.config
#
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'store_name,store_url,db_prefix')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_config' } = {
        summary => 'cart.config',
        params => $params,
        returns => 'CartConfig200Response',
        };
}
# @return CartConfig200Response
#
sub cart_config {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.config.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartConfig200Response', $response);
    return $_response_object;
}

#
# cart_config_update
#
# cart.config.update
#
# @param CartConfigUpdate $cart_config_update  (required)
{
    my $params = {
    'cart_config_update' => {
        data_type => 'CartConfigUpdate',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_config_update' } = {
        summary => 'cart.config.update',
        params => $params,
        returns => 'CartConfigUpdate200Response',
        };
}
# @return CartConfigUpdate200Response
#
sub cart_config_update {
    my ($self, %args) = @_;

    # verify the required parameter 'cart_config_update' is set
    unless (exists $args{'cart_config_update'}) {
      croak("Missing the required parameter 'cart_config_update' when calling cart_config_update");
    }

    # parse inputs
    my $_resource_path = '/cart.config.update.json';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'cart_config_update'}) {
        $_body_data = $args{'cart_config_update'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartConfigUpdate200Response', $response);
    return $_response_object;
}

#
# cart_coupon_add
#
# cart.coupon.add
#
# @param CartCouponAdd $cart_coupon_add  (required)
{
    my $params = {
    'cart_coupon_add' => {
        data_type => 'CartCouponAdd',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_coupon_add' } = {
        summary => 'cart.coupon.add',
        params => $params,
        returns => 'CartCouponAdd200Response',
        };
}
# @return CartCouponAdd200Response
#
sub cart_coupon_add {
    my ($self, %args) = @_;

    # verify the required parameter 'cart_coupon_add' is set
    unless (exists $args{'cart_coupon_add'}) {
      croak("Missing the required parameter 'cart_coupon_add' when calling cart_coupon_add");
    }

    # parse inputs
    my $_resource_path = '/cart.coupon.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'cart_coupon_add'}) {
        $_body_data = $args{'cart_coupon_add'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartCouponAdd200Response', $response);
    return $_response_object;
}

#
# cart_coupon_condition_add
#
# cart.coupon.condition.add
#
# @param string $coupon_id Coupon Id (required)
# @param string $entity Defines condition entity type (required)
# @param string $key Defines condition entity attribute key (required)
# @param string $operator Defines condition operator (required)
# @param string $value Defines condition value, can be comma separated according to the operator. (required)
# @param string $store_id Store Id (optional)
# @param string $target Defines condition operator (optional, default to 'coupon_prerequisite')
# @param boolean $include_tax Indicates whether to apply a discount for taxes. (optional, default to false)
# @param boolean $include_shipping Indicates whether to apply a discount for shipping. (optional, default to false)
{
    my $params = {
    'coupon_id' => {
        data_type => 'string',
        description => 'Coupon Id',
        required => '1',
    },
    'entity' => {
        data_type => 'string',
        description => 'Defines condition entity type',
        required => '1',
    },
    'key' => {
        data_type => 'string',
        description => 'Defines condition entity attribute key',
        required => '1',
    },
    'operator' => {
        data_type => 'string',
        description => 'Defines condition operator',
        required => '1',
    },
    'value' => {
        data_type => 'string',
        description => 'Defines condition value, can be comma separated according to the operator.',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'target' => {
        data_type => 'string',
        description => 'Defines condition operator',
        required => '0',
    },
    'include_tax' => {
        data_type => 'boolean',
        description => 'Indicates whether to apply a discount for taxes.',
        required => '0',
    },
    'include_shipping' => {
        data_type => 'boolean',
        description => 'Indicates whether to apply a discount for shipping.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_coupon_condition_add' } = {
        summary => 'cart.coupon.condition.add',
        params => $params,
        returns => 'BasketLiveShippingServiceDelete200Response',
        };
}
# @return BasketLiveShippingServiceDelete200Response
#
sub cart_coupon_condition_add {
    my ($self, %args) = @_;

    # verify the required parameter 'coupon_id' is set
    unless (exists $args{'coupon_id'}) {
      croak("Missing the required parameter 'coupon_id' when calling cart_coupon_condition_add");
    }

    # verify the required parameter 'entity' is set
    unless (exists $args{'entity'}) {
      croak("Missing the required parameter 'entity' when calling cart_coupon_condition_add");
    }

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling cart_coupon_condition_add");
    }

    # verify the required parameter 'operator' is set
    unless (exists $args{'operator'}) {
      croak("Missing the required parameter 'operator' when calling cart_coupon_condition_add");
    }

    # verify the required parameter 'value' is set
    unless (exists $args{'value'}) {
      croak("Missing the required parameter 'value' when calling cart_coupon_condition_add");
    }

    # parse inputs
    my $_resource_path = '/cart.coupon.condition.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'coupon_id'}) {
        $query_params->{'coupon_id'} = $self->{api_client}->to_query_value($args{'coupon_id'});
    }

    # query params
    if ( exists $args{'target'}) {
        $query_params->{'target'} = $self->{api_client}->to_query_value($args{'target'});
    }

    # query params
    if ( exists $args{'entity'}) {
        $query_params->{'entity'} = $self->{api_client}->to_query_value($args{'entity'});
    }

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    # query params
    if ( exists $args{'operator'}) {
        $query_params->{'operator'} = $self->{api_client}->to_query_value($args{'operator'});
    }

    # query params
    if ( exists $args{'value'}) {
        $query_params->{'value'} = $self->{api_client}->to_query_value($args{'value'});
    }

    # query params
    if ( exists $args{'include_tax'}) {
        $query_params->{'include_tax'} = $self->{api_client}->to_query_value($args{'include_tax'});
    }

    # query params
    if ( exists $args{'include_shipping'}) {
        $query_params->{'include_shipping'} = $self->{api_client}->to_query_value($args{'include_shipping'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BasketLiveShippingServiceDelete200Response', $response);
    return $_response_object;
}

#
# cart_coupon_count
#
# cart.coupon.count
#
# @param string $store_id Store Id (optional)
# @param string $date_start_from Filter entity by date_start (greater or equal) (optional)
# @param string $date_start_to Filter entity by date_start (less or equal) (optional)
# @param string $date_end_from Filter entity by date_end (greater or equal) (optional)
# @param string $date_end_to Filter entity by date_end (less or equal) (optional)
# @param boolean $avail Defines category&#39;s visibility status (optional, default to true)
{
    my $params = {
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'date_start_from' => {
        data_type => 'string',
        description => 'Filter entity by date_start (greater or equal)',
        required => '0',
    },
    'date_start_to' => {
        data_type => 'string',
        description => 'Filter entity by date_start (less or equal)',
        required => '0',
    },
    'date_end_from' => {
        data_type => 'string',
        description => 'Filter entity by date_end (greater or equal)',
        required => '0',
    },
    'date_end_to' => {
        data_type => 'string',
        description => 'Filter entity by date_end (less or equal)',
        required => '0',
    },
    'avail' => {
        data_type => 'boolean',
        description => 'Defines category&#39;s visibility status',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_coupon_count' } = {
        summary => 'cart.coupon.count',
        params => $params,
        returns => 'CartCouponCount200Response',
        };
}
# @return CartCouponCount200Response
#
sub cart_coupon_count {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.coupon.count.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'date_start_from'}) {
        $query_params->{'date_start_from'} = $self->{api_client}->to_query_value($args{'date_start_from'});
    }

    # query params
    if ( exists $args{'date_start_to'}) {
        $query_params->{'date_start_to'} = $self->{api_client}->to_query_value($args{'date_start_to'});
    }

    # query params
    if ( exists $args{'date_end_from'}) {
        $query_params->{'date_end_from'} = $self->{api_client}->to_query_value($args{'date_end_from'});
    }

    # query params
    if ( exists $args{'date_end_to'}) {
        $query_params->{'date_end_to'} = $self->{api_client}->to_query_value($args{'date_end_to'});
    }

    # query params
    if ( exists $args{'avail'}) {
        $query_params->{'avail'} = $self->{api_client}->to_query_value($args{'avail'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartCouponCount200Response', $response);
    return $_response_object;
}

#
# cart_coupon_delete
#
# cart.coupon.delete
#
# @param string $id Entity id (required)
# @param string $store_id Store Id (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_coupon_delete' } = {
        summary => 'cart.coupon.delete',
        params => $params,
        returns => 'AttributeDelete200Response',
        };
}
# @return AttributeDelete200Response
#
sub cart_coupon_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling cart_coupon_delete");
    }

    # parse inputs
    my $_resource_path = '/cart.coupon.delete.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeDelete200Response', $response);
    return $_response_object;
}

#
# cart_coupon_list
#
# cart.coupon.list
#
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $coupons_ids Filter coupons by ids (optional)
# @param string $store_id Filter coupons by store id (optional)
# @param string $date_start_from Filter entity by date_start (greater or equal) (optional)
# @param string $date_start_to Filter entity by date_start (less or equal) (optional)
# @param string $date_end_from Filter entity by date_end (greater or equal) (optional)
# @param string $date_end_to Filter entity by date_end (less or equal) (optional)
# @param boolean $avail Filter coupons by avail status (optional)
# @param string $lang_id Language id (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,code,name,description')
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'coupons_ids' => {
        data_type => 'string',
        description => 'Filter coupons by ids',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Filter coupons by store id',
        required => '0',
    },
    'date_start_from' => {
        data_type => 'string',
        description => 'Filter entity by date_start (greater or equal)',
        required => '0',
    },
    'date_start_to' => {
        data_type => 'string',
        description => 'Filter entity by date_start (less or equal)',
        required => '0',
    },
    'date_end_from' => {
        data_type => 'string',
        description => 'Filter entity by date_end (greater or equal)',
        required => '0',
    },
    'date_end_to' => {
        data_type => 'string',
        description => 'Filter entity by date_end (less or equal)',
        required => '0',
    },
    'avail' => {
        data_type => 'boolean',
        description => 'Filter coupons by avail status',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_coupon_list' } = {
        summary => 'cart.coupon.list',
        params => $params,
        returns => 'ModelResponseCartCouponList',
        };
}
# @return ModelResponseCartCouponList
#
sub cart_coupon_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.coupon.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'coupons_ids'}) {
        $query_params->{'coupons_ids'} = $self->{api_client}->to_query_value($args{'coupons_ids'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'date_start_from'}) {
        $query_params->{'date_start_from'} = $self->{api_client}->to_query_value($args{'date_start_from'});
    }

    # query params
    if ( exists $args{'date_start_to'}) {
        $query_params->{'date_start_to'} = $self->{api_client}->to_query_value($args{'date_start_to'});
    }

    # query params
    if ( exists $args{'date_end_from'}) {
        $query_params->{'date_end_from'} = $self->{api_client}->to_query_value($args{'date_end_from'});
    }

    # query params
    if ( exists $args{'date_end_to'}) {
        $query_params->{'date_end_to'} = $self->{api_client}->to_query_value($args{'date_end_to'});
    }

    # query params
    if ( exists $args{'avail'}) {
        $query_params->{'avail'} = $self->{api_client}->to_query_value($args{'avail'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseCartCouponList', $response);
    return $_response_object;
}

#
# cart_create
#
# cart.create
#
# @param CartCreate $cart_create  (required)
{
    my $params = {
    'cart_create' => {
        data_type => 'CartCreate',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_create' } = {
        summary => 'cart.create',
        params => $params,
        returns => 'AccountCartAdd200Response',
        };
}
# @return AccountCartAdd200Response
#
sub cart_create {
    my ($self, %args) = @_;

    # verify the required parameter 'cart_create' is set
    unless (exists $args{'cart_create'}) {
      croak("Missing the required parameter 'cart_create' when calling cart_create");
    }

    # parse inputs
    my $_resource_path = '/cart.create.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'cart_create'}) {
        $_body_data = $args{'cart_create'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AccountCartAdd200Response', $response);
    return $_response_object;
}

#
# cart_delete
#
# cart.delete
#
# @param boolean $delete_bridge Identifies if there is a necessity to delete bridge (optional, default to true)
{
    my $params = {
    'delete_bridge' => {
        data_type => 'boolean',
        description => 'Identifies if there is a necessity to delete bridge',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_delete' } = {
        summary => 'cart.delete',
        params => $params,
        returns => 'CartDelete200Response',
        };
}
# @return CartDelete200Response
#
sub cart_delete {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.delete.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'delete_bridge'}) {
        $query_params->{'delete_bridge'} = $self->{api_client}->to_query_value($args{'delete_bridge'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartDelete200Response', $response);
    return $_response_object;
}

#
# cart_disconnect
#
# cart.disconnect
#
# @param boolean $delete_bridge Identifies if there is a necessity to delete bridge (optional, default to false)
{
    my $params = {
    'delete_bridge' => {
        data_type => 'boolean',
        description => 'Identifies if there is a necessity to delete bridge',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_disconnect' } = {
        summary => 'cart.disconnect',
        params => $params,
        returns => 'CartDisconnect200Response',
        };
}
# @return CartDisconnect200Response
#
sub cart_disconnect {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.disconnect.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'delete_bridge'}) {
        $query_params->{'delete_bridge'} = $self->{api_client}->to_query_value($args{'delete_bridge'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartDisconnect200Response', $response);
    return $_response_object;
}

#
# cart_giftcard_add
#
# cart.giftcard.add
#
# @param double $amount Defines the gift card amount value. (required)
# @param string $code Gift card code (optional)
# @param string $owner_email Gift card owner email (optional)
# @param string $recipient_email Gift card recipient email (optional)
# @param string $recipient_name Gift card recipient name (optional)
# @param string $owner_name Gift card owner name (optional)
{
    my $params = {
    'amount' => {
        data_type => 'double',
        description => 'Defines the gift card amount value.',
        required => '1',
    },
    'code' => {
        data_type => 'string',
        description => 'Gift card code',
        required => '0',
    },
    'owner_email' => {
        data_type => 'string',
        description => 'Gift card owner email',
        required => '0',
    },
    'recipient_email' => {
        data_type => 'string',
        description => 'Gift card recipient email',
        required => '0',
    },
    'recipient_name' => {
        data_type => 'string',
        description => 'Gift card recipient name',
        required => '0',
    },
    'owner_name' => {
        data_type => 'string',
        description => 'Gift card owner name',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_giftcard_add' } = {
        summary => 'cart.giftcard.add',
        params => $params,
        returns => 'CartGiftcardAdd200Response',
        };
}
# @return CartGiftcardAdd200Response
#
sub cart_giftcard_add {
    my ($self, %args) = @_;

    # verify the required parameter 'amount' is set
    unless (exists $args{'amount'}) {
      croak("Missing the required parameter 'amount' when calling cart_giftcard_add");
    }

    # parse inputs
    my $_resource_path = '/cart.giftcard.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'amount'}) {
        $query_params->{'amount'} = $self->{api_client}->to_query_value($args{'amount'});
    }

    # query params
    if ( exists $args{'code'}) {
        $query_params->{'code'} = $self->{api_client}->to_query_value($args{'code'});
    }

    # query params
    if ( exists $args{'owner_email'}) {
        $query_params->{'owner_email'} = $self->{api_client}->to_query_value($args{'owner_email'});
    }

    # query params
    if ( exists $args{'recipient_email'}) {
        $query_params->{'recipient_email'} = $self->{api_client}->to_query_value($args{'recipient_email'});
    }

    # query params
    if ( exists $args{'recipient_name'}) {
        $query_params->{'recipient_name'} = $self->{api_client}->to_query_value($args{'recipient_name'});
    }

    # query params
    if ( exists $args{'owner_name'}) {
        $query_params->{'owner_name'} = $self->{api_client}->to_query_value($args{'owner_name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartGiftcardAdd200Response', $response);
    return $_response_object;
}

#
# cart_giftcard_count
#
# cart.giftcard.count
#
# @param string $store_id Store Id (optional)
{
    my $params = {
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_giftcard_count' } = {
        summary => 'cart.giftcard.count',
        params => $params,
        returns => 'CartGiftcardCount200Response',
        };
}
# @return CartGiftcardCount200Response
#
sub cart_giftcard_count {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.giftcard.count.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartGiftcardCount200Response', $response);
    return $_response_object;
}

#
# cart_giftcard_delete
#
# cart.giftcard.delete
#
# @param string $id Entity id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_giftcard_delete' } = {
        summary => 'cart.giftcard.delete',
        params => $params,
        returns => 'AttributeDelete200Response',
        };
}
# @return AttributeDelete200Response
#
sub cart_giftcard_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling cart_giftcard_delete");
    }

    # parse inputs
    my $_resource_path = '/cart.giftcard.delete.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeDelete200Response', $response);
    return $_response_object;
}

#
# cart_giftcard_list
#
# cart.giftcard.list
#
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $store_id Store Id (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,code,name')
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_giftcard_list' } = {
        summary => 'cart.giftcard.list',
        params => $params,
        returns => 'ModelResponseCartGiftCardList',
        };
}
# @return ModelResponseCartGiftCardList
#
sub cart_giftcard_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.giftcard.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseCartGiftCardList', $response);
    return $_response_object;
}

#
# cart_info
#
# cart.info
#
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'store_name,store_url,db_prefix')
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
# @param string $store_id Store Id (optional)
{
    my $params = {
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_info' } = {
        summary => 'cart.info',
        params => $params,
        returns => 'CartInfo200Response',
        };
}
# @return CartInfo200Response
#
sub cart_info {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.info.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartInfo200Response', $response);
    return $_response_object;
}

#
# cart_list
#
# cart.list
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'cart_list' } = {
        summary => 'cart.list',
        params => $params,
        returns => 'CartList200Response',
        };
}
# @return CartList200Response
#
sub cart_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartList200Response', $response);
    return $_response_object;
}

#
# cart_meta_data_list
#
# cart.meta_data.list
#
# @param string $entity_id Entity Id (required)
# @param string $entity Entity (optional, default to 'product')
# @param string $store_id Store Id (optional)
# @param string $lang_id Language id (optional)
# @param string $key Key (optional)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'key,value')
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'entity_id' => {
        data_type => 'string',
        description => 'Entity Id',
        required => '1',
    },
    'entity' => {
        data_type => 'string',
        description => 'Entity',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    'key' => {
        data_type => 'string',
        description => 'Key',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_meta_data_list' } = {
        summary => 'cart.meta_data.list',
        params => $params,
        returns => 'ModelResponseCartMetaDataList',
        };
}
# @return ModelResponseCartMetaDataList
#
sub cart_meta_data_list {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_id' is set
    unless (exists $args{'entity_id'}) {
      croak("Missing the required parameter 'entity_id' when calling cart_meta_data_list");
    }

    # parse inputs
    my $_resource_path = '/cart.meta_data.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'entity_id'}) {
        $query_params->{'entity_id'} = $self->{api_client}->to_query_value($args{'entity_id'});
    }

    # query params
    if ( exists $args{'entity'}) {
        $query_params->{'entity'} = $self->{api_client}->to_query_value($args{'entity'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseCartMetaDataList', $response);
    return $_response_object;
}

#
# cart_meta_data_set
#
# cart.meta_data.set
#
# @param string $entity_id Entity Id (required)
# @param string $key Key (required)
# @param string $value Value (required)
# @param string $namespace Metafield namespace (required)
# @param string $entity Entity (optional, default to 'product')
# @param string $store_id Store Id (optional)
# @param string $lang_id Language id (optional)
{
    my $params = {
    'entity_id' => {
        data_type => 'string',
        description => 'Entity Id',
        required => '1',
    },
    'key' => {
        data_type => 'string',
        description => 'Key',
        required => '1',
    },
    'value' => {
        data_type => 'string',
        description => 'Value',
        required => '1',
    },
    'namespace' => {
        data_type => 'string',
        description => 'Metafield namespace',
        required => '1',
    },
    'entity' => {
        data_type => 'string',
        description => 'Entity',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_meta_data_set' } = {
        summary => 'cart.meta_data.set',
        params => $params,
        returns => 'AttributeAdd200Response',
        };
}
# @return AttributeAdd200Response
#
sub cart_meta_data_set {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_id' is set
    unless (exists $args{'entity_id'}) {
      croak("Missing the required parameter 'entity_id' when calling cart_meta_data_set");
    }

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling cart_meta_data_set");
    }

    # verify the required parameter 'value' is set
    unless (exists $args{'value'}) {
      croak("Missing the required parameter 'value' when calling cart_meta_data_set");
    }

    # verify the required parameter 'namespace' is set
    unless (exists $args{'namespace'}) {
      croak("Missing the required parameter 'namespace' when calling cart_meta_data_set");
    }

    # parse inputs
    my $_resource_path = '/cart.meta_data.set.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'entity_id'}) {
        $query_params->{'entity_id'} = $self->{api_client}->to_query_value($args{'entity_id'});
    }

    # query params
    if ( exists $args{'entity'}) {
        $query_params->{'entity'} = $self->{api_client}->to_query_value($args{'entity'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    # query params
    if ( exists $args{'value'}) {
        $query_params->{'value'} = $self->{api_client}->to_query_value($args{'value'});
    }

    # query params
    if ( exists $args{'namespace'}) {
        $query_params->{'namespace'} = $self->{api_client}->to_query_value($args{'namespace'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeAdd200Response', $response);
    return $_response_object;
}

#
# cart_meta_data_unset
#
# cart.meta_data.unset
#
# @param string $entity_id Entity Id (required)
# @param string $key Key (required)
# @param string $id Entity id (required)
# @param string $entity Entity (optional, default to 'product')
# @param string $store_id Store Id (optional)
{
    my $params = {
    'entity_id' => {
        data_type => 'string',
        description => 'Entity Id',
        required => '1',
    },
    'key' => {
        data_type => 'string',
        description => 'Key',
        required => '1',
    },
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'entity' => {
        data_type => 'string',
        description => 'Entity',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_meta_data_unset' } = {
        summary => 'cart.meta_data.unset',
        params => $params,
        returns => 'BasketLiveShippingServiceDelete200Response',
        };
}
# @return BasketLiveShippingServiceDelete200Response
#
sub cart_meta_data_unset {
    my ($self, %args) = @_;

    # verify the required parameter 'entity_id' is set
    unless (exists $args{'entity_id'}) {
      croak("Missing the required parameter 'entity_id' when calling cart_meta_data_unset");
    }

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling cart_meta_data_unset");
    }

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling cart_meta_data_unset");
    }

    # parse inputs
    my $_resource_path = '/cart.meta_data.unset.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'entity_id'}) {
        $query_params->{'entity_id'} = $self->{api_client}->to_query_value($args{'entity_id'});
    }

    # query params
    if ( exists $args{'entity'}) {
        $query_params->{'entity'} = $self->{api_client}->to_query_value($args{'entity'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BasketLiveShippingServiceDelete200Response', $response);
    return $_response_object;
}

#
# cart_methods
#
# cart.methods
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'cart_methods' } = {
        summary => 'cart.methods',
        params => $params,
        returns => 'CartMethods200Response',
        };
}
# @return CartMethods200Response
#
sub cart_methods {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.methods.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartMethods200Response', $response);
    return $_response_object;
}

#
# cart_plugin_list
#
# cart.plugin.list
#
# @param string $store_id Store Id (optional)
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
{
    my $params = {
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_plugin_list' } = {
        summary => 'cart.plugin.list',
        params => $params,
        returns => 'CartPluginList200Response',
        };
}
# @return CartPluginList200Response
#
sub cart_plugin_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.plugin.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartPluginList200Response', $response);
    return $_response_object;
}

#
# cart_script_add
#
# cart.script.add
#
# @param string $name The user-friendly script name (optional)
# @param string $description The user-friendly description (optional)
# @param string $html An html string containing exactly one &#x60;script&#x60; tag. (optional)
# @param string $src The URL of the remote script (optional)
# @param string $load_method The load method to use for the script (optional)
# @param string $scope The page or pages on the online store where the script should be included (optional, default to 'storefront')
# @param string $events Event for run scripts (optional)
# @param string $store_id Store Id (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The user-friendly script name',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => 'The user-friendly description',
        required => '0',
    },
    'html' => {
        data_type => 'string',
        description => 'An html string containing exactly one &#x60;script&#x60; tag.',
        required => '0',
    },
    'src' => {
        data_type => 'string',
        description => 'The URL of the remote script',
        required => '0',
    },
    'load_method' => {
        data_type => 'string',
        description => 'The load method to use for the script',
        required => '0',
    },
    'scope' => {
        data_type => 'string',
        description => 'The page or pages on the online store where the script should be included',
        required => '0',
    },
    'events' => {
        data_type => 'string',
        description => 'Event for run scripts',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_script_add' } = {
        summary => 'cart.script.add',
        params => $params,
        returns => 'CartScriptAdd200Response',
        };
}
# @return CartScriptAdd200Response
#
sub cart_script_add {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.script.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'html'}) {
        $query_params->{'html'} = $self->{api_client}->to_query_value($args{'html'});
    }

    # query params
    if ( exists $args{'src'}) {
        $query_params->{'src'} = $self->{api_client}->to_query_value($args{'src'});
    }

    # query params
    if ( exists $args{'load_method'}) {
        $query_params->{'load_method'} = $self->{api_client}->to_query_value($args{'load_method'});
    }

    # query params
    if ( exists $args{'scope'}) {
        $query_params->{'scope'} = $self->{api_client}->to_query_value($args{'scope'});
    }

    # query params
    if ( exists $args{'events'}) {
        $query_params->{'events'} = $self->{api_client}->to_query_value($args{'events'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartScriptAdd200Response', $response);
    return $_response_object;
}

#
# cart_script_delete
#
# cart.script.delete
#
# @param string $id Entity id (required)
# @param string $store_id Store Id (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_script_delete' } = {
        summary => 'cart.script.delete',
        params => $params,
        returns => 'AttributeDelete200Response',
        };
}
# @return AttributeDelete200Response
#
sub cart_script_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling cart_script_delete");
    }

    # parse inputs
    my $_resource_path = '/cart.script.delete.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeDelete200Response', $response);
    return $_response_object;
}

#
# cart_script_list
#
# cart.script.list
#
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $created_from Retrieve entities from their creation date (optional)
# @param string $created_to Retrieve entities to their creation date (optional)
# @param string $modified_from Retrieve entities from their modification date (optional)
# @param string $modified_to Retrieve entities to their modification date (optional)
# @param string $script_ids Retrieves only scripts with specific ids (optional)
# @param string $store_id Store Id (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,name,description')
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'created_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their creation date',
        required => '0',
    },
    'created_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their creation date',
        required => '0',
    },
    'modified_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their modification date',
        required => '0',
    },
    'modified_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their modification date',
        required => '0',
    },
    'script_ids' => {
        data_type => 'string',
        description => 'Retrieves only scripts with specific ids',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_script_list' } = {
        summary => 'cart.script.list',
        params => $params,
        returns => 'ModelResponseCartScriptList',
        };
}
# @return ModelResponseCartScriptList
#
sub cart_script_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.script.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'created_from'}) {
        $query_params->{'created_from'} = $self->{api_client}->to_query_value($args{'created_from'});
    }

    # query params
    if ( exists $args{'created_to'}) {
        $query_params->{'created_to'} = $self->{api_client}->to_query_value($args{'created_to'});
    }

    # query params
    if ( exists $args{'modified_from'}) {
        $query_params->{'modified_from'} = $self->{api_client}->to_query_value($args{'modified_from'});
    }

    # query params
    if ( exists $args{'modified_to'}) {
        $query_params->{'modified_to'} = $self->{api_client}->to_query_value($args{'modified_to'});
    }

    # query params
    if ( exists $args{'script_ids'}) {
        $query_params->{'script_ids'} = $self->{api_client}->to_query_value($args{'script_ids'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseCartScriptList', $response);
    return $_response_object;
}

#
# cart_shipping_zones_list
#
# cart.shipping_zones.list
#
# @param string $store_id Store Id (optional)
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,name,enabled')
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_shipping_zones_list' } = {
        summary => 'cart.shipping_zones.list',
        params => $params,
        returns => 'ModelResponseCartShippingZonesList',
        };
}
# @return ModelResponseCartShippingZonesList
#
sub cart_shipping_zones_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.shipping_zones.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseCartShippingZonesList', $response);
    return $_response_object;
}

#
# cart_validate
#
# cart.validate
#
# @param boolean $validate_version Specify if api2cart should validate cart version (optional, default to false)
{
    my $params = {
    'validate_version' => {
        data_type => 'boolean',
        description => 'Specify if api2cart should validate cart version',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'cart_validate' } = {
        summary => 'cart.validate',
        params => $params,
        returns => 'CartValidate200Response',
        };
}
# @return CartValidate200Response
#
sub cart_validate {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/cart.validate.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'validate_version'}) {
        $query_params->{'validate_version'} = $self->{api_client}->to_query_value($args{'validate_version'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CartValidate200Response', $response);
    return $_response_object;
}

1;
