=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::WebhookApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# webhook_count
#
# webhook.count
#
# @param string $entity The entity you want to filter webhooks by (e.g. order or product) (optional)
# @param string $action The action you want to filter webhooks by (e.g. order or product) (optional)
# @param boolean $active The webhook status you want to filter webhooks by (optional)
{
    my $params = {
    'entity' => {
        data_type => 'string',
        description => 'The entity you want to filter webhooks by (e.g. order or product)',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => 'The action you want to filter webhooks by (e.g. order or product)',
        required => '0',
    },
    'active' => {
        data_type => 'boolean',
        description => 'The webhook status you want to filter webhooks by',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'webhook_count' } = {
        summary => 'webhook.count',
        params => $params,
        returns => 'WebhookCount200Response',
        };
}
# @return WebhookCount200Response
#
sub webhook_count {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhook.count.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'entity'}) {
        $query_params->{'entity'} = $self->{api_client}->to_query_value($args{'entity'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'active'}) {
        $query_params->{'active'} = $self->{api_client}->to_query_value($args{'active'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookCount200Response', $response);
    return $_response_object;
}

#
# webhook_create
#
# webhook.create
#
# @param string $entity Specify the entity that you want to enable webhooks for (e.g product, order, customer, category) (required)
# @param string $action Specify what action (event) will trigger the webhook (e.g add, delete, or update) (required)
# @param string $callback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
# @param string $label The name you give to the webhook (optional)
# @param string $fields Fields the webhook should send (optional, default to 'force_all')
# @param boolean $active Webhook status (optional, default to true)
# @param string $store_id Defines store id where the webhook should be assigned (optional)
{
    my $params = {
    'entity' => {
        data_type => 'string',
        description => 'Specify the entity that you want to enable webhooks for (e.g product, order, customer, category)',
        required => '1',
    },
    'action' => {
        data_type => 'string',
        description => 'Specify what action (event) will trigger the webhook (e.g add, delete, or update)',
        required => '1',
    },
    'callback' => {
        data_type => 'string',
        description => 'Callback url that returns shipping rates. It should be able to accept POST requests with json data.',
        required => '0',
    },
    'label' => {
        data_type => 'string',
        description => 'The name you give to the webhook',
        required => '0',
    },
    'fields' => {
        data_type => 'string',
        description => 'Fields the webhook should send',
        required => '0',
    },
    'active' => {
        data_type => 'boolean',
        description => 'Webhook status',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Defines store id where the webhook should be assigned',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'webhook_create' } = {
        summary => 'webhook.create',
        params => $params,
        returns => 'BasketLiveShippingServiceCreate200Response',
        };
}
# @return BasketLiveShippingServiceCreate200Response
#
sub webhook_create {
    my ($self, %args) = @_;

    # verify the required parameter 'entity' is set
    unless (exists $args{'entity'}) {
      croak("Missing the required parameter 'entity' when calling webhook_create");
    }

    # verify the required parameter 'action' is set
    unless (exists $args{'action'}) {
      croak("Missing the required parameter 'action' when calling webhook_create");
    }

    # parse inputs
    my $_resource_path = '/webhook.create.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'entity'}) {
        $query_params->{'entity'} = $self->{api_client}->to_query_value($args{'entity'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'callback'}) {
        $query_params->{'callback'} = $self->{api_client}->to_query_value($args{'callback'});
    }

    # query params
    if ( exists $args{'label'}) {
        $query_params->{'label'} = $self->{api_client}->to_query_value($args{'label'});
    }

    # query params
    if ( exists $args{'fields'}) {
        $query_params->{'fields'} = $self->{api_client}->to_query_value($args{'fields'});
    }

    # query params
    if ( exists $args{'active'}) {
        $query_params->{'active'} = $self->{api_client}->to_query_value($args{'active'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BasketLiveShippingServiceCreate200Response', $response);
    return $_response_object;
}

#
# webhook_delete
#
# webhook.delete
#
# @param string $id Webhook id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Webhook id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'webhook_delete' } = {
        summary => 'webhook.delete',
        params => $params,
        returns => 'AttributeDelete200Response',
        };
}
# @return AttributeDelete200Response
#
sub webhook_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling webhook_delete");
    }

    # parse inputs
    my $_resource_path = '/webhook.delete.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeDelete200Response', $response);
    return $_response_object;
}

#
# webhook_events
#
# webhook.events
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'webhook_events' } = {
        summary => 'webhook.events',
        params => $params,
        returns => 'WebhookEvents200Response',
        };
}
# @return WebhookEvents200Response
#
sub webhook_events {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhook.events.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookEvents200Response', $response);
    return $_response_object;
}

#
# webhook_list
#
# webhook.list
#
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,entity,action,callback')
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $entity The entity you want to filter webhooks by (e.g. order or product) (optional)
# @param string $action The action you want to filter webhooks by (e.g. add, update, or delete) (optional)
# @param boolean $active The webhook status you want to filter webhooks by (optional)
# @param string $ids List of сomma-separated webhook ids (optional)
{
    my $params = {
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'entity' => {
        data_type => 'string',
        description => 'The entity you want to filter webhooks by (e.g. order or product)',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => 'The action you want to filter webhooks by (e.g. add, update, or delete)',
        required => '0',
    },
    'active' => {
        data_type => 'boolean',
        description => 'The webhook status you want to filter webhooks by',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'List of сomma-separated webhook ids',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'webhook_list' } = {
        summary => 'webhook.list',
        params => $params,
        returns => 'WebhookList200Response',
        };
}
# @return WebhookList200Response
#
sub webhook_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/webhook.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'entity'}) {
        $query_params->{'entity'} = $self->{api_client}->to_query_value($args{'entity'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'active'}) {
        $query_params->{'active'} = $self->{api_client}->to_query_value($args{'active'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('WebhookList200Response', $response);
    return $_response_object;
}

#
# webhook_update
#
# webhook.update
#
# @param string $id Webhook id (required)
# @param string $callback Callback url that returns shipping rates. It should be able to accept POST requests with json data. (optional)
# @param string $label The name you give to the webhook (optional)
# @param string $fields Fields the webhook should send (optional)
# @param boolean $active Webhook status (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Webhook id',
        required => '1',
    },
    'callback' => {
        data_type => 'string',
        description => 'Callback url that returns shipping rates. It should be able to accept POST requests with json data.',
        required => '0',
    },
    'label' => {
        data_type => 'string',
        description => 'The name you give to the webhook',
        required => '0',
    },
    'fields' => {
        data_type => 'string',
        description => 'Fields the webhook should send',
        required => '0',
    },
    'active' => {
        data_type => 'boolean',
        description => 'Webhook status',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'webhook_update' } = {
        summary => 'webhook.update',
        params => $params,
        returns => 'ProductImageUpdate200Response',
        };
}
# @return ProductImageUpdate200Response
#
sub webhook_update {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling webhook_update");
    }

    # parse inputs
    my $_resource_path = '/webhook.update.json';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'callback'}) {
        $query_params->{'callback'} = $self->{api_client}->to_query_value($args{'callback'});
    }

    # query params
    if ( exists $args{'label'}) {
        $query_params->{'label'} = $self->{api_client}->to_query_value($args{'label'});
    }

    # query params
    if ( exists $args{'fields'}) {
        $query_params->{'fields'} = $self->{api_client}->to_query_value($args{'fields'});
    }

    # query params
    if ( exists $args{'active'}) {
        $query_params->{'active'} = $self->{api_client}->to_query_value($args{'active'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ProductImageUpdate200Response', $response);
    return $_response_object;
}

1;
