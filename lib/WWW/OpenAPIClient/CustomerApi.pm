=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::CustomerApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# customer_add
#
# customer.add
#
# @param CustomerAdd $customer_add  (required)
{
    my $params = {
    'customer_add' => {
        data_type => 'CustomerAdd',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_add' } = {
        summary => 'customer.add',
        params => $params,
        returns => 'CustomerAdd200Response',
        };
}
# @return CustomerAdd200Response
#
sub customer_add {
    my ($self, %args) = @_;

    # verify the required parameter 'customer_add' is set
    unless (exists $args{'customer_add'}) {
      croak("Missing the required parameter 'customer_add' when calling customer_add");
    }

    # parse inputs
    my $_resource_path = '/customer.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'customer_add'}) {
        $_body_data = $args{'customer_add'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CustomerAdd200Response', $response);
    return $_response_object;
}

#
# customer_address_add
#
# customer.address.add
#
# @param CustomerAddressAdd $customer_address_add  (required)
{
    my $params = {
    'customer_address_add' => {
        data_type => 'CustomerAddressAdd',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_address_add' } = {
        summary => 'customer.address.add',
        params => $params,
        returns => 'AttributeAdd200Response',
        };
}
# @return AttributeAdd200Response
#
sub customer_address_add {
    my ($self, %args) = @_;

    # verify the required parameter 'customer_address_add' is set
    unless (exists $args{'customer_address_add'}) {
      croak("Missing the required parameter 'customer_address_add' when calling customer_address_add");
    }

    # parse inputs
    my $_resource_path = '/customer.address.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'customer_address_add'}) {
        $_body_data = $args{'customer_address_add'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeAdd200Response', $response);
    return $_response_object;
}

#
# customer_attribute_list
#
# customer.attribute.list
#
# @param string $customer_id Retrieves orders specified by customer id (required)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param string $store_id Store Id (optional)
# @param string $lang_id Language id (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'force_all')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'customer_id' => {
        data_type => 'string',
        description => 'Retrieves orders specified by customer id',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_attribute_list' } = {
        summary => 'customer.attribute.list',
        params => $params,
        returns => 'ModelResponseCustomerAttributeList',
        };
}
# @return ModelResponseCustomerAttributeList
#
sub customer_attribute_list {
    my ($self, %args) = @_;

    # verify the required parameter 'customer_id' is set
    unless (exists $args{'customer_id'}) {
      croak("Missing the required parameter 'customer_id' when calling customer_attribute_list");
    }

    # parse inputs
    my $_resource_path = '/customer.attribute.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'customer_id'}) {
        $query_params->{'customer_id'} = $self->{api_client}->to_query_value($args{'customer_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseCustomerAttributeList', $response);
    return $_response_object;
}

#
# customer_count
#
# customer.count
#
# @param string $ids Counts customers specified by ids (optional)
# @param string $since_id Retrieve entities starting from the specified id. (optional)
# @param string $customer_list_id The numeric ID of the customer list in Demandware. (optional)
# @param string $group_id Customer group_id (optional)
# @param string $store_id Counts customer specified by store id (optional)
# @param boolean $avail Defines category&#39;s visibility status (optional, default to true)
# @param boolean $include_guests Indicates whether to include guest customers in the total count. (optional, default to false)
# @param string $find_value Entity search that is specified by some value (optional)
# @param string $find_where Counts customers that are searched specified by field (optional)
# @param string $created_from Retrieve entities from their creation date (optional)
# @param string $created_to Retrieve entities to their creation date (optional)
# @param string $modified_from Retrieve entities from their modification date (optional)
# @param string $modified_to Retrieve entities to their modification date (optional)
{
    my $params = {
    'ids' => {
        data_type => 'string',
        description => 'Counts customers specified by ids',
        required => '0',
    },
    'since_id' => {
        data_type => 'string',
        description => 'Retrieve entities starting from the specified id.',
        required => '0',
    },
    'customer_list_id' => {
        data_type => 'string',
        description => 'The numeric ID of the customer list in Demandware.',
        required => '0',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Customer group_id',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Counts customer specified by store id',
        required => '0',
    },
    'avail' => {
        data_type => 'boolean',
        description => 'Defines category&#39;s visibility status',
        required => '0',
    },
    'include_guests' => {
        data_type => 'boolean',
        description => 'Indicates whether to include guest customers in the total count.',
        required => '0',
    },
    'find_value' => {
        data_type => 'string',
        description => 'Entity search that is specified by some value',
        required => '0',
    },
    'find_where' => {
        data_type => 'string',
        description => 'Counts customers that are searched specified by field',
        required => '0',
    },
    'created_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their creation date',
        required => '0',
    },
    'created_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their creation date',
        required => '0',
    },
    'modified_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their modification date',
        required => '0',
    },
    'modified_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their modification date',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_count' } = {
        summary => 'customer.count',
        params => $params,
        returns => 'CustomerCount200Response',
        };
}
# @return CustomerCount200Response
#
sub customer_count {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/customer.count.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'since_id'}) {
        $query_params->{'since_id'} = $self->{api_client}->to_query_value($args{'since_id'});
    }

    # query params
    if ( exists $args{'customer_list_id'}) {
        $query_params->{'customer_list_id'} = $self->{api_client}->to_query_value($args{'customer_list_id'});
    }

    # query params
    if ( exists $args{'group_id'}) {
        $query_params->{'group_id'} = $self->{api_client}->to_query_value($args{'group_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'avail'}) {
        $query_params->{'avail'} = $self->{api_client}->to_query_value($args{'avail'});
    }

    # query params
    if ( exists $args{'include_guests'}) {
        $query_params->{'include_guests'} = $self->{api_client}->to_query_value($args{'include_guests'});
    }

    # query params
    if ( exists $args{'find_value'}) {
        $query_params->{'find_value'} = $self->{api_client}->to_query_value($args{'find_value'});
    }

    # query params
    if ( exists $args{'find_where'}) {
        $query_params->{'find_where'} = $self->{api_client}->to_query_value($args{'find_where'});
    }

    # query params
    if ( exists $args{'created_from'}) {
        $query_params->{'created_from'} = $self->{api_client}->to_query_value($args{'created_from'});
    }

    # query params
    if ( exists $args{'created_to'}) {
        $query_params->{'created_to'} = $self->{api_client}->to_query_value($args{'created_to'});
    }

    # query params
    if ( exists $args{'modified_from'}) {
        $query_params->{'modified_from'} = $self->{api_client}->to_query_value($args{'modified_from'});
    }

    # query params
    if ( exists $args{'modified_to'}) {
        $query_params->{'modified_to'} = $self->{api_client}->to_query_value($args{'modified_to'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CustomerCount200Response', $response);
    return $_response_object;
}

#
# customer_delete
#
# customer.delete
#
# @param string $id Identifies customer specified by the id (required)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Identifies customer specified by the id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_delete' } = {
        summary => 'customer.delete',
        params => $params,
        returns => 'CustomerDelete200Response',
        };
}
# @return CustomerDelete200Response
#
sub customer_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling customer_delete");
    }

    # parse inputs
    my $_resource_path = '/customer.delete.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CustomerDelete200Response', $response);
    return $_response_object;
}

#
# customer_find
#
# customer.find
#
# @param string $find_value Entity search that is specified by some value (required)
# @param string $find_where Entity search that is specified by the comma-separated unique fields (optional, default to 'email')
# @param string $find_params Entity search that is specified by comma-separated parameters (optional, default to 'whole_words')
# @param string $store_id Store Id (optional)
# @param boolean $include_guests Indicates whether to search among guest customers when looking up a customer. (optional, default to false)
{
    my $params = {
    'find_value' => {
        data_type => 'string',
        description => 'Entity search that is specified by some value',
        required => '1',
    },
    'find_where' => {
        data_type => 'string',
        description => 'Entity search that is specified by the comma-separated unique fields',
        required => '0',
    },
    'find_params' => {
        data_type => 'string',
        description => 'Entity search that is specified by comma-separated parameters',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'include_guests' => {
        data_type => 'boolean',
        description => 'Indicates whether to search among guest customers when looking up a customer.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_find' } = {
        summary => 'customer.find',
        params => $params,
        returns => 'CustomerFind200Response',
        };
}
# @return CustomerFind200Response
#
sub customer_find {
    my ($self, %args) = @_;

    # verify the required parameter 'find_value' is set
    unless (exists $args{'find_value'}) {
      croak("Missing the required parameter 'find_value' when calling customer_find");
    }

    # parse inputs
    my $_resource_path = '/customer.find.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'find_value'}) {
        $query_params->{'find_value'} = $self->{api_client}->to_query_value($args{'find_value'});
    }

    # query params
    if ( exists $args{'find_where'}) {
        $query_params->{'find_where'} = $self->{api_client}->to_query_value($args{'find_where'});
    }

    # query params
    if ( exists $args{'find_params'}) {
        $query_params->{'find_params'} = $self->{api_client}->to_query_value($args{'find_params'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'include_guests'}) {
        $query_params->{'include_guests'} = $self->{api_client}->to_query_value($args{'include_guests'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CustomerFind200Response', $response);
    return $_response_object;
}

#
# customer_group_add
#
# customer.group.add
#
# @param string $name Customer group name (required)
# @param string $store_id Store Id (optional)
# @param string $stores_ids Assign customer group to the stores that is specified by comma-separated stores&#39; id (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Customer group name',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'stores_ids' => {
        data_type => 'string',
        description => 'Assign customer group to the stores that is specified by comma-separated stores&#39; id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_group_add' } = {
        summary => 'customer.group.add',
        params => $params,
        returns => 'CustomerGroupAdd200Response',
        };
}
# @return CustomerGroupAdd200Response
#
sub customer_group_add {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling customer_group_add");
    }

    # parse inputs
    my $_resource_path = '/customer.group.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'stores_ids'}) {
        $query_params->{'stores_ids'} = $self->{api_client}->to_query_value($args{'stores_ids'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CustomerGroupAdd200Response', $response);
    return $_response_object;
}

#
# customer_group_list
#
# customer.group.list
#
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param string $group_ids Groups that will be assigned to a customer (optional)
# @param string $store_id Store Id (optional)
# @param string $lang_id Language id (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,name,additional_fields')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
# @param boolean $disable_cache Disable cache for current request (optional, default to false)
{
    my $params = {
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'group_ids' => {
        data_type => 'string',
        description => 'Groups that will be assigned to a customer',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'lang_id' => {
        data_type => 'string',
        description => 'Language id',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    'disable_cache' => {
        data_type => 'boolean',
        description => 'Disable cache for current request',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_group_list' } = {
        summary => 'customer.group.list',
        params => $params,
        returns => 'ModelResponseCustomerGroupList',
        };
}
# @return ModelResponseCustomerGroupList
#
sub customer_group_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/customer.group.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'group_ids'}) {
        $query_params->{'group_ids'} = $self->{api_client}->to_query_value($args{'group_ids'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'lang_id'}) {
        $query_params->{'lang_id'} = $self->{api_client}->to_query_value($args{'lang_id'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    # query params
    if ( exists $args{'disable_cache'}) {
        $query_params->{'disable_cache'} = $self->{api_client}->to_query_value($args{'disable_cache'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseCustomerGroupList', $response);
    return $_response_object;
}

#
# customer_info
#
# customer.info
#
# @param string $id Retrieves customer&#39;s info specified by customer id (required)
# @param string $store_id Retrieves customer info specified by store id (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,email,first_name,last_name')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Retrieves customer&#39;s info specified by customer id',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Retrieves customer info specified by store id',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_info' } = {
        summary => 'customer.info',
        params => $params,
        returns => 'CustomerInfo200Response',
        };
}
# @return CustomerInfo200Response
#
sub customer_info {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling customer_info");
    }

    # parse inputs
    my $_resource_path = '/customer.info.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CustomerInfo200Response', $response);
    return $_response_object;
}

#
# customer_list
#
# customer.list
#
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param string $ids Retrieves customers specified by ids (optional)
# @param string $since_id Retrieve entities starting from the specified id. (optional)
# @param string $customer_list_id The numeric ID of the customer list in Demandware. (optional)
# @param string $group_id Customer group_id (optional)
# @param string $store_id Retrieves customers specified by store id (optional)
# @param boolean $avail Defines category&#39;s visibility status (optional, default to true)
# @param boolean $include_guests Indicates whether to include guest customers in the list results. (optional, default to false)
# @param string $find_value Entity search that is specified by some value (optional)
# @param string $find_where Customer search that is specified by field (optional)
# @param string $created_from Retrieve entities from their creation date (optional)
# @param string $created_to Retrieve entities to their creation date (optional)
# @param string $modified_from Retrieve entities from their modification date (optional)
# @param string $modified_to Retrieve entities to their modification date (optional)
# @param string $sort_by Set field to sort by (optional, default to 'created_time')
# @param string $sort_direction Set sorting direction (optional, default to 'asc')
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,email,first_name,last_name')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Retrieves customers specified by ids',
        required => '0',
    },
    'since_id' => {
        data_type => 'string',
        description => 'Retrieve entities starting from the specified id.',
        required => '0',
    },
    'customer_list_id' => {
        data_type => 'string',
        description => 'The numeric ID of the customer list in Demandware.',
        required => '0',
    },
    'group_id' => {
        data_type => 'string',
        description => 'Customer group_id',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Retrieves customers specified by store id',
        required => '0',
    },
    'avail' => {
        data_type => 'boolean',
        description => 'Defines category&#39;s visibility status',
        required => '0',
    },
    'include_guests' => {
        data_type => 'boolean',
        description => 'Indicates whether to include guest customers in the list results.',
        required => '0',
    },
    'find_value' => {
        data_type => 'string',
        description => 'Entity search that is specified by some value',
        required => '0',
    },
    'find_where' => {
        data_type => 'string',
        description => 'Customer search that is specified by field',
        required => '0',
    },
    'created_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their creation date',
        required => '0',
    },
    'created_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their creation date',
        required => '0',
    },
    'modified_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their modification date',
        required => '0',
    },
    'modified_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their modification date',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Set field to sort by',
        required => '0',
    },
    'sort_direction' => {
        data_type => 'string',
        description => 'Set sorting direction',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_list' } = {
        summary => 'customer.list',
        params => $params,
        returns => 'ModelResponseCustomerList',
        };
}
# @return ModelResponseCustomerList
#
sub customer_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/customer.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'since_id'}) {
        $query_params->{'since_id'} = $self->{api_client}->to_query_value($args{'since_id'});
    }

    # query params
    if ( exists $args{'customer_list_id'}) {
        $query_params->{'customer_list_id'} = $self->{api_client}->to_query_value($args{'customer_list_id'});
    }

    # query params
    if ( exists $args{'group_id'}) {
        $query_params->{'group_id'} = $self->{api_client}->to_query_value($args{'group_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'avail'}) {
        $query_params->{'avail'} = $self->{api_client}->to_query_value($args{'avail'});
    }

    # query params
    if ( exists $args{'include_guests'}) {
        $query_params->{'include_guests'} = $self->{api_client}->to_query_value($args{'include_guests'});
    }

    # query params
    if ( exists $args{'find_value'}) {
        $query_params->{'find_value'} = $self->{api_client}->to_query_value($args{'find_value'});
    }

    # query params
    if ( exists $args{'find_where'}) {
        $query_params->{'find_where'} = $self->{api_client}->to_query_value($args{'find_where'});
    }

    # query params
    if ( exists $args{'created_from'}) {
        $query_params->{'created_from'} = $self->{api_client}->to_query_value($args{'created_from'});
    }

    # query params
    if ( exists $args{'created_to'}) {
        $query_params->{'created_to'} = $self->{api_client}->to_query_value($args{'created_to'});
    }

    # query params
    if ( exists $args{'modified_from'}) {
        $query_params->{'modified_from'} = $self->{api_client}->to_query_value($args{'modified_from'});
    }

    # query params
    if ( exists $args{'modified_to'}) {
        $query_params->{'modified_to'} = $self->{api_client}->to_query_value($args{'modified_to'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'sort_direction'}) {
        $query_params->{'sort_direction'} = $self->{api_client}->to_query_value($args{'sort_direction'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseCustomerList', $response);
    return $_response_object;
}

#
# customer_update
#
# customer.update
#
# @param CustomerUpdate $customer_update  (required)
{
    my $params = {
    'customer_update' => {
        data_type => 'CustomerUpdate',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_update' } = {
        summary => 'customer.update',
        params => $params,
        returns => 'AccountConfigUpdate200Response',
        };
}
# @return AccountConfigUpdate200Response
#
sub customer_update {
    my ($self, %args) = @_;

    # verify the required parameter 'customer_update' is set
    unless (exists $args{'customer_update'}) {
      croak("Missing the required parameter 'customer_update' when calling customer_update");
    }

    # parse inputs
    my $_resource_path = '/customer.update.json';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'customer_update'}) {
        $_body_data = $args{'customer_update'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AccountConfigUpdate200Response', $response);
    return $_response_object;
}

#
# customer_wishlist_list
#
# customer.wishlist.list
#
# @param string $customer_id Retrieves orders specified by customer id (required)
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param string $id Entity id (optional)
# @param string $store_id Store Id (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional, default to '{return_code,return_message,pagination,result}')
{
    my $params = {
    'customer_id' => {
        data_type => 'string',
        description => 'Retrieves orders specified by customer id',
        required => '1',
    },
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'customer_wishlist_list' } = {
        summary => 'customer.wishlist.list',
        params => $params,
        returns => 'ModelResponseCustomerWishlistList',
        };
}
# @return ModelResponseCustomerWishlistList
#
sub customer_wishlist_list {
    my ($self, %args) = @_;

    # verify the required parameter 'customer_id' is set
    unless (exists $args{'customer_id'}) {
      croak("Missing the required parameter 'customer_id' when calling customer_wishlist_list");
    }

    # parse inputs
    my $_resource_path = '/customer.wishlist.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'customer_id'}) {
        $query_params->{'customer_id'} = $self->{api_client}->to_query_value($args{'customer_id'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseCustomerWishlistList', $response);
    return $_response_object;
}

1;
