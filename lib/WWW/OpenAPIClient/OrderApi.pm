=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::OrderApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# order_abandoned_list
#
# order.abandoned.list
#
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param string $customer_id Retrieves orders specified by customer id (optional)
# @param string $customer_email Retrieves orders specified by customer email (optional)
# @param string $store_id Store Id (optional)
# @param string $created_from Retrieve entities from their creation date (optional)
# @param string $created_to Retrieve entities to their creation date (optional)
# @param string $modified_from Retrieve entities from their modification date (optional)
# @param string $modified_to Retrieve entities to their modification date (optional)
# @param boolean $skip_empty_email Filter empty emails (optional, default to false)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'customer,totals,items')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'customer_id' => {
        data_type => 'string',
        description => 'Retrieves orders specified by customer id',
        required => '0',
    },
    'customer_email' => {
        data_type => 'string',
        description => 'Retrieves orders specified by customer email',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'created_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their creation date',
        required => '0',
    },
    'created_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their creation date',
        required => '0',
    },
    'modified_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their modification date',
        required => '0',
    },
    'modified_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their modification date',
        required => '0',
    },
    'skip_empty_email' => {
        data_type => 'boolean',
        description => 'Filter empty emails',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_abandoned_list' } = {
        summary => 'order.abandoned.list',
        params => $params,
        returns => 'ModelResponseOrderAbandonedList',
        };
}
# @return ModelResponseOrderAbandonedList
#
sub order_abandoned_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/order.abandoned.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'customer_id'}) {
        $query_params->{'customer_id'} = $self->{api_client}->to_query_value($args{'customer_id'});
    }

    # query params
    if ( exists $args{'customer_email'}) {
        $query_params->{'customer_email'} = $self->{api_client}->to_query_value($args{'customer_email'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'created_from'}) {
        $query_params->{'created_from'} = $self->{api_client}->to_query_value($args{'created_from'});
    }

    # query params
    if ( exists $args{'created_to'}) {
        $query_params->{'created_to'} = $self->{api_client}->to_query_value($args{'created_to'});
    }

    # query params
    if ( exists $args{'modified_from'}) {
        $query_params->{'modified_from'} = $self->{api_client}->to_query_value($args{'modified_from'});
    }

    # query params
    if ( exists $args{'modified_to'}) {
        $query_params->{'modified_to'} = $self->{api_client}->to_query_value($args{'modified_to'});
    }

    # query params
    if ( exists $args{'skip_empty_email'}) {
        $query_params->{'skip_empty_email'} = $self->{api_client}->to_query_value($args{'skip_empty_email'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseOrderAbandonedList', $response);
    return $_response_object;
}

#
# order_add
#
# order.add
#
# @param OrderAdd $order_add  (required)
{
    my $params = {
    'order_add' => {
        data_type => 'OrderAdd',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_add' } = {
        summary => 'order.add',
        params => $params,
        returns => 'OrderAdd200Response',
        };
}
# @return OrderAdd200Response
#
sub order_add {
    my ($self, %args) = @_;

    # verify the required parameter 'order_add' is set
    unless (exists $args{'order_add'}) {
      croak("Missing the required parameter 'order_add' when calling order_add");
    }

    # parse inputs
    my $_resource_path = '/order.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'order_add'}) {
        $_body_data = $args{'order_add'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrderAdd200Response', $response);
    return $_response_object;
}

#
# order_count
#
# order.count
#
# @param string $order_ids Counts orders specified by order ids (optional)
# @param string $ids Counts orders specified by ids (optional)
# @param string $customer_id Counts orders quantity specified by customer id (optional)
# @param string $store_id Counts orders quantity specified by store id (optional)
# @param string $customer_email Counts orders quantity specified by customer email (optional)
# @param string $order_status Counts orders quantity specified by order status (optional)
# @param ARRAY[string] $order_status_ids Retrieves orders specified by order statuses (optional)
# @param string $ebay_order_status Counts orders quantity specified by order status (optional)
# @param string $financial_status Counts orders quantity specified by financial status (optional)
# @param ARRAY[string] $financial_status_ids Retrieves orders count specified by financial status ids (optional)
# @param string $fulfillment_channel Retrieves order with a fulfillment channel (optional)
# @param string $fulfillment_status Create order with fulfillment status (optional)
# @param string $shipping_method Retrieve entities according to shipping method (optional)
# @param string $delivery_method Retrieves order with delivery method (optional)
# @param string $tags Order tags (optional)
# @param string $ship_node_type Retrieves order with ship node type (optional)
# @param string $created_from Retrieve entities from their creation date (optional)
# @param string $created_to Retrieve entities to their creation date (optional)
# @param string $modified_from Retrieve entities from their modification date (optional)
# @param string $modified_to Retrieve entities to their modification date (optional)
{
    my $params = {
    'order_ids' => {
        data_type => 'string',
        description => 'Counts orders specified by order ids',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Counts orders specified by ids',
        required => '0',
    },
    'customer_id' => {
        data_type => 'string',
        description => 'Counts orders quantity specified by customer id',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Counts orders quantity specified by store id',
        required => '0',
    },
    'customer_email' => {
        data_type => 'string',
        description => 'Counts orders quantity specified by customer email',
        required => '0',
    },
    'order_status' => {
        data_type => 'string',
        description => 'Counts orders quantity specified by order status',
        required => '0',
    },
    'order_status_ids' => {
        data_type => 'ARRAY[string]',
        description => 'Retrieves orders specified by order statuses',
        required => '0',
    },
    'ebay_order_status' => {
        data_type => 'string',
        description => 'Counts orders quantity specified by order status',
        required => '0',
    },
    'financial_status' => {
        data_type => 'string',
        description => 'Counts orders quantity specified by financial status',
        required => '0',
    },
    'financial_status_ids' => {
        data_type => 'ARRAY[string]',
        description => 'Retrieves orders count specified by financial status ids',
        required => '0',
    },
    'fulfillment_channel' => {
        data_type => 'string',
        description => 'Retrieves order with a fulfillment channel',
        required => '0',
    },
    'fulfillment_status' => {
        data_type => 'string',
        description => 'Create order with fulfillment status',
        required => '0',
    },
    'shipping_method' => {
        data_type => 'string',
        description => 'Retrieve entities according to shipping method',
        required => '0',
    },
    'delivery_method' => {
        data_type => 'string',
        description => 'Retrieves order with delivery method',
        required => '0',
    },
    'tags' => {
        data_type => 'string',
        description => 'Order tags',
        required => '0',
    },
    'ship_node_type' => {
        data_type => 'string',
        description => 'Retrieves order with ship node type',
        required => '0',
    },
    'created_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their creation date',
        required => '0',
    },
    'created_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their creation date',
        required => '0',
    },
    'modified_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their modification date',
        required => '0',
    },
    'modified_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their modification date',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_count' } = {
        summary => 'order.count',
        params => $params,
        returns => 'OrderCount200Response',
        };
}
# @return OrderCount200Response
#
sub order_count {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/order.count.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'order_ids'}) {
        $query_params->{'order_ids'} = $self->{api_client}->to_query_value($args{'order_ids'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'customer_id'}) {
        $query_params->{'customer_id'} = $self->{api_client}->to_query_value($args{'customer_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'customer_email'}) {
        $query_params->{'customer_email'} = $self->{api_client}->to_query_value($args{'customer_email'});
    }

    # query params
    if ( exists $args{'order_status'}) {
        $query_params->{'order_status'} = $self->{api_client}->to_query_value($args{'order_status'});
    }

    # query params
    if ( exists $args{'order_status_ids'}) {
        $query_params->{'order_status_ids'} = $self->{api_client}->to_query_value($args{'order_status_ids'});
    }

    # query params
    if ( exists $args{'ebay_order_status'}) {
        $query_params->{'ebay_order_status'} = $self->{api_client}->to_query_value($args{'ebay_order_status'});
    }

    # query params
    if ( exists $args{'financial_status'}) {
        $query_params->{'financial_status'} = $self->{api_client}->to_query_value($args{'financial_status'});
    }

    # query params
    if ( exists $args{'financial_status_ids'}) {
        $query_params->{'financial_status_ids'} = $self->{api_client}->to_query_value($args{'financial_status_ids'});
    }

    # query params
    if ( exists $args{'fulfillment_channel'}) {
        $query_params->{'fulfillment_channel'} = $self->{api_client}->to_query_value($args{'fulfillment_channel'});
    }

    # query params
    if ( exists $args{'fulfillment_status'}) {
        $query_params->{'fulfillment_status'} = $self->{api_client}->to_query_value($args{'fulfillment_status'});
    }

    # query params
    if ( exists $args{'shipping_method'}) {
        $query_params->{'shipping_method'} = $self->{api_client}->to_query_value($args{'shipping_method'});
    }

    # query params
    if ( exists $args{'delivery_method'}) {
        $query_params->{'delivery_method'} = $self->{api_client}->to_query_value($args{'delivery_method'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    # query params
    if ( exists $args{'ship_node_type'}) {
        $query_params->{'ship_node_type'} = $self->{api_client}->to_query_value($args{'ship_node_type'});
    }

    # query params
    if ( exists $args{'created_from'}) {
        $query_params->{'created_from'} = $self->{api_client}->to_query_value($args{'created_from'});
    }

    # query params
    if ( exists $args{'created_to'}) {
        $query_params->{'created_to'} = $self->{api_client}->to_query_value($args{'created_to'});
    }

    # query params
    if ( exists $args{'modified_from'}) {
        $query_params->{'modified_from'} = $self->{api_client}->to_query_value($args{'modified_from'});
    }

    # query params
    if ( exists $args{'modified_to'}) {
        $query_params->{'modified_to'} = $self->{api_client}->to_query_value($args{'modified_to'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrderCount200Response', $response);
    return $_response_object;
}

#
# order_financial_status_list
#
# order.financial_status.list
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'order_financial_status_list' } = {
        summary => 'order.financial_status.list',
        params => $params,
        returns => 'OrderFinancialStatusList200Response',
        };
}
# @return OrderFinancialStatusList200Response
#
sub order_financial_status_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/order.financial_status.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrderFinancialStatusList200Response', $response);
    return $_response_object;
}

#
# order_fulfillment_status_list
#
# order.fulfillment_status.list
#
# @param string $action Available statuses for the specified action. (optional)
{
    my $params = {
    'action' => {
        data_type => 'string',
        description => 'Available statuses for the specified action.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_fulfillment_status_list' } = {
        summary => 'order.fulfillment_status.list',
        params => $params,
        returns => 'OrderFulfillmentStatusList200Response',
        };
}
# @return OrderFulfillmentStatusList200Response
#
sub order_fulfillment_status_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/order.fulfillment_status.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrderFulfillmentStatusList200Response', $response);
    return $_response_object;
}

#
# order_info
#
# order.info
#
# @param string $id Retrieves order info specified by id (optional)
# @param string $order_id Retrieves order’s info specified by order id (optional)
# @param string $store_id Defines store id where the order should be found (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
# @param boolean $enable_cache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache (optional, default to false)
# @param boolean $use_latest_api_version Use the latest platform API version (optional, default to false)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Retrieves order info specified by id',
        required => '0',
    },
    'order_id' => {
        data_type => 'string',
        description => 'Retrieves order’s info specified by order id',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Defines store id where the order should be found',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    'enable_cache' => {
        data_type => 'boolean',
        description => 'If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache',
        required => '0',
    },
    'use_latest_api_version' => {
        data_type => 'boolean',
        description => 'Use the latest platform API version',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_info' } = {
        summary => 'order.info',
        params => $params,
        returns => 'OrderInfo200Response',
        };
}
# @return OrderInfo200Response
#
sub order_info {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/order.info.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'order_id'}) {
        $query_params->{'order_id'} = $self->{api_client}->to_query_value($args{'order_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    # query params
    if ( exists $args{'enable_cache'}) {
        $query_params->{'enable_cache'} = $self->{api_client}->to_query_value($args{'enable_cache'});
    }

    # query params
    if ( exists $args{'use_latest_api_version'}) {
        $query_params->{'use_latest_api_version'} = $self->{api_client}->to_query_value($args{'use_latest_api_version'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrderInfo200Response', $response);
    return $_response_object;
}

#
# order_list
#
# order.list
#
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $page_cursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param string $ids Retrieves orders specified by ids (optional)
# @param string $order_ids Retrieves orders specified by order ids (optional)
# @param string $since_id Retrieve entities starting from the specified id. (optional)
# @param string $store_id Store Id (optional)
# @param string $customer_id Retrieves orders specified by customer id (optional)
# @param string $customer_email Retrieves orders specified by customer email (optional)
# @param string $basket_id Retrieves order’s info specified by basket id. (optional)
# @param string $currency_id Currency Id (optional)
# @param string $phone Filter orders by customer&#39;s phone number (optional)
# @param string $order_status Retrieves orders specified by order status (optional)
# @param ARRAY[string] $order_status_ids Retrieves orders specified by order statuses (optional)
# @param string $ebay_order_status Retrieves orders specified by order status (optional)
# @param string $financial_status Retrieves orders specified by financial status (optional)
# @param ARRAY[string] $financial_status_ids Retrieves orders specified by financial status ids (optional)
# @param string $fulfillment_status Create order with fulfillment status (optional)
# @param string $return_status Retrieves orders specified by return status (optional)
# @param string $fulfillment_channel Retrieves order with a fulfillment channel (optional)
# @param string $shipping_method Retrieve entities according to shipping method (optional)
# @param string $skip_order_ids Skipped orders by ids (optional)
# @param boolean $is_deleted Filter deleted orders (optional)
# @param string $shipping_country_iso3 Retrieve entities according to shipping country (optional)
# @param string $delivery_method Retrieves order with delivery method (optional)
# @param string $ship_node_type Retrieves order with ship node type (optional)
# @param string $created_to Retrieve entities to their creation date (optional)
# @param string $created_from Retrieve entities from their creation date (optional)
# @param string $modified_to Retrieve entities to their modification date (optional)
# @param string $modified_from Retrieve entities from their modification date (optional)
# @param string $tags Order tags (optional)
# @param string $sort_by Set field to sort by (optional, default to 'order_id')
# @param string $sort_direction Set sorting direction (optional, default to 'asc')
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'order_id,customer,totals,address,items,bundles,status')
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
# @param boolean $enable_cache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add) (optional, default to false)
# @param boolean $use_latest_api_version Use the latest platform API version (optional, default to false)
{
    my $params = {
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'ids' => {
        data_type => 'string',
        description => 'Retrieves orders specified by ids',
        required => '0',
    },
    'order_ids' => {
        data_type => 'string',
        description => 'Retrieves orders specified by order ids',
        required => '0',
    },
    'since_id' => {
        data_type => 'string',
        description => 'Retrieve entities starting from the specified id.',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'customer_id' => {
        data_type => 'string',
        description => 'Retrieves orders specified by customer id',
        required => '0',
    },
    'customer_email' => {
        data_type => 'string',
        description => 'Retrieves orders specified by customer email',
        required => '0',
    },
    'basket_id' => {
        data_type => 'string',
        description => 'Retrieves order’s info specified by basket id.',
        required => '0',
    },
    'currency_id' => {
        data_type => 'string',
        description => 'Currency Id',
        required => '0',
    },
    'phone' => {
        data_type => 'string',
        description => 'Filter orders by customer&#39;s phone number',
        required => '0',
    },
    'order_status' => {
        data_type => 'string',
        description => 'Retrieves orders specified by order status',
        required => '0',
    },
    'order_status_ids' => {
        data_type => 'ARRAY[string]',
        description => 'Retrieves orders specified by order statuses',
        required => '0',
    },
    'ebay_order_status' => {
        data_type => 'string',
        description => 'Retrieves orders specified by order status',
        required => '0',
    },
    'financial_status' => {
        data_type => 'string',
        description => 'Retrieves orders specified by financial status',
        required => '0',
    },
    'financial_status_ids' => {
        data_type => 'ARRAY[string]',
        description => 'Retrieves orders specified by financial status ids',
        required => '0',
    },
    'fulfillment_status' => {
        data_type => 'string',
        description => 'Create order with fulfillment status',
        required => '0',
    },
    'return_status' => {
        data_type => 'string',
        description => 'Retrieves orders specified by return status',
        required => '0',
    },
    'fulfillment_channel' => {
        data_type => 'string',
        description => 'Retrieves order with a fulfillment channel',
        required => '0',
    },
    'shipping_method' => {
        data_type => 'string',
        description => 'Retrieve entities according to shipping method',
        required => '0',
    },
    'skip_order_ids' => {
        data_type => 'string',
        description => 'Skipped orders by ids',
        required => '0',
    },
    'is_deleted' => {
        data_type => 'boolean',
        description => 'Filter deleted orders',
        required => '0',
    },
    'shipping_country_iso3' => {
        data_type => 'string',
        description => 'Retrieve entities according to shipping country',
        required => '0',
    },
    'delivery_method' => {
        data_type => 'string',
        description => 'Retrieves order with delivery method',
        required => '0',
    },
    'ship_node_type' => {
        data_type => 'string',
        description => 'Retrieves order with ship node type',
        required => '0',
    },
    'created_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their creation date',
        required => '0',
    },
    'created_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their creation date',
        required => '0',
    },
    'modified_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their modification date',
        required => '0',
    },
    'modified_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their modification date',
        required => '0',
    },
    'tags' => {
        data_type => 'string',
        description => 'Order tags',
        required => '0',
    },
    'sort_by' => {
        data_type => 'string',
        description => 'Set field to sort by',
        required => '0',
    },
    'sort_direction' => {
        data_type => 'string',
        description => 'Set sorting direction',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    'enable_cache' => {
        data_type => 'boolean',
        description => 'If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)',
        required => '0',
    },
    'use_latest_api_version' => {
        data_type => 'boolean',
        description => 'Use the latest platform API version',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_list' } = {
        summary => 'order.list',
        params => $params,
        returns => 'ModelResponseOrderList',
        };
}
# @return ModelResponseOrderList
#
sub order_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/order.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'ids'}) {
        $query_params->{'ids'} = $self->{api_client}->to_query_value($args{'ids'});
    }

    # query params
    if ( exists $args{'order_ids'}) {
        $query_params->{'order_ids'} = $self->{api_client}->to_query_value($args{'order_ids'});
    }

    # query params
    if ( exists $args{'since_id'}) {
        $query_params->{'since_id'} = $self->{api_client}->to_query_value($args{'since_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'customer_id'}) {
        $query_params->{'customer_id'} = $self->{api_client}->to_query_value($args{'customer_id'});
    }

    # query params
    if ( exists $args{'customer_email'}) {
        $query_params->{'customer_email'} = $self->{api_client}->to_query_value($args{'customer_email'});
    }

    # query params
    if ( exists $args{'basket_id'}) {
        $query_params->{'basket_id'} = $self->{api_client}->to_query_value($args{'basket_id'});
    }

    # query params
    if ( exists $args{'currency_id'}) {
        $query_params->{'currency_id'} = $self->{api_client}->to_query_value($args{'currency_id'});
    }

    # query params
    if ( exists $args{'phone'}) {
        $query_params->{'phone'} = $self->{api_client}->to_query_value($args{'phone'});
    }

    # query params
    if ( exists $args{'order_status'}) {
        $query_params->{'order_status'} = $self->{api_client}->to_query_value($args{'order_status'});
    }

    # query params
    if ( exists $args{'order_status_ids'}) {
        $query_params->{'order_status_ids'} = $self->{api_client}->to_query_value($args{'order_status_ids'});
    }

    # query params
    if ( exists $args{'ebay_order_status'}) {
        $query_params->{'ebay_order_status'} = $self->{api_client}->to_query_value($args{'ebay_order_status'});
    }

    # query params
    if ( exists $args{'financial_status'}) {
        $query_params->{'financial_status'} = $self->{api_client}->to_query_value($args{'financial_status'});
    }

    # query params
    if ( exists $args{'financial_status_ids'}) {
        $query_params->{'financial_status_ids'} = $self->{api_client}->to_query_value($args{'financial_status_ids'});
    }

    # query params
    if ( exists $args{'fulfillment_status'}) {
        $query_params->{'fulfillment_status'} = $self->{api_client}->to_query_value($args{'fulfillment_status'});
    }

    # query params
    if ( exists $args{'return_status'}) {
        $query_params->{'return_status'} = $self->{api_client}->to_query_value($args{'return_status'});
    }

    # query params
    if ( exists $args{'fulfillment_channel'}) {
        $query_params->{'fulfillment_channel'} = $self->{api_client}->to_query_value($args{'fulfillment_channel'});
    }

    # query params
    if ( exists $args{'shipping_method'}) {
        $query_params->{'shipping_method'} = $self->{api_client}->to_query_value($args{'shipping_method'});
    }

    # query params
    if ( exists $args{'skip_order_ids'}) {
        $query_params->{'skip_order_ids'} = $self->{api_client}->to_query_value($args{'skip_order_ids'});
    }

    # query params
    if ( exists $args{'is_deleted'}) {
        $query_params->{'is_deleted'} = $self->{api_client}->to_query_value($args{'is_deleted'});
    }

    # query params
    if ( exists $args{'shipping_country_iso3'}) {
        $query_params->{'shipping_country_iso3'} = $self->{api_client}->to_query_value($args{'shipping_country_iso3'});
    }

    # query params
    if ( exists $args{'delivery_method'}) {
        $query_params->{'delivery_method'} = $self->{api_client}->to_query_value($args{'delivery_method'});
    }

    # query params
    if ( exists $args{'ship_node_type'}) {
        $query_params->{'ship_node_type'} = $self->{api_client}->to_query_value($args{'ship_node_type'});
    }

    # query params
    if ( exists $args{'created_to'}) {
        $query_params->{'created_to'} = $self->{api_client}->to_query_value($args{'created_to'});
    }

    # query params
    if ( exists $args{'created_from'}) {
        $query_params->{'created_from'} = $self->{api_client}->to_query_value($args{'created_from'});
    }

    # query params
    if ( exists $args{'modified_to'}) {
        $query_params->{'modified_to'} = $self->{api_client}->to_query_value($args{'modified_to'});
    }

    # query params
    if ( exists $args{'modified_from'}) {
        $query_params->{'modified_from'} = $self->{api_client}->to_query_value($args{'modified_from'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    # query params
    if ( exists $args{'sort_by'}) {
        $query_params->{'sort_by'} = $self->{api_client}->to_query_value($args{'sort_by'});
    }

    # query params
    if ( exists $args{'sort_direction'}) {
        $query_params->{'sort_direction'} = $self->{api_client}->to_query_value($args{'sort_direction'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    # query params
    if ( exists $args{'enable_cache'}) {
        $query_params->{'enable_cache'} = $self->{api_client}->to_query_value($args{'enable_cache'});
    }

    # query params
    if ( exists $args{'use_latest_api_version'}) {
        $query_params->{'use_latest_api_version'} = $self->{api_client}->to_query_value($args{'use_latest_api_version'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseOrderList', $response);
    return $_response_object;
}

#
# order_preestimate_shipping_list
#
# order.preestimate_shipping.list
#
# @param OrderPreestimateShippingList $order_preestimate_shipping_list  (required)
{
    my $params = {
    'order_preestimate_shipping_list' => {
        data_type => 'OrderPreestimateShippingList',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_preestimate_shipping_list' } = {
        summary => 'order.preestimate_shipping.list',
        params => $params,
        returns => 'ModelResponseOrderPreestimateShippingList',
        };
}
# @return ModelResponseOrderPreestimateShippingList
#
sub order_preestimate_shipping_list {
    my ($self, %args) = @_;

    # verify the required parameter 'order_preestimate_shipping_list' is set
    unless (exists $args{'order_preestimate_shipping_list'}) {
      croak("Missing the required parameter 'order_preestimate_shipping_list' when calling order_preestimate_shipping_list");
    }

    # parse inputs
    my $_resource_path = '/order.preestimate_shipping.list.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'order_preestimate_shipping_list'}) {
        $_body_data = $args{'order_preestimate_shipping_list'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseOrderPreestimateShippingList', $response);
    return $_response_object;
}

#
# order_refund_add
#
# order.refund.add
#
# @param OrderRefundAdd $order_refund_add  (required)
{
    my $params = {
    'order_refund_add' => {
        data_type => 'OrderRefundAdd',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_refund_add' } = {
        summary => 'order.refund.add',
        params => $params,
        returns => 'OrderRefundAdd200Response',
        };
}
# @return OrderRefundAdd200Response
#
sub order_refund_add {
    my ($self, %args) = @_;

    # verify the required parameter 'order_refund_add' is set
    unless (exists $args{'order_refund_add'}) {
      croak("Missing the required parameter 'order_refund_add' when calling order_refund_add");
    }

    # parse inputs
    my $_resource_path = '/order.refund.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'order_refund_add'}) {
        $_body_data = $args{'order_refund_add'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrderRefundAdd200Response', $response);
    return $_response_object;
}

#
# order_return_add
#
# order.return.add
#
# @param OrderReturnAdd $order_return_add  (required)
{
    my $params = {
    'order_return_add' => {
        data_type => 'OrderReturnAdd',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_return_add' } = {
        summary => 'order.return.add',
        params => $params,
        returns => 'OrderReturnAdd200Response',
        };
}
# @return OrderReturnAdd200Response
#
sub order_return_add {
    my ($self, %args) = @_;

    # verify the required parameter 'order_return_add' is set
    unless (exists $args{'order_return_add'}) {
      croak("Missing the required parameter 'order_return_add' when calling order_return_add");
    }

    # parse inputs
    my $_resource_path = '/order.return.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'order_return_add'}) {
        $_body_data = $args{'order_return_add'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrderReturnAdd200Response', $response);
    return $_response_object;
}

#
# order_return_delete
#
# order.return.delete
#
# @param string $return_id Return ID (required)
# @param string $order_id Defines the order id (required)
# @param string $store_id Store Id (optional)
{
    my $params = {
    'return_id' => {
        data_type => 'string',
        description => 'Return ID',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'Defines the order id',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_return_delete' } = {
        summary => 'order.return.delete',
        params => $params,
        returns => 'AttributeValueDelete200Response',
        };
}
# @return AttributeValueDelete200Response
#
sub order_return_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'return_id' is set
    unless (exists $args{'return_id'}) {
      croak("Missing the required parameter 'return_id' when calling order_return_delete");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling order_return_delete");
    }

    # parse inputs
    my $_resource_path = '/order.return.delete.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'return_id'}) {
        $query_params->{'return_id'} = $self->{api_client}->to_query_value($args{'return_id'});
    }

    # query params
    if ( exists $args{'order_id'}) {
        $query_params->{'order_id'} = $self->{api_client}->to_query_value($args{'order_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttributeValueDelete200Response', $response);
    return $_response_object;
}

#
# order_return_update
#
# order.return.update
#
# @param OrderReturnUpdate $order_return_update  (required)
{
    my $params = {
    'order_return_update' => {
        data_type => 'OrderReturnUpdate',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_return_update' } = {
        summary => 'order.return.update',
        params => $params,
        returns => 'AccountConfigUpdate200Response',
        };
}
# @return AccountConfigUpdate200Response
#
sub order_return_update {
    my ($self, %args) = @_;

    # verify the required parameter 'order_return_update' is set
    unless (exists $args{'order_return_update'}) {
      croak("Missing the required parameter 'order_return_update' when calling order_return_update");
    }

    # parse inputs
    my $_resource_path = '/order.return.update.json';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'order_return_update'}) {
        $_body_data = $args{'order_return_update'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AccountConfigUpdate200Response', $response);
    return $_response_object;
}

#
# order_shipment_add
#
# order.shipment.add
#
# @param OrderShipmentAdd $order_shipment_add  (required)
{
    my $params = {
    'order_shipment_add' => {
        data_type => 'OrderShipmentAdd',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_shipment_add' } = {
        summary => 'order.shipment.add',
        params => $params,
        returns => 'OrderShipmentAdd200Response',
        };
}
# @return OrderShipmentAdd200Response
#
sub order_shipment_add {
    my ($self, %args) = @_;

    # verify the required parameter 'order_shipment_add' is set
    unless (exists $args{'order_shipment_add'}) {
      croak("Missing the required parameter 'order_shipment_add' when calling order_shipment_add");
    }

    # parse inputs
    my $_resource_path = '/order.shipment.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'order_shipment_add'}) {
        $_body_data = $args{'order_shipment_add'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrderShipmentAdd200Response', $response);
    return $_response_object;
}

#
# order_shipment_add_batch
#
# order.shipment.add.batch
#
# @param OrderShipmentAddBatch $order_shipment_add_batch  (required)
{
    my $params = {
    'order_shipment_add_batch' => {
        data_type => 'OrderShipmentAddBatch',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_shipment_add_batch' } = {
        summary => 'order.shipment.add.batch',
        params => $params,
        returns => 'CategoryAddBatch200Response',
        };
}
# @return CategoryAddBatch200Response
#
sub order_shipment_add_batch {
    my ($self, %args) = @_;

    # verify the required parameter 'order_shipment_add_batch' is set
    unless (exists $args{'order_shipment_add_batch'}) {
      croak("Missing the required parameter 'order_shipment_add_batch' when calling order_shipment_add_batch");
    }

    # parse inputs
    my $_resource_path = '/order.shipment.add.batch.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'order_shipment_add_batch'}) {
        $_body_data = $args{'order_shipment_add_batch'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CategoryAddBatch200Response', $response);
    return $_response_object;
}

#
# order_shipment_delete
#
# order.shipment.delete
#
# @param string $shipment_id Shipment id indicates the number of delivery (required)
# @param string $order_id Defines the order for which the shipment will be deleted (required)
# @param string $store_id Store Id (optional)
{
    my $params = {
    'shipment_id' => {
        data_type => 'string',
        description => 'Shipment id indicates the number of delivery',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'Defines the order for which the shipment will be deleted',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_shipment_delete' } = {
        summary => 'order.shipment.delete',
        params => $params,
        returns => 'OrderShipmentDelete200Response',
        };
}
# @return OrderShipmentDelete200Response
#
sub order_shipment_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'shipment_id' is set
    unless (exists $args{'shipment_id'}) {
      croak("Missing the required parameter 'shipment_id' when calling order_shipment_delete");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling order_shipment_delete");
    }

    # parse inputs
    my $_resource_path = '/order.shipment.delete.json';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'shipment_id'}) {
        $query_params->{'shipment_id'} = $self->{api_client}->to_query_value($args{'shipment_id'});
    }

    # query params
    if ( exists $args{'order_id'}) {
        $query_params->{'order_id'} = $self->{api_client}->to_query_value($args{'order_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrderShipmentDelete200Response', $response);
    return $_response_object;
}

#
# order_shipment_info
#
# order.shipment.info
#
# @param string $id Entity id (required)
# @param string $order_id Defines the order id (required)
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param string $store_id Store Id (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'Defines the order id',
        required => '1',
    },
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_shipment_info' } = {
        summary => 'order.shipment.info',
        params => $params,
        returns => 'OrderShipmentInfo200Response',
        };
}
# @return OrderShipmentInfo200Response
#
sub order_shipment_info {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling order_shipment_info");
    }

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling order_shipment_info");
    }

    # parse inputs
    my $_resource_path = '/order.shipment.info.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'order_id'}) {
        $query_params->{'order_id'} = $self->{api_client}->to_query_value($args{'order_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrderShipmentInfo200Response', $response);
    return $_response_object;
}

#
# order_shipment_list
#
# order.shipment.list
#
# @param string $order_id Retrieves shipments specified by order id (required)
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param string $store_id Store Id (optional)
# @param string $created_from Retrieve entities from their creation date (optional)
# @param string $created_to Retrieve entities to their creation date (optional)
# @param string $modified_from Retrieve entities from their modification date (optional)
# @param string $modified_to Retrieve entities to their modification date (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,items,tracking_numbers')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'order_id' => {
        data_type => 'string',
        description => 'Retrieves shipments specified by order id',
        required => '1',
    },
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'created_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their creation date',
        required => '0',
    },
    'created_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their creation date',
        required => '0',
    },
    'modified_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their modification date',
        required => '0',
    },
    'modified_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their modification date',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_shipment_list' } = {
        summary => 'order.shipment.list',
        params => $params,
        returns => 'ModelResponseOrderShipmentList',
        };
}
# @return ModelResponseOrderShipmentList
#
sub order_shipment_list {
    my ($self, %args) = @_;

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling order_shipment_list");
    }

    # parse inputs
    my $_resource_path = '/order.shipment.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'order_id'}) {
        $query_params->{'order_id'} = $self->{api_client}->to_query_value($args{'order_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'created_from'}) {
        $query_params->{'created_from'} = $self->{api_client}->to_query_value($args{'created_from'});
    }

    # query params
    if ( exists $args{'created_to'}) {
        $query_params->{'created_to'} = $self->{api_client}->to_query_value($args{'created_to'});
    }

    # query params
    if ( exists $args{'modified_from'}) {
        $query_params->{'modified_from'} = $self->{api_client}->to_query_value($args{'modified_from'});
    }

    # query params
    if ( exists $args{'modified_to'}) {
        $query_params->{'modified_to'} = $self->{api_client}->to_query_value($args{'modified_to'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseOrderShipmentList', $response);
    return $_response_object;
}

#
# order_shipment_tracking_add
#
# order.shipment.tracking.add
#
# @param OrderShipmentTrackingAdd $order_shipment_tracking_add  (required)
{
    my $params = {
    'order_shipment_tracking_add' => {
        data_type => 'OrderShipmentTrackingAdd',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_shipment_tracking_add' } = {
        summary => 'order.shipment.tracking.add',
        params => $params,
        returns => 'OrderShipmentTrackingAdd200Response',
        };
}
# @return OrderShipmentTrackingAdd200Response
#
sub order_shipment_tracking_add {
    my ($self, %args) = @_;

    # verify the required parameter 'order_shipment_tracking_add' is set
    unless (exists $args{'order_shipment_tracking_add'}) {
      croak("Missing the required parameter 'order_shipment_tracking_add' when calling order_shipment_tracking_add");
    }

    # parse inputs
    my $_resource_path = '/order.shipment.tracking.add.json';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'order_shipment_tracking_add'}) {
        $_body_data = $args{'order_shipment_tracking_add'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('OrderShipmentTrackingAdd200Response', $response);
    return $_response_object;
}

#
# order_shipment_update
#
# order.shipment.update
#
# @param OrderShipmentUpdate $order_shipment_update  (required)
{
    my $params = {
    'order_shipment_update' => {
        data_type => 'OrderShipmentUpdate',
        description => '',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_shipment_update' } = {
        summary => 'order.shipment.update',
        params => $params,
        returns => 'AccountConfigUpdate200Response',
        };
}
# @return AccountConfigUpdate200Response
#
sub order_shipment_update {
    my ($self, %args) = @_;

    # verify the required parameter 'order_shipment_update' is set
    unless (exists $args{'order_shipment_update'}) {
      croak("Missing the required parameter 'order_shipment_update' when calling order_shipment_update");
    }

    # parse inputs
    my $_resource_path = '/order.shipment.update.json';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    my $_body_data;
    # body params
    if ( exists $args{'order_shipment_update'}) {
        $_body_data = $args{'order_shipment_update'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AccountConfigUpdate200Response', $response);
    return $_response_object;
}

#
# order_status_list
#
# order.status.list
#
# @param string $store_id Store Id (optional)
# @param string $action Available statuses for the specified action. (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
{
    my $params = {
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'action' => {
        data_type => 'string',
        description => 'Available statuses for the specified action.',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_status_list' } = {
        summary => 'order.status.list',
        params => $params,
        returns => 'ModelResponseOrderStatusList',
        };
}
# @return ModelResponseOrderStatusList
#
sub order_status_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/order.status.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'action'}) {
        $query_params->{'action'} = $self->{api_client}->to_query_value($args{'action'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseOrderStatusList', $response);
    return $_response_object;
}

#
# order_transaction_list
#
# order.transaction.list
#
# @param string $order_ids Retrieves order transactions specified by order ids (required)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param string $store_id Store Id (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_id,amount,description')
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'order_ids' => {
        data_type => 'string',
        description => 'Retrieves order transactions specified by order ids',
        required => '1',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_transaction_list' } = {
        summary => 'order.transaction.list',
        params => $params,
        returns => 'ModelResponseOrderTransactionList',
        };
}
# @return ModelResponseOrderTransactionList
#
sub order_transaction_list {
    my ($self, %args) = @_;

    # verify the required parameter 'order_ids' is set
    unless (exists $args{'order_ids'}) {
      croak("Missing the required parameter 'order_ids' when calling order_transaction_list");
    }

    # parse inputs
    my $_resource_path = '/order.transaction.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'order_ids'}) {
        $query_params->{'order_ids'} = $self->{api_client}->to_query_value($args{'order_ids'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseOrderTransactionList', $response);
    return $_response_object;
}

#
# order_update
#
# order.update
#
# @param string $order_id Defines the orders specified by order id (required)
# @param string $store_id Defines store id where the order should be found (optional)
# @param string $order_status Defines new order&#39;s status (optional)
# @param string $financial_status Update order financial status to specified (optional)
# @param string $fulfillment_status Create order with fulfillment status (optional)
# @param string $cancellation_reason Defines the cancellation reason when the order will be canceled (optional)
# @param string $order_payment_method Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39; (optional)
# @param string $comment Specifies order comment (optional)
# @param string $admin_comment Specifies admin&#39;s order comment (optional)
# @param string $admin_private_comment Specifies private admin&#39;s order comment (optional)
# @param string $invoice_admin_comment Specifies admin&#39;s order invoice comment (optional)
# @param string $date_modified Specifies order&#39;s  modification date (optional)
# @param string $date_finished Specifies order&#39;s  finished date (optional)
# @param boolean $send_notifications Send notifications to customer after order was created (optional, default to false)
# @param boolean $create_invoice Determines whether an invoice should be created if it has not already been created (optional)
# @param string $origin The source of the order (optional)
# @param string $tags Order tags (optional)
{
    my $params = {
    'order_id' => {
        data_type => 'string',
        description => 'Defines the orders specified by order id',
        required => '1',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Defines store id where the order should be found',
        required => '0',
    },
    'order_status' => {
        data_type => 'string',
        description => 'Defines new order&#39;s status',
        required => '0',
    },
    'financial_status' => {
        data_type => 'string',
        description => 'Update order financial status to specified',
        required => '0',
    },
    'fulfillment_status' => {
        data_type => 'string',
        description => 'Create order with fulfillment status',
        required => '0',
    },
    'cancellation_reason' => {
        data_type => 'string',
        description => 'Defines the cancellation reason when the order will be canceled',
        required => '0',
    },
    'order_payment_method' => {
        data_type => 'string',
        description => 'Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39;',
        required => '0',
    },
    'comment' => {
        data_type => 'string',
        description => 'Specifies order comment',
        required => '0',
    },
    'admin_comment' => {
        data_type => 'string',
        description => 'Specifies admin&#39;s order comment',
        required => '0',
    },
    'admin_private_comment' => {
        data_type => 'string',
        description => 'Specifies private admin&#39;s order comment',
        required => '0',
    },
    'invoice_admin_comment' => {
        data_type => 'string',
        description => 'Specifies admin&#39;s order invoice comment',
        required => '0',
    },
    'date_modified' => {
        data_type => 'string',
        description => 'Specifies order&#39;s  modification date',
        required => '0',
    },
    'date_finished' => {
        data_type => 'string',
        description => 'Specifies order&#39;s  finished date',
        required => '0',
    },
    'send_notifications' => {
        data_type => 'boolean',
        description => 'Send notifications to customer after order was created',
        required => '0',
    },
    'create_invoice' => {
        data_type => 'boolean',
        description => 'Determines whether an invoice should be created if it has not already been created',
        required => '0',
    },
    'origin' => {
        data_type => 'string',
        description => 'The source of the order',
        required => '0',
    },
    'tags' => {
        data_type => 'string',
        description => 'Order tags',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'order_update' } = {
        summary => 'order.update',
        params => $params,
        returns => 'AccountConfigUpdate200Response',
        };
}
# @return AccountConfigUpdate200Response
#
sub order_update {
    my ($self, %args) = @_;

    # verify the required parameter 'order_id' is set
    unless (exists $args{'order_id'}) {
      croak("Missing the required parameter 'order_id' when calling order_update");
    }

    # parse inputs
    my $_resource_path = '/order.update.json';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'order_id'}) {
        $query_params->{'order_id'} = $self->{api_client}->to_query_value($args{'order_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'order_status'}) {
        $query_params->{'order_status'} = $self->{api_client}->to_query_value($args{'order_status'});
    }

    # query params
    if ( exists $args{'financial_status'}) {
        $query_params->{'financial_status'} = $self->{api_client}->to_query_value($args{'financial_status'});
    }

    # query params
    if ( exists $args{'fulfillment_status'}) {
        $query_params->{'fulfillment_status'} = $self->{api_client}->to_query_value($args{'fulfillment_status'});
    }

    # query params
    if ( exists $args{'cancellation_reason'}) {
        $query_params->{'cancellation_reason'} = $self->{api_client}->to_query_value($args{'cancellation_reason'});
    }

    # query params
    if ( exists $args{'order_payment_method'}) {
        $query_params->{'order_payment_method'} = $self->{api_client}->to_query_value($args{'order_payment_method'});
    }

    # query params
    if ( exists $args{'comment'}) {
        $query_params->{'comment'} = $self->{api_client}->to_query_value($args{'comment'});
    }

    # query params
    if ( exists $args{'admin_comment'}) {
        $query_params->{'admin_comment'} = $self->{api_client}->to_query_value($args{'admin_comment'});
    }

    # query params
    if ( exists $args{'admin_private_comment'}) {
        $query_params->{'admin_private_comment'} = $self->{api_client}->to_query_value($args{'admin_private_comment'});
    }

    # query params
    if ( exists $args{'invoice_admin_comment'}) {
        $query_params->{'invoice_admin_comment'} = $self->{api_client}->to_query_value($args{'invoice_admin_comment'});
    }

    # query params
    if ( exists $args{'date_modified'}) {
        $query_params->{'date_modified'} = $self->{api_client}->to_query_value($args{'date_modified'});
    }

    # query params
    if ( exists $args{'date_finished'}) {
        $query_params->{'date_finished'} = $self->{api_client}->to_query_value($args{'date_finished'});
    }

    # query params
    if ( exists $args{'send_notifications'}) {
        $query_params->{'send_notifications'} = $self->{api_client}->to_query_value($args{'send_notifications'});
    }

    # query params
    if ( exists $args{'create_invoice'}) {
        $query_params->{'create_invoice'} = $self->{api_client}->to_query_value($args{'create_invoice'});
    }

    # query params
    if ( exists $args{'origin'}) {
        $query_params->{'origin'} = $self->{api_client}->to_query_value($args{'origin'});
    }

    # query params
    if ( exists $args{'tags'}) {
        $query_params->{'tags'} = $self->{api_client}->to_query_value($args{'tags'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AccountConfigUpdate200Response', $response);
    return $_response_object;
}

1;
