=begin comment

API2Cart OpenAPI

API2Cart

The version of the OpenAPI document: 1.1
Contact: contact@api2cart.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ReturnApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# return_action_list
#
# return.action.list
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'return_action_list' } = {
        summary => 'return.action.list',
        params => $params,
        returns => 'ReturnActionList200Response',
        };
}
# @return ReturnActionList200Response
#
sub return_action_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/return.action.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ReturnActionList200Response', $response);
    return $_response_object;
}

#
# return_count
#
# return.count
#
# @param string $order_ids Counts return requests specified by order ids (optional)
# @param string $customer_id Counts return requests quantity specified by customer id (optional)
# @param string $store_id Store Id (optional)
# @param string $status Defines status (optional)
# @param string $return_type Retrieves returns specified by return type (optional)
# @param string $created_from Retrieve entities from their creation date (optional)
# @param string $created_to Retrieve entities to their creation date (optional)
# @param string $modified_from Retrieve entities from their modification date (optional)
# @param string $modified_to Retrieve entities to their modification date (optional)
# @param string $report_request_id Report request id (optional)
# @param boolean $disable_report_cache Disable report cache for current request (optional, default to false)
{
    my $params = {
    'order_ids' => {
        data_type => 'string',
        description => 'Counts return requests specified by order ids',
        required => '0',
    },
    'customer_id' => {
        data_type => 'string',
        description => 'Counts return requests quantity specified by customer id',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Defines status',
        required => '0',
    },
    'return_type' => {
        data_type => 'string',
        description => 'Retrieves returns specified by return type',
        required => '0',
    },
    'created_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their creation date',
        required => '0',
    },
    'created_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their creation date',
        required => '0',
    },
    'modified_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their modification date',
        required => '0',
    },
    'modified_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their modification date',
        required => '0',
    },
    'report_request_id' => {
        data_type => 'string',
        description => 'Report request id',
        required => '0',
    },
    'disable_report_cache' => {
        data_type => 'boolean',
        description => 'Disable report cache for current request',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'return_count' } = {
        summary => 'return.count',
        params => $params,
        returns => 'ReturnCount200Response',
        };
}
# @return ReturnCount200Response
#
sub return_count {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/return.count.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'order_ids'}) {
        $query_params->{'order_ids'} = $self->{api_client}->to_query_value($args{'order_ids'});
    }

    # query params
    if ( exists $args{'customer_id'}) {
        $query_params->{'customer_id'} = $self->{api_client}->to_query_value($args{'customer_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'return_type'}) {
        $query_params->{'return_type'} = $self->{api_client}->to_query_value($args{'return_type'});
    }

    # query params
    if ( exists $args{'created_from'}) {
        $query_params->{'created_from'} = $self->{api_client}->to_query_value($args{'created_from'});
    }

    # query params
    if ( exists $args{'created_to'}) {
        $query_params->{'created_to'} = $self->{api_client}->to_query_value($args{'created_to'});
    }

    # query params
    if ( exists $args{'modified_from'}) {
        $query_params->{'modified_from'} = $self->{api_client}->to_query_value($args{'modified_from'});
    }

    # query params
    if ( exists $args{'modified_to'}) {
        $query_params->{'modified_to'} = $self->{api_client}->to_query_value($args{'modified_to'});
    }

    # query params
    if ( exists $args{'report_request_id'}) {
        $query_params->{'report_request_id'} = $self->{api_client}->to_query_value($args{'report_request_id'});
    }

    # query params
    if ( exists $args{'disable_report_cache'}) {
        $query_params->{'disable_report_cache'} = $self->{api_client}->to_query_value($args{'disable_report_cache'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ReturnCount200Response', $response);
    return $_response_object;
}

#
# return_info
#
# return.info
#
# @param string $id Entity id (required)
# @param string $order_id Defines the order id (optional)
# @param string $store_id Store Id (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
{
    my $params = {
    'id' => {
        data_type => 'string',
        description => 'Entity id',
        required => '1',
    },
    'order_id' => {
        data_type => 'string',
        description => 'Defines the order id',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'return_info' } = {
        summary => 'return.info',
        params => $params,
        returns => 'ReturnInfo200Response',
        };
}
# @return ReturnInfo200Response
#
sub return_info {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling return_info");
    }

    # parse inputs
    my $_resource_path = '/return.info.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'order_id'}) {
        $query_params->{'order_id'} = $self->{api_client}->to_query_value($args{'order_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ReturnInfo200Response', $response);
    return $_response_object;
}

#
# return_list
#
# return.list
#
# @param int $start This parameter sets the number from which you want to get entities (optional, default to 0)
# @param int $count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250 (optional, default to 10)
# @param string $page_cursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter) (optional)
# @param string $order_id Defines the order id (optional)
# @param string $order_ids Retrieves return requests specified by order ids (optional)
# @param string $customer_id Retrieves return requests specified by customer id (optional)
# @param string $store_id Store Id (optional)
# @param string $status Defines status (optional)
# @param string $return_type Retrieves returns specified by return type (optional)
# @param string $created_from Retrieve entities from their creation date (optional)
# @param string $created_to Retrieve entities to their creation date (optional)
# @param string $modified_from Retrieve entities from their modification date (optional)
# @param string $modified_to Retrieve entities to their modification date (optional)
# @param string $response_fields Set this parameter in order to choose which entity fields you want to retrieve (optional)
# @param string $params Set this parameter in order to choose which entity fields you want to retrieve (optional, default to 'id,order_products')
# @param string $exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all (optional)
# @param string $report_request_id Report request id (optional)
# @param boolean $disable_report_cache Disable report cache for current request (optional, default to false)
{
    my $params = {
    'start' => {
        data_type => 'int',
        description => 'This parameter sets the number from which you want to get entities',
        required => '0',
    },
    'count' => {
        data_type => 'int',
        description => 'This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250',
        required => '0',
    },
    'page_cursor' => {
        data_type => 'string',
        description => 'Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)',
        required => '0',
    },
    'order_id' => {
        data_type => 'string',
        description => 'Defines the order id',
        required => '0',
    },
    'order_ids' => {
        data_type => 'string',
        description => 'Retrieves return requests specified by order ids',
        required => '0',
    },
    'customer_id' => {
        data_type => 'string',
        description => 'Retrieves return requests specified by customer id',
        required => '0',
    },
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    'status' => {
        data_type => 'string',
        description => 'Defines status',
        required => '0',
    },
    'return_type' => {
        data_type => 'string',
        description => 'Retrieves returns specified by return type',
        required => '0',
    },
    'created_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their creation date',
        required => '0',
    },
    'created_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their creation date',
        required => '0',
    },
    'modified_from' => {
        data_type => 'string',
        description => 'Retrieve entities from their modification date',
        required => '0',
    },
    'modified_to' => {
        data_type => 'string',
        description => 'Retrieve entities to their modification date',
        required => '0',
    },
    'response_fields' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'params' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to retrieve',
        required => '0',
    },
    'exclude' => {
        data_type => 'string',
        description => 'Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all',
        required => '0',
    },
    'report_request_id' => {
        data_type => 'string',
        description => 'Report request id',
        required => '0',
    },
    'disable_report_cache' => {
        data_type => 'boolean',
        description => 'Disable report cache for current request',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'return_list' } = {
        summary => 'return.list',
        params => $params,
        returns => 'ModelResponseReturnList',
        };
}
# @return ModelResponseReturnList
#
sub return_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/return.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'count'}) {
        $query_params->{'count'} = $self->{api_client}->to_query_value($args{'count'});
    }

    # query params
    if ( exists $args{'page_cursor'}) {
        $query_params->{'page_cursor'} = $self->{api_client}->to_query_value($args{'page_cursor'});
    }

    # query params
    if ( exists $args{'order_id'}) {
        $query_params->{'order_id'} = $self->{api_client}->to_query_value($args{'order_id'});
    }

    # query params
    if ( exists $args{'order_ids'}) {
        $query_params->{'order_ids'} = $self->{api_client}->to_query_value($args{'order_ids'});
    }

    # query params
    if ( exists $args{'customer_id'}) {
        $query_params->{'customer_id'} = $self->{api_client}->to_query_value($args{'customer_id'});
    }

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    # query params
    if ( exists $args{'status'}) {
        $query_params->{'status'} = $self->{api_client}->to_query_value($args{'status'});
    }

    # query params
    if ( exists $args{'return_type'}) {
        $query_params->{'return_type'} = $self->{api_client}->to_query_value($args{'return_type'});
    }

    # query params
    if ( exists $args{'created_from'}) {
        $query_params->{'created_from'} = $self->{api_client}->to_query_value($args{'created_from'});
    }

    # query params
    if ( exists $args{'created_to'}) {
        $query_params->{'created_to'} = $self->{api_client}->to_query_value($args{'created_to'});
    }

    # query params
    if ( exists $args{'modified_from'}) {
        $query_params->{'modified_from'} = $self->{api_client}->to_query_value($args{'modified_from'});
    }

    # query params
    if ( exists $args{'modified_to'}) {
        $query_params->{'modified_to'} = $self->{api_client}->to_query_value($args{'modified_to'});
    }

    # query params
    if ( exists $args{'response_fields'}) {
        $query_params->{'response_fields'} = $self->{api_client}->to_query_value($args{'response_fields'});
    }

    # query params
    if ( exists $args{'params'}) {
        $query_params->{'params'} = $self->{api_client}->to_query_value($args{'params'});
    }

    # query params
    if ( exists $args{'exclude'}) {
        $query_params->{'exclude'} = $self->{api_client}->to_query_value($args{'exclude'});
    }

    # query params
    if ( exists $args{'report_request_id'}) {
        $query_params->{'report_request_id'} = $self->{api_client}->to_query_value($args{'report_request_id'});
    }

    # query params
    if ( exists $args{'disable_report_cache'}) {
        $query_params->{'disable_report_cache'} = $self->{api_client}->to_query_value($args{'disable_report_cache'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ModelResponseReturnList', $response);
    return $_response_object;
}

#
# return_reason_list
#
# return.reason.list
#
# @param string $store_id Store Id (optional)
{
    my $params = {
    'store_id' => {
        data_type => 'string',
        description => 'Store Id',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'return_reason_list' } = {
        summary => 'return.reason.list',
        params => $params,
        returns => 'ReturnReasonList200Response',
        };
}
# @return ReturnReasonList200Response
#
sub return_reason_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/return.reason.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'store_id'}) {
        $query_params->{'store_id'} = $self->{api_client}->to_query_value($args{'store_id'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ReturnReasonList200Response', $response);
    return $_response_object;
}

#
# return_status_list
#
# return.status.list
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'return_status_list' } = {
        summary => 'return.status.list',
        params => $params,
        returns => 'ReturnStatusList200Response',
        };
}
# @return ReturnStatusList200Response
#
sub return_status_list {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/return.status.list.json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(StoreKeyAuth ApiKeyAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ReturnStatusList200Response', $response);
    return $_response_object;
}

1;
